// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_13fd500b2aab5f87
#define INCLUDED_13fd500b2aab5f87
#include "LibVLC.h"
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_vlc_VlcBitmap
#include <vlc/VlcBitmap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_40_new,"vlc.VlcBitmap","new",0x1a88a34d,"vlc.VlcBitmap.new","vlc/VlcBitmap.hx",40,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_119_mThread,"vlc.VlcBitmap","mThread",0x57eecc84,"vlc.VlcBitmap.mThread","vlc/VlcBitmap.hx",119,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_127_init,"vlc.VlcBitmap","init",0x19bef783,"vlc.VlcBitmap.init","vlc/VlcBitmap.hx",127,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_132_onAddedToStage,"vlc.VlcBitmap","onAddedToStage",0x86b56c55,"vlc.VlcBitmap.onAddedToStage","vlc/VlcBitmap.hx",132,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_141_play,"vlc.VlcBitmap","play",0x1e5dea67,"vlc.VlcBitmap.play","vlc/VlcBitmap.hx",141,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_171_stop,"vlc.VlcBitmap","stop",0x205fac75,"vlc.VlcBitmap.stop","vlc/VlcBitmap.hx",171,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_184_pause,"vlc.VlcBitmap","pause",0x6c98ff23,"vlc.VlcBitmap.pause","vlc/VlcBitmap.hx",184,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_194_resume,"vlc.VlcBitmap","resume",0xb24668e0,"vlc.VlcBitmap.resume","vlc/VlcBitmap.hx",194,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_204_seek,"vlc.VlcBitmap","seek",0x205441eb,"vlc.VlcBitmap.seek","vlc/VlcBitmap.hx",204,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_215_getFPS,"vlc.VlcBitmap","getFPS",0x4cdee426,"vlc.VlcBitmap.getFPS","vlc/VlcBitmap.hx",215,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_227_getTime,"vlc.VlcBitmap","getTime",0xff7cc930,"vlc.VlcBitmap.getTime","vlc/VlcBitmap.hx",227,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_241_checkFlags,"vlc.VlcBitmap","checkFlags",0xbc194212,"vlc.VlcBitmap.checkFlags","vlc/VlcBitmap.hx",241,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_264_videoInitComplete,"vlc.VlcBitmap","videoInitComplete",0x9e0a6cb1,"vlc.VlcBitmap.videoInitComplete","vlc/VlcBitmap.hx",264,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_312_vLoop,"vlc.VlcBitmap","vLoop",0xd31a6e27,"vlc.VlcBitmap.vLoop","vlc/VlcBitmap.hx",312,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_322_render,"vlc.VlcBitmap","render",0xaeeb6a89,"vlc.VlcBitmap.render","vlc/VlcBitmap.hx",322,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_355_setVolume,"vlc.VlcBitmap","setVolume",0x92f7e1c9,"vlc.VlcBitmap.setVolume","vlc/VlcBitmap.hx",355,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_364_statusOnOpening,"vlc.VlcBitmap","statusOnOpening",0x6f7940d4,"vlc.VlcBitmap.statusOnOpening","vlc/VlcBitmap.hx",364,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_370_statusOnBuffering,"vlc.VlcBitmap","statusOnBuffering",0x446b045e,"vlc.VlcBitmap.statusOnBuffering","vlc/VlcBitmap.hx",370,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_376_statusOnPlaying,"vlc.VlcBitmap","statusOnPlaying",0xb94c4cea,"vlc.VlcBitmap.statusOnPlaying","vlc/VlcBitmap.hx",376,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_385_statusOnPaused,"vlc.VlcBitmap","statusOnPaused",0xfb3546b2,"vlc.VlcBitmap.statusOnPaused","vlc/VlcBitmap.hx",385,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_394_statusOnStopped,"vlc.VlcBitmap","statusOnStopped",0x72960f89,"vlc.VlcBitmap.statusOnStopped","vlc/VlcBitmap.hx",394,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_403_statusOnEndReached,"vlc.VlcBitmap","statusOnEndReached",0x95a077fb,"vlc.VlcBitmap.statusOnEndReached","vlc/VlcBitmap.hx",403,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_413_statusOnTimeChanged,"vlc.VlcBitmap","statusOnTimeChanged",0xef6903e3,"vlc.VlcBitmap.statusOnTimeChanged","vlc/VlcBitmap.hx",413,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_420_statusOnPositionChanged,"vlc.VlcBitmap","statusOnPositionChanged",0x022ca8c7,"vlc.VlcBitmap.statusOnPositionChanged","vlc/VlcBitmap.hx",420,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_426_statusOnSeekableChanged,"vlc.VlcBitmap","statusOnSeekableChanged",0x8b2cc97e,"vlc.VlcBitmap.statusOnSeekableChanged","vlc/VlcBitmap.hx",426,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_431_statusOnForward,"vlc.VlcBitmap","statusOnForward",0x14ff1f41,"vlc.VlcBitmap.statusOnForward","vlc/VlcBitmap.hx",431,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_436_statusOnBackward,"vlc.VlcBitmap","statusOnBackward",0x459a6ae7,"vlc.VlcBitmap.statusOnBackward","vlc/VlcBitmap.hx",436,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_441_onDisplay,"vlc.VlcBitmap","onDisplay",0x66f22590,"vlc.VlcBitmap.onDisplay","vlc/VlcBitmap.hx",441,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_446_statusOnError,"vlc.VlcBitmap","statusOnError",0x2c0a7244,"vlc.VlcBitmap.statusOnError","vlc/VlcBitmap.hx",446,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_456_get_width,"vlc.VlcBitmap","get_width",0xe209550a,"vlc.VlcBitmap.get_width","vlc/VlcBitmap.hx",456,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_460_set_width,"vlc.VlcBitmap","set_width",0xc55a4116,"vlc.VlcBitmap.set_width","vlc/VlcBitmap.hx",460,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_467_get_height,"vlc.VlcBitmap","get_height",0x9c708c63,"vlc.VlcBitmap.get_height","vlc/VlcBitmap.hx",467,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_471_set_height,"vlc.VlcBitmap","set_height",0x9fee2ad7,"vlc.VlcBitmap.set_height","vlc/VlcBitmap.hx",471,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_478_get_volume,"vlc.VlcBitmap","get_volume",0xf977ae56,"vlc.VlcBitmap.get_volume","vlc/VlcBitmap.hx",478,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_482_set_volume,"vlc.VlcBitmap","set_volume",0xfcf54cca,"vlc.VlcBitmap.set_volume","vlc/VlcBitmap.hx",482,0xfb408244)
HX_LOCAL_STACK_FRAME(_hx_pos_dc214fe6c82a61ac_492_dispose,"vlc.VlcBitmap","dispose",0x9b49ce0c,"vlc.VlcBitmap.dispose","vlc/VlcBitmap.hx",492,0xfb408244)
#include "LibVLC.cpp"
namespace vlc{

void VlcBitmap_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_40_new)
HXLINE(  65)		this->disposeOnStop = false;
HXLINE(  61)		this->volume = ((Float)1);
HXLINE(  54)		this->repeat = (int)0;
HXLINE( 107)		super::__construct(null(),null(),true);
HXLINE( 113)		this->init();
            	}

Dynamic VlcBitmap_obj::__CreateEmpty() { return new VlcBitmap_obj; }

void *VlcBitmap_obj::_hx_vtable = 0;

Dynamic VlcBitmap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VlcBitmap_obj > _hx_result = new VlcBitmap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VlcBitmap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x29124c3b || inClassId==(int)0x3b5602c1;
	}
}

void VlcBitmap_obj::mThread(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_119_mThread)
HXDLIN( 119)		this->init();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,mThread,(void))

void VlcBitmap_obj::init(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_127_init)
HXDLIN( 127)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,init,(void))

void VlcBitmap_obj::onAddedToStage( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_132_onAddedToStage)
HXLINE( 133)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null());
HXLINE( 134)		this->libvlc = LibVLC::create();
HXLINE( 135)		this->stage->addEventListener(HX_("enterFrame",f5,03,50,02),this->vLoop_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(VlcBitmap_obj,onAddedToStage,(void))

void VlcBitmap_obj::play(::String source){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_141_play)
HXLINE( 143)		this->libvlc->setRepeat(this->repeat);
HXLINE( 144)		if (!(this->inWindow)) {
HXLINE( 146)			if (hx::IsNotNull( source )) {
HXLINE( 147)				this->libvlc->play(source);
            			}
            			else {
HXLINE( 149)				this->libvlc->play();
            			}
            		}
            		else {
HXLINE( 153)			if (hx::IsNotNull( source )) {
HXLINE( 154)				this->libvlc->playInWindow(source);
            			}
            			else {
HXLINE( 156)				this->libvlc->playInWindow();
            			}
HXLINE( 158)			this->libvlc->fullscreen(this->fullscreen);
            		}
HXLINE( 165)		if (hx::IsNotNull( this->onPlay )) {
HXLINE( 166)			this->onPlay();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VlcBitmap_obj,play,(void))

void VlcBitmap_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_171_stop)
HXLINE( 173)		this->isPlaying = false;
HXLINE( 174)		this->libvlc->stop();
HXLINE( 175)		if (this->disposeOnStop) {
HXLINE( 176)			this->dispose();
            		}
HXLINE( 178)		if (hx::IsNotNull( this->onStop )) {
HXLINE( 179)			this->onStop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,stop,(void))

void VlcBitmap_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_184_pause)
HXLINE( 186)		this->isPlaying = false;
HXLINE( 187)		this->libvlc->pause();
HXLINE( 188)		if (hx::IsNotNull( this->onPause )) {
HXLINE( 189)			this->onPause();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,pause,(void))

void VlcBitmap_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_194_resume)
HXLINE( 196)		this->isPlaying = true;
HXLINE( 197)		this->libvlc->resume();
HXLINE( 198)		if (hx::IsNotNull( this->onResume )) {
HXLINE( 199)			this->onResume();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,resume,(void))

void VlcBitmap_obj::seek(Float seekTotime){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_204_seek)
HXLINE( 206)		this->libvlc->setPosition(seekTotime);
HXLINE( 207)		if (hx::IsNotNull( this->onSeek )) {
HXLINE( 208)			this->onSeek();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VlcBitmap_obj,seek,(void))

Float VlcBitmap_obj::getFPS(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_215_getFPS)
HXDLIN( 215)		bool _hx_tmp;
HXDLIN( 215)		if (hx::IsNotNull( this->libvlc )) {
HXDLIN( 215)			_hx_tmp = this->initComplete;
            		}
            		else {
HXDLIN( 215)			_hx_tmp = false;
            		}
HXDLIN( 215)		if (_hx_tmp) {
HXLINE( 216)			return this->libvlc->getFPS();
            		}
            		else {
HXLINE( 218)			return (int)0;
            		}
HXLINE( 215)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,getFPS,return )

int VlcBitmap_obj::getTime(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_227_getTime)
HXDLIN( 227)		bool _hx_tmp;
HXDLIN( 227)		if (hx::IsNotNull( this->libvlc )) {
HXDLIN( 227)			_hx_tmp = this->initComplete;
            		}
            		else {
HXDLIN( 227)			_hx_tmp = false;
            		}
HXDLIN( 227)		if (_hx_tmp) {
HXLINE( 228)			return this->libvlc->getTime();
            		}
            		else {
HXLINE( 230)			return (int)0;
            		}
HXLINE( 227)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,getTime,return )

void VlcBitmap_obj::checkFlags(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_241_checkFlags)
HXDLIN( 241)		if (!(this->isDisposed)) {
HXLINE( 243)			if (hx::IsEq( libvlc->flags[1],(int)1 )) {
HXLINE( 243)				libvlc->flags[1]=-1;
HXDLIN( 243)				this->statusOnPlaying();
            			}
HXLINE( 244)			if (hx::IsEq( libvlc->flags[2],(int)1 )) {
HXLINE( 244)				libvlc->flags[2]=-1;
HXDLIN( 244)				this->statusOnPaused();
            			}
HXLINE( 245)			if (hx::IsEq( libvlc->flags[3],(int)1 )) {
HXLINE( 245)				libvlc->flags[3]=-1;
HXDLIN( 245)				this->statusOnStopped();
            			}
HXLINE( 246)			if (hx::IsEq( libvlc->flags[4],(int)1 )) {
HXLINE( 246)				libvlc->flags[4]=-1;
HXDLIN( 246)				this->statusOnEndReached();
            			}
HXLINE( 247)			if (hx::IsNotEq( libvlc->flags[5],(int)-1 )) {
HXLINE( 247)				this->statusOnTimeChanged(libvlc->flags[5]);
            			}
HXLINE( 248)			if (hx::IsNotEq( libvlc->flags[6],(int)-1 )) {
HXLINE( 248)				this->statusOnPositionChanged(libvlc->flags[9]);
            			}
HXLINE( 249)			if (hx::IsEq( libvlc->flags[9],(int)1 )) {
HXLINE( 249)				libvlc->flags[9]=-1;
HXDLIN( 249)				this->statusOnError();
            			}
HXLINE( 250)			if (hx::IsEq( libvlc->flags[10],(int)1 )) {
HXLINE( 250)				libvlc->flags[10]=-1;
HXDLIN( 250)				this->statusOnSeekableChanged((int)0);
            			}
HXLINE( 251)			if (hx::IsEq( libvlc->flags[11],(int)1 )) {
HXLINE( 251)				libvlc->flags[11]=-1;
HXDLIN( 251)				this->statusOnOpening();
            			}
HXLINE( 252)			if (hx::IsEq( libvlc->flags[12],(int)1 )) {
HXLINE( 252)				libvlc->flags[12]=-1;
HXDLIN( 252)				this->statusOnBuffering();
            			}
HXLINE( 253)			if (hx::IsEq( libvlc->flags[13],(int)1 )) {
HXLINE( 253)				libvlc->flags[13]=-1;
HXDLIN( 253)				this->statusOnForward();
            			}
HXLINE( 254)			if (hx::IsEq( libvlc->flags[14],(int)1 )) {
HXLINE( 254)				libvlc->flags[14]=-1;
HXDLIN( 254)				this->statusOnBackward();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,checkFlags,(void))

void VlcBitmap_obj::videoInitComplete(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_264_videoInitComplete)
HXLINE( 266)		this->videoWidth = this->libvlc->getWidth();
HXLINE( 267)		this->videoHeight = this->libvlc->getHeight();
HXLINE( 268)		this->duration = this->libvlc->getDuration();
HXLINE( 269)		this->length = this->libvlc->getLength();
HXLINE( 271)		if (hx::IsNotNull( this->bitmapData )) {
HXLINE( 272)			this->bitmapData->dispose();
            		}
HXLINE( 274)		if (hx::IsNotNull( this->texture )) {
HXLINE( 275)			this->texture->dispose();
            		}
HXLINE( 276)		if (hx::IsNotNull( this->texture2 )) {
HXLINE( 277)			this->texture2->dispose();
            		}
HXLINE( 279)		 ::openfl::display::Stage3D _hx_tmp = ::openfl::Lib_obj::current->stage->stage3Ds->get((int)0).StaticCast<  ::openfl::display::Stage3D >();
HXDLIN( 279)		this->texture = _hx_tmp->context3D->createRectangleTexture(this->videoWidth,this->videoHeight,(int)1,true);
HXLINE( 282)		this->set_bitmapData(::openfl::display::BitmapData_obj::fromTexture(this->texture));
HXLINE( 285)		this->smoothing = true;
HXLINE( 287)		if (hx::IsNotNull( this->_width )) {
HXLINE( 288)			this->set_width(this->_width);
            		}
            		else {
HXLINE( 290)			this->set_width(this->videoWidth);
            		}
HXLINE( 292)		if (hx::IsNotNull( this->_height )) {
HXLINE( 293)			this->set_height(this->_height);
            		}
            		else {
HXLINE( 295)			this->set_height(this->videoHeight);
            		}
HXLINE( 297)		this->bufferMem = ::Array_obj< unsigned char >::__new(0);
HXLINE( 298)		this->frameSize = ((this->videoWidth * this->videoHeight) * (int)4);
HXLINE( 300)		this->setVolume(this->volume);
HXLINE( 302)		this->initComplete = true;
HXLINE( 304)		if (hx::IsNotNull( this->onVideoReady )) {
HXLINE( 305)			this->onVideoReady();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,videoInitComplete,(void))

void VlcBitmap_obj::vLoop( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_312_vLoop)
HXLINE( 314)		this->checkFlags();
HXLINE( 315)		this->render();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VlcBitmap_obj,vLoop,(void))

void VlcBitmap_obj::render(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_322_render)
HXLINE( 323)		int cTime = ::openfl::Lib_obj::getTimer();
HXLINE( 324)		if (((cTime - this->oldTime) > (int)28)) {
HXLINE( 326)			this->oldTime = cTime;
HXLINE( 329)			bool _hx_tmp;
HXDLIN( 329)			if (this->isPlaying) {
HXLINE( 329)				_hx_tmp = hx::IsNotNull( this->texture );
            			}
            			else {
HXLINE( 329)				_hx_tmp = false;
            			}
HXDLIN( 329)			if (_hx_tmp) {
HXLINE( 331)				try {
            					HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE( 333)					::cpp::Pointer< unsigned char > tmp = this->libvlc->getPixelData();
HXDLIN( 333)					this->bufferMem->setUnmanagedData(tmp,this->frameSize);
HXLINE( 334)					if (hx::IsNotNull( this->bufferMem )) {
HXLINE( 336)						 ::openfl::display3D::textures::RectangleTexture _hx_tmp1 = this->texture;
HXDLIN( 336)						_hx_tmp1->uploadFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(::haxe::io::Bytes_obj::ofData(this->bufferMem)),(int)0);
HXLINE( 337)						{
HXLINE( 337)							 ::vlc::VlcBitmap _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 337)							Float _g1 = _g->get_width();
HXDLIN( 337)							_g->set_width((_g1 + (int)1));
            						}
HXLINE( 338)						{
HXLINE( 338)							 ::vlc::VlcBitmap _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 338)							Float _g11 = _g2->get_width();
HXDLIN( 338)							_g2->set_width((_g11 - (int)1));
            						}
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::openfl::errors::Error e = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,render,(void))

void VlcBitmap_obj::setVolume(Float vol){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_355_setVolume)
HXDLIN( 355)		bool _hx_tmp;
HXDLIN( 355)		if (hx::IsNotNull( this->libvlc )) {
HXDLIN( 355)			_hx_tmp = this->initComplete;
            		}
            		else {
HXDLIN( 355)			_hx_tmp = false;
            		}
HXDLIN( 355)		if (_hx_tmp) {
HXLINE( 356)			 LibVLC* _hx_tmp1 = this->libvlc;
HXDLIN( 356)			_hx_tmp1->setVolume((vol * (int)255));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VlcBitmap_obj,setVolume,(void))

void VlcBitmap_obj::statusOnOpening(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_364_statusOnOpening)
HXDLIN( 364)		if (hx::IsNotNull( this->onOpening )) {
HXLINE( 365)			this->onOpening();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,statusOnOpening,(void))

void VlcBitmap_obj::statusOnBuffering(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_370_statusOnBuffering)
HXDLIN( 370)		if (hx::IsNotNull( this->onBuffer )) {
HXLINE( 371)			this->onBuffer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,statusOnBuffering,(void))

void VlcBitmap_obj::statusOnPlaying(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_376_statusOnPlaying)
HXDLIN( 376)		if (!(this->initComplete)) {
HXLINE( 378)			this->isPlaying = true;
HXLINE( 379)			this->initComplete = true;
HXLINE( 380)			this->videoInitComplete();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,statusOnPlaying,(void))

void VlcBitmap_obj::statusOnPaused(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_385_statusOnPaused)
HXLINE( 386)		if (this->isPlaying) {
HXLINE( 387)			this->isPlaying = false;
            		}
HXLINE( 389)		if (hx::IsNotNull( this->onPause )) {
HXLINE( 390)			this->onPause();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,statusOnPaused,(void))

void VlcBitmap_obj::statusOnStopped(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_394_statusOnStopped)
HXLINE( 395)		if (this->isPlaying) {
HXLINE( 396)			this->isPlaying = false;
            		}
HXLINE( 398)		if (hx::IsNotNull( this->onStop )) {
HXLINE( 399)			this->onStop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,statusOnStopped,(void))

void VlcBitmap_obj::statusOnEndReached(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_403_statusOnEndReached)
HXLINE( 404)		if (this->isPlaying) {
HXLINE( 405)			this->isPlaying = false;
            		}
HXLINE( 408)		if (hx::IsNotNull( this->onComplete )) {
HXLINE( 409)			this->onComplete();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,statusOnEndReached,(void))

void VlcBitmap_obj::statusOnTimeChanged(int newTime){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_413_statusOnTimeChanged)
HXLINE( 414)		this->time = newTime;
HXLINE( 415)		if (hx::IsNotNull( this->onProgress )) {
HXLINE( 416)			this->onProgress();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VlcBitmap_obj,statusOnTimeChanged,(void))

void VlcBitmap_obj::statusOnPositionChanged(int newPos){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_420_statusOnPositionChanged)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VlcBitmap_obj,statusOnPositionChanged,(void))

void VlcBitmap_obj::statusOnSeekableChanged(int newPos){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_426_statusOnSeekableChanged)
HXDLIN( 426)		if (hx::IsNotNull( this->onSeek )) {
HXLINE( 427)			this->onSeek();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VlcBitmap_obj,statusOnSeekableChanged,(void))

void VlcBitmap_obj::statusOnForward(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_431_statusOnForward)
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,statusOnForward,(void))

void VlcBitmap_obj::statusOnBackward(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_436_statusOnBackward)
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,statusOnBackward,(void))

void VlcBitmap_obj::onDisplay(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_441_onDisplay)
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,onDisplay,(void))

void VlcBitmap_obj::statusOnError(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_446_statusOnError)
HXLINE( 447)		::haxe::Log_obj::trace(HX_("VLC ERROR - File not found?",f0,48,ee,fd),hx::SourceInfo(HX_("VlcBitmap.hx",22,e0,87,39),447,HX_("vlc.VlcBitmap",db,f8,af,7f),HX_("statusOnError",17,d5,f1,06)));
HXLINE( 448)		if (hx::IsNotNull( this->onError )) {
HXLINE( 449)			this->onError();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,statusOnError,(void))

Float VlcBitmap_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_456_get_width)
HXDLIN( 456)		return this->_width;
            	}


Float VlcBitmap_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_460_set_width)
HXLINE( 461)		this->_width = value;
HXLINE( 462)		return this->super::set_width(value);
            	}


Float VlcBitmap_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_467_get_height)
HXDLIN( 467)		return this->_height;
            	}


Float VlcBitmap_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_471_set_height)
HXLINE( 472)		this->_height = value;
HXLINE( 473)		return this->super::set_height(value);
            	}


Float VlcBitmap_obj::get_volume(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_478_get_volume)
HXDLIN( 478)		return this->volume;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,get_volume,return )

Float VlcBitmap_obj::set_volume(Float value){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_482_set_volume)
HXLINE( 483)		this->setVolume(value);
HXLINE( 484)		return (this->volume = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VlcBitmap_obj,set_volume,return )

void VlcBitmap_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_dc214fe6c82a61ac_492_dispose)
HXLINE( 493)		this->stage->removeEventListener(HX_("enterFrame",f5,03,50,02),this->vLoop_dyn(),null());
HXLINE( 495)		if (hx::IsNotNull( this->texture )) {
HXLINE( 497)			this->texture->dispose();
HXLINE( 498)			this->texture = null();
            		}
HXLINE( 500)		this->onVideoReady = null();
HXLINE( 501)		this->onComplete = null();
HXLINE( 502)		this->onPause = null();
HXLINE( 503)		this->onPlay = null();
HXLINE( 504)		this->onResume = null();
HXLINE( 505)		this->onSeek = null();
HXLINE( 506)		this->onStop = null();
HXLINE( 507)		this->onBuffer = null();
HXLINE( 508)		this->onProgress = null();
HXLINE( 509)		this->onError = null();
HXLINE( 510)		this->bufferMem = null();
HXLINE( 511)		this->isDisposed = true;
HXLINE( 513)		{
HXLINE( 513)			 LibVLC* _this = this->libvlc;
HXDLIN( 513)			delete this;
            		}
HXLINE( 514)		this->libvlc = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VlcBitmap_obj,dispose,(void))


hx::ObjectPtr< VlcBitmap_obj > VlcBitmap_obj::__new() {
	hx::ObjectPtr< VlcBitmap_obj > __this = new VlcBitmap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< VlcBitmap_obj > VlcBitmap_obj::__alloc(hx::Ctx *_hx_ctx) {
	VlcBitmap_obj *__this = (VlcBitmap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VlcBitmap_obj), true, "vlc.VlcBitmap"));
	*(void **)__this = VlcBitmap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VlcBitmap_obj::VlcBitmap_obj()
{
}

void VlcBitmap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VlcBitmap);
	HX_MARK_MEMBER_NAME(videoWidth,"videoWidth");
	HX_MARK_MEMBER_NAME(videoHeight,"videoHeight");
	HX_MARK_MEMBER_NAME(repeat,"repeat");
	HX_MARK_MEMBER_NAME(duration,"duration");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(inWindow,"inWindow");
	HX_MARK_MEMBER_NAME(initComplete,"initComplete");
	HX_MARK_MEMBER_NAME(fullscreen,"fullscreen");
	HX_MARK_MEMBER_NAME(volume,"volume");
	HX_MARK_MEMBER_NAME(isDisposed,"isDisposed");
	HX_MARK_MEMBER_NAME(isPlaying,"isPlaying");
	HX_MARK_MEMBER_NAME(disposeOnStop,"disposeOnStop");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(onVideoReady,"onVideoReady");
	HX_MARK_MEMBER_NAME(onPlay,"onPlay");
	HX_MARK_MEMBER_NAME(onStop,"onStop");
	HX_MARK_MEMBER_NAME(onPause,"onPause");
	HX_MARK_MEMBER_NAME(onResume,"onResume");
	HX_MARK_MEMBER_NAME(onSeek,"onSeek");
	HX_MARK_MEMBER_NAME(onBuffer,"onBuffer");
	HX_MARK_MEMBER_NAME(onProgress,"onProgress");
	HX_MARK_MEMBER_NAME(onOpening,"onOpening");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(onError,"onError");
	HX_MARK_MEMBER_NAME(bufferMem,"bufferMem");
	HX_MARK_MEMBER_NAME(libvlc,"libvlc");
	HX_MARK_MEMBER_NAME(frameSize,"frameSize");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(texture2,"texture2");
	HX_MARK_MEMBER_NAME(bmdBuf,"bmdBuf");
	HX_MARK_MEMBER_NAME(bmdBuf2,"bmdBuf2");
	HX_MARK_MEMBER_NAME(oldTime,"oldTime");
	HX_MARK_MEMBER_NAME(flipBuffer,"flipBuffer");
	 ::openfl::display::Bitmap_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VlcBitmap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(videoWidth,"videoWidth");
	HX_VISIT_MEMBER_NAME(videoHeight,"videoHeight");
	HX_VISIT_MEMBER_NAME(repeat,"repeat");
	HX_VISIT_MEMBER_NAME(duration,"duration");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(inWindow,"inWindow");
	HX_VISIT_MEMBER_NAME(initComplete,"initComplete");
	HX_VISIT_MEMBER_NAME(fullscreen,"fullscreen");
	HX_VISIT_MEMBER_NAME(volume,"volume");
	HX_VISIT_MEMBER_NAME(isDisposed,"isDisposed");
	HX_VISIT_MEMBER_NAME(isPlaying,"isPlaying");
	HX_VISIT_MEMBER_NAME(disposeOnStop,"disposeOnStop");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(onVideoReady,"onVideoReady");
	HX_VISIT_MEMBER_NAME(onPlay,"onPlay");
	HX_VISIT_MEMBER_NAME(onStop,"onStop");
	HX_VISIT_MEMBER_NAME(onPause,"onPause");
	HX_VISIT_MEMBER_NAME(onResume,"onResume");
	HX_VISIT_MEMBER_NAME(onSeek,"onSeek");
	HX_VISIT_MEMBER_NAME(onBuffer,"onBuffer");
	HX_VISIT_MEMBER_NAME(onProgress,"onProgress");
	HX_VISIT_MEMBER_NAME(onOpening,"onOpening");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(onError,"onError");
	HX_VISIT_MEMBER_NAME(bufferMem,"bufferMem");
	HX_VISIT_MEMBER_NAME(libvlc,"libvlc");
	HX_VISIT_MEMBER_NAME(frameSize,"frameSize");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(texture2,"texture2");
	HX_VISIT_MEMBER_NAME(bmdBuf,"bmdBuf");
	HX_VISIT_MEMBER_NAME(bmdBuf2,"bmdBuf2");
	HX_VISIT_MEMBER_NAME(oldTime,"oldTime");
	HX_VISIT_MEMBER_NAME(flipBuffer,"flipBuffer");
	 ::openfl::display::Bitmap_obj::__Visit(HX_VISIT_ARG);
}

hx::Val VlcBitmap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		if (HX_FIELD_EQ(inName,"seek") ) { return hx::Val( seek_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		if (HX_FIELD_EQ(inName,"vLoop") ) { return hx::Val( vLoop_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"repeat") ) { return hx::Val( repeat ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"volume") ) { return hx::Val( volume ); }
		if (HX_FIELD_EQ(inName,"onPlay") ) { return hx::Val( onPlay ); }
		if (HX_FIELD_EQ(inName,"onStop") ) { return hx::Val( onStop ); }
		if (HX_FIELD_EQ(inName,"onSeek") ) { return hx::Val( onSeek ); }
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width ); }
		if (HX_FIELD_EQ(inName,"bmdBuf") ) { return hx::Val( bmdBuf ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFPS") ) { return hx::Val( getFPS_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onPause") ) { return hx::Val( onPause ); }
		if (HX_FIELD_EQ(inName,"onError") ) { return hx::Val( onError ); }
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height ); }
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture ); }
		if (HX_FIELD_EQ(inName,"bmdBuf2") ) { return hx::Val( bmdBuf2 ); }
		if (HX_FIELD_EQ(inName,"oldTime") ) { return hx::Val( oldTime ); }
		if (HX_FIELD_EQ(inName,"mThread") ) { return hx::Val( mThread_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTime") ) { return hx::Val( getTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { return hx::Val( duration ); }
		if (HX_FIELD_EQ(inName,"inWindow") ) { return hx::Val( inWindow ); }
		if (HX_FIELD_EQ(inName,"onResume") ) { return hx::Val( onResume ); }
		if (HX_FIELD_EQ(inName,"onBuffer") ) { return hx::Val( onBuffer ); }
		if (HX_FIELD_EQ(inName,"texture2") ) { return hx::Val( texture2 ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPlaying") ) { return hx::Val( isPlaying ); }
		if (HX_FIELD_EQ(inName,"onOpening") ) { return hx::Val( onOpening ); }
		if (HX_FIELD_EQ(inName,"bufferMem") ) { return hx::Val( bufferMem ); }
		if (HX_FIELD_EQ(inName,"frameSize") ) { return hx::Val( frameSize ); }
		if (HX_FIELD_EQ(inName,"setVolume") ) { return hx::Val( setVolume_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDisplay") ) { return hx::Val( onDisplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"videoWidth") ) { return hx::Val( videoWidth ); }
		if (HX_FIELD_EQ(inName,"fullscreen") ) { return hx::Val( fullscreen ); }
		if (HX_FIELD_EQ(inName,"isDisposed") ) { return hx::Val( isDisposed ); }
		if (HX_FIELD_EQ(inName,"onProgress") ) { return hx::Val( onProgress ); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete ); }
		if (HX_FIELD_EQ(inName,"flipBuffer") ) { return hx::Val( flipBuffer ); }
		if (HX_FIELD_EQ(inName,"checkFlags") ) { return hx::Val( checkFlags_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_volume") ) { return hx::Val( get_volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_volume") ) { return hx::Val( set_volume_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"videoHeight") ) { return hx::Val( videoHeight ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"initComplete") ) { return hx::Val( initComplete ); }
		if (HX_FIELD_EQ(inName,"onVideoReady") ) { return hx::Val( onVideoReady ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"disposeOnStop") ) { return hx::Val( disposeOnStop ); }
		if (HX_FIELD_EQ(inName,"statusOnError") ) { return hx::Val( statusOnError_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return hx::Val( onAddedToStage_dyn() ); }
		if (HX_FIELD_EQ(inName,"statusOnPaused") ) { return hx::Val( statusOnPaused_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"statusOnOpening") ) { return hx::Val( statusOnOpening_dyn() ); }
		if (HX_FIELD_EQ(inName,"statusOnPlaying") ) { return hx::Val( statusOnPlaying_dyn() ); }
		if (HX_FIELD_EQ(inName,"statusOnStopped") ) { return hx::Val( statusOnStopped_dyn() ); }
		if (HX_FIELD_EQ(inName,"statusOnForward") ) { return hx::Val( statusOnForward_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"statusOnBackward") ) { return hx::Val( statusOnBackward_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"videoInitComplete") ) { return hx::Val( videoInitComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"statusOnBuffering") ) { return hx::Val( statusOnBuffering_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"statusOnEndReached") ) { return hx::Val( statusOnEndReached_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"statusOnTimeChanged") ) { return hx::Val( statusOnTimeChanged_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"statusOnPositionChanged") ) { return hx::Val( statusOnPositionChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"statusOnSeekableChanged") ) { return hx::Val( statusOnSeekableChanged_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VlcBitmap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"repeat") ) { repeat=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_volume(inValue.Cast< Float >()) );volume=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPlay") ) { onPlay=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onStop") ) { onStop=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onSeek") ) { onSeek=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bmdBuf") ) { bmdBuf=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onPause") ) { onPause=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onError") ) { onError=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bmdBuf2") ) { bmdBuf2=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oldTime") ) { oldTime=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inWindow") ) { inWindow=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onResume") ) { onResume=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onBuffer") ) { onBuffer=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texture2") ) { texture2=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPlaying") ) { isPlaying=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onOpening") ) { onOpening=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bufferMem") ) { bufferMem=inValue.Cast< ::Array< unsigned char > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameSize") ) { frameSize=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"videoWidth") ) { videoWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fullscreen") ) { fullscreen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDisposed") ) { isDisposed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onProgress") ) { onProgress=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipBuffer") ) { flipBuffer=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"videoHeight") ) { videoHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"initComplete") ) { initComplete=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onVideoReady") ) { onVideoReady=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"disposeOnStop") ) { disposeOnStop=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VlcBitmap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("videoWidth","\x8b","\xf3","\x30","\xa6"));
	outFields->push(HX_HCSTRING("videoHeight","\xc2","\x9e","\xf3","\x7a"));
	outFields->push(HX_HCSTRING("repeat","\x5b","\x97","\x7c","\x06"));
	outFields->push(HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("inWindow","\xb5","\xdd","\x0a","\xdb"));
	outFields->push(HX_HCSTRING("initComplete","\xe9","\x87","\x7e","\x24"));
	outFields->push(HX_HCSTRING("fullscreen","\x3b","\x3a","\xb4","\xf9"));
	outFields->push(HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"));
	outFields->push(HX_HCSTRING("isDisposed","\xef","\x1c","\x53","\xa2"));
	outFields->push(HX_HCSTRING("isPlaying","\xa4","\x8c","\x16","\x8e"));
	outFields->push(HX_HCSTRING("disposeOnStop","\xc0","\xae","\xfb","\xee"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("bufferMem","\xf5","\x28","\x7a","\xb1"));
	outFields->push(HX_HCSTRING("libvlc","\x48","\xb2","\xbe","\xe4"));
	outFields->push(HX_HCSTRING("frameSize","\x8e","\x5f","\xd4","\x39"));
	outFields->push(HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"));
	outFields->push(HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("texture2","\xf7","\xf6","\xce","\x65"));
	outFields->push(HX_HCSTRING("bmdBuf","\x7a","\x68","\xf2","\x33"));
	outFields->push(HX_HCSTRING("bmdBuf2","\x78","\x02","\x29","\x40"));
	outFields->push(HX_HCSTRING("oldTime","\x54","\x70","\x41","\x02"));
	outFields->push(HX_HCSTRING("flipBuffer","\x8d","\x03","\xc2","\x47"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VlcBitmap_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(VlcBitmap_obj,videoWidth),HX_HCSTRING("videoWidth","\x8b","\xf3","\x30","\xa6")},
	{hx::fsInt,(int)offsetof(VlcBitmap_obj,videoHeight),HX_HCSTRING("videoHeight","\xc2","\x9e","\xf3","\x7a")},
	{hx::fsInt,(int)offsetof(VlcBitmap_obj,repeat),HX_HCSTRING("repeat","\x5b","\x97","\x7c","\x06")},
	{hx::fsFloat,(int)offsetof(VlcBitmap_obj,duration),HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14")},
	{hx::fsFloat,(int)offsetof(VlcBitmap_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsBool,(int)offsetof(VlcBitmap_obj,inWindow),HX_HCSTRING("inWindow","\xb5","\xdd","\x0a","\xdb")},
	{hx::fsBool,(int)offsetof(VlcBitmap_obj,initComplete),HX_HCSTRING("initComplete","\xe9","\x87","\x7e","\x24")},
	{hx::fsBool,(int)offsetof(VlcBitmap_obj,fullscreen),HX_HCSTRING("fullscreen","\x3b","\x3a","\xb4","\xf9")},
	{hx::fsFloat,(int)offsetof(VlcBitmap_obj,volume),HX_HCSTRING("volume","\xda","\x29","\x53","\x5f")},
	{hx::fsBool,(int)offsetof(VlcBitmap_obj,isDisposed),HX_HCSTRING("isDisposed","\xef","\x1c","\x53","\xa2")},
	{hx::fsBool,(int)offsetof(VlcBitmap_obj,isPlaying),HX_HCSTRING("isPlaying","\xa4","\x8c","\x16","\x8e")},
	{hx::fsBool,(int)offsetof(VlcBitmap_obj,disposeOnStop),HX_HCSTRING("disposeOnStop","\xc0","\xae","\xfb","\xee")},
	{hx::fsInt,(int)offsetof(VlcBitmap_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onVideoReady),HX_HCSTRING("onVideoReady","\xe7","\x7f","\xcc","\x9a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onPlay),HX_HCSTRING("onPlay","\xb3","\x36","\xe4","\xec")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onStop),HX_HCSTRING("onStop","\xc1","\xf8","\xe5","\xee")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onPause),HX_HCSTRING("onPause","\x57","\x75","\x95","\x53")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onResume),HX_HCSTRING("onResume","\x2c","\x60","\x31","\xe8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onSeek),HX_HCSTRING("onSeek","\x37","\x8e","\xda","\xee")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onBuffer),HX_HCSTRING("onBuffer","\x7f","\xb3","\x41","\xb0")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onProgress),HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onOpening),HX_HCSTRING("onOpening","\xf9","\xbb","\xef","\x17")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,onError),HX_HCSTRING("onError","\x29","\x6a","\x67","\x09")},
	{hx::fsObject /*Array< unsigned char >*/ ,(int)offsetof(VlcBitmap_obj,bufferMem),HX_HCSTRING("bufferMem","\xf5","\x28","\x7a","\xb1")},
	{hx::fsObject /*LibVLC**/ ,(int)offsetof(VlcBitmap_obj,libvlc),HX_HCSTRING("libvlc","\x48","\xb2","\xbe","\xe4")},
	{hx::fsInt,(int)offsetof(VlcBitmap_obj,frameSize),HX_HCSTRING("frameSize","\x8e","\x5f","\xd4","\x39")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,_width),HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(VlcBitmap_obj,_height),HX_HCSTRING("_height","\x86","\x19","\xc3","\x70")},
	{hx::fsObject /*::openfl::display3D::textures::RectangleTexture*/ ,(int)offsetof(VlcBitmap_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsObject /*::openfl::display3D::textures::RectangleTexture*/ ,(int)offsetof(VlcBitmap_obj,texture2),HX_HCSTRING("texture2","\xf7","\xf6","\xce","\x65")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(VlcBitmap_obj,bmdBuf),HX_HCSTRING("bmdBuf","\x7a","\x68","\xf2","\x33")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(VlcBitmap_obj,bmdBuf2),HX_HCSTRING("bmdBuf2","\x78","\x02","\x29","\x40")},
	{hx::fsInt,(int)offsetof(VlcBitmap_obj,oldTime),HX_HCSTRING("oldTime","\x54","\x70","\x41","\x02")},
	{hx::fsBool,(int)offsetof(VlcBitmap_obj,flipBuffer),HX_HCSTRING("flipBuffer","\x8d","\x03","\xc2","\x47")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VlcBitmap_obj_sStaticStorageInfo = 0;
#endif

static ::String VlcBitmap_obj_sMemberFields[] = {
	HX_HCSTRING("videoWidth","\x8b","\xf3","\x30","\xa6"),
	HX_HCSTRING("videoHeight","\xc2","\x9e","\xf3","\x7a"),
	HX_HCSTRING("repeat","\x5b","\x97","\x7c","\x06"),
	HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("inWindow","\xb5","\xdd","\x0a","\xdb"),
	HX_HCSTRING("initComplete","\xe9","\x87","\x7e","\x24"),
	HX_HCSTRING("fullscreen","\x3b","\x3a","\xb4","\xf9"),
	HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"),
	HX_HCSTRING("isDisposed","\xef","\x1c","\x53","\xa2"),
	HX_HCSTRING("isPlaying","\xa4","\x8c","\x16","\x8e"),
	HX_HCSTRING("disposeOnStop","\xc0","\xae","\xfb","\xee"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("onVideoReady","\xe7","\x7f","\xcc","\x9a"),
	HX_HCSTRING("onPlay","\xb3","\x36","\xe4","\xec"),
	HX_HCSTRING("onStop","\xc1","\xf8","\xe5","\xee"),
	HX_HCSTRING("onPause","\x57","\x75","\x95","\x53"),
	HX_HCSTRING("onResume","\x2c","\x60","\x31","\xe8"),
	HX_HCSTRING("onSeek","\x37","\x8e","\xda","\xee"),
	HX_HCSTRING("onBuffer","\x7f","\xb3","\x41","\xb0"),
	HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"),
	HX_HCSTRING("onOpening","\xf9","\xbb","\xef","\x17"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("onError","\x29","\x6a","\x67","\x09"),
	HX_HCSTRING("bufferMem","\xf5","\x28","\x7a","\xb1"),
	HX_HCSTRING("frameSize","\x8e","\x5f","\xd4","\x39"),
	HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"),
	HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("texture2","\xf7","\xf6","\xce","\x65"),
	HX_HCSTRING("bmdBuf","\x7a","\x68","\xf2","\x33"),
	HX_HCSTRING("bmdBuf2","\x78","\x02","\x29","\x40"),
	HX_HCSTRING("oldTime","\x54","\x70","\x41","\x02"),
	HX_HCSTRING("flipBuffer","\x8d","\x03","\xc2","\x47"),
	HX_HCSTRING("mThread","\x17","\x7f","\xf1","\x77"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("onAddedToStage","\x22","\x82","\x44","\x36"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("seek","\x78","\x85","\x50","\x4c"),
	HX_HCSTRING("getFPS","\xf3","\xe4","\x1c","\xa3"),
	HX_HCSTRING("getTime","\xc3","\x7b","\x7f","\x1f"),
	HX_HCSTRING("checkFlags","\x5f","\x2d","\x7c","\x12"),
	HX_HCSTRING("videoInitComplete","\x04","\x35","\xd7","\x3a"),
	HX_HCSTRING("vLoop","\xfa","\x45","\xd9","\x23"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("setVolume","\x1c","\x9f","\xfa","\xbe"),
	HX_HCSTRING("statusOnOpening","\x67","\x3e","\x1d","\x5d"),
	HX_HCSTRING("statusOnBuffering","\xb1","\xcc","\x37","\xe1"),
	HX_HCSTRING("statusOnPlaying","\x7d","\x4a","\xf0","\xa6"),
	HX_HCSTRING("statusOnPaused","\x7f","\x5c","\xc4","\xaa"),
	HX_HCSTRING("statusOnStopped","\x1c","\x0d","\x3a","\x60"),
	HX_HCSTRING("statusOnEndReached","\x48","\xf8","\x02","\x2c"),
	HX_HCSTRING("statusOnTimeChanged","\xf6","\xc6","\x36","\xef"),
	HX_HCSTRING("statusOnPositionChanged","\x5a","\xf1","\x34","\x80"),
	HX_HCSTRING("statusOnSeekableChanged","\x11","\x12","\x35","\x09"),
	HX_HCSTRING("statusOnForward","\xd4","\x1c","\xa3","\x02"),
	HX_HCSTRING("statusOnBackward","\xf4","\x4d","\x74","\x47"),
	HX_HCSTRING("onDisplay","\xe3","\xe2","\xf4","\x92"),
	HX_HCSTRING("statusOnError","\x17","\xd5","\xf1","\x06"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_volume","\xa3","\x99","\xda","\x4f"),
	HX_HCSTRING("set_volume","\x17","\x38","\x58","\x53"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	::String(null()) };

static void VlcBitmap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VlcBitmap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VlcBitmap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VlcBitmap_obj::__mClass,"__mClass");
};

#endif

hx::Class VlcBitmap_obj::__mClass;

void VlcBitmap_obj::__register()
{
	hx::Object *dummy = new VlcBitmap_obj;
	VlcBitmap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("vlc.VlcBitmap","\xdb","\xf8","\xaf","\x7f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VlcBitmap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VlcBitmap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VlcBitmap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VlcBitmap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VlcBitmap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VlcBitmap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vlc
