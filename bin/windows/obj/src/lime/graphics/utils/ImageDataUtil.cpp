// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_graphics_utils__ImageDataUtil_ImageDataView
#include <lime/graphics/utils/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_color__RGBA_RGBA_Impl_
#include <lime/math/color/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_35_colorTransform,"lime.graphics.utils.ImageDataUtil","colorTransform",0x2c17e9b7,"lime.graphics.utils.ImageDataUtil.colorTransform","lime/graphics/utils/ImageDataUtil.hx",35,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_81_copyChannel,"lime.graphics.utils.ImageDataUtil","copyChannel",0xa41162a0,"lime.graphics.utils.ImageDataUtil.copyChannel","lime/graphics/utils/ImageDataUtil.hx",81,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_166_copyPixels,"lime.graphics.utils.ImageDataUtil","copyPixels",0x95aa37f0,"lime.graphics.utils.ImageDataUtil.copyPixels","lime/graphics/utils/ImageDataUtil.hx",166,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_371_fillRect,"lime.graphics.utils.ImageDataUtil","fillRect",0x163460f5,"lime.graphics.utils.ImageDataUtil.fillRect","lime/graphics/utils/ImageDataUtil.hx",371,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_424_floodFill,"lime.graphics.utils.ImageDataUtil","floodFill",0xfbc79ff3,"lime.graphics.utils.ImageDataUtil.floodFill","lime/graphics/utils/ImageDataUtil.hx",424,0x494d921f)
static const int _hx_array_data_f0237280_22[] = {
	(int)0,(int)-1,(int)1,(int)0,
};
static const int _hx_array_data_f0237280_23[] = {
	(int)-1,(int)0,(int)0,(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_513_gaussianBlur,"lime.graphics.utils.ImageDataUtil","gaussianBlur",0x7bbf74f0,"lime.graphics.utils.ImageDataUtil.gaussianBlur","lime/graphics/utils/ImageDataUtil.hx",513,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_518_gaussianBlur,"lime.graphics.utils.ImageDataUtil","gaussianBlur",0x7bbf74f0,"lime.graphics.utils.ImageDataUtil.gaussianBlur","lime/graphics/utils/ImageDataUtil.hx",518,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_533_gaussianBlur,"lime.graphics.utils.ImageDataUtil","gaussianBlur",0x7bbf74f0,"lime.graphics.utils.ImageDataUtil.gaussianBlur","lime/graphics/utils/ImageDataUtil.hx",533,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_566_gaussianBlur,"lime.graphics.utils.ImageDataUtil","gaussianBlur",0x7bbf74f0,"lime.graphics.utils.ImageDataUtil.gaussianBlur","lime/graphics/utils/ImageDataUtil.hx",566,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_598_gaussianBlur,"lime.graphics.utils.ImageDataUtil","gaussianBlur",0x7bbf74f0,"lime.graphics.utils.ImageDataUtil.gaussianBlur","lime/graphics/utils/ImageDataUtil.hx",598,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_509_gaussianBlur,"lime.graphics.utils.ImageDataUtil","gaussianBlur",0x7bbf74f0,"lime.graphics.utils.ImageDataUtil.gaussianBlur","lime/graphics/utils/ImageDataUtil.hx",509,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_678_getColorBoundsRect,"lime.graphics.utils.ImageDataUtil","getColorBoundsRect",0xfea06eb4,"lime.graphics.utils.ImageDataUtil.getColorBoundsRect","lime/graphics/utils/ImageDataUtil.hx",678,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_845_getPixel,"lime.graphics.utils.ImageDataUtil","getPixel",0xcbf5f1be,"lime.graphics.utils.ImageDataUtil.getPixel","lime/graphics/utils/ImageDataUtil.hx",845,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_863_getPixel32,"lime.graphics.utils.ImageDataUtil","getPixel32",0x2aa489dd,"lime.graphics.utils.ImageDataUtil.getPixel32","lime/graphics/utils/ImageDataUtil.hx",863,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_880_getPixels,"lime.graphics.utils.ImageDataUtil","getPixels",0xab3d94f5,"lime.graphics.utils.ImageDataUtil.getPixels","lime/graphics/utils/ImageDataUtil.hx",880,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_934_merge,"lime.graphics.utils.ImageDataUtil","merge",0xf0318e4a,"lime.graphics.utils.ImageDataUtil.merge","lime/graphics/utils/ImageDataUtil.hx",934,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_987_multiplyAlpha,"lime.graphics.utils.ImageDataUtil","multiplyAlpha",0xb898c02c,"lime.graphics.utils.ImageDataUtil.multiplyAlpha","lime/graphics/utils/ImageDataUtil.hx",987,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1017_resize,"lime.graphics.utils.ImageDataUtil","resize",0x3b9e8e22,"lime.graphics.utils.ImageDataUtil.resize","lime/graphics/utils/ImageDataUtil.hx",1017,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1100_resizeBuffer,"lime.graphics.utils.ImageDataUtil","resizeBuffer",0x390004c2,"lime.graphics.utils.ImageDataUtil.resizeBuffer","lime/graphics/utils/ImageDataUtil.hx",1100,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1130_setFormat,"lime.graphics.utils.ImageDataUtil","setFormat",0xff73210b,"lime.graphics.utils.ImageDataUtil.setFormat","lime/graphics/utils/ImageDataUtil.hx",1130,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1220_setPixel,"lime.graphics.utils.ImageDataUtil","setPixel",0x7a534b32,"lime.graphics.utils.ImageDataUtil.setPixel","lime/graphics/utils/ImageDataUtil.hx",1220,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1246_setPixel32,"lime.graphics.utils.ImageDataUtil","setPixel32",0x2e222851,"lime.graphics.utils.ImageDataUtil.setPixel32","lime/graphics/utils/ImageDataUtil.hx",1246,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1267_setPixels,"lime.graphics.utils.ImageDataUtil","setPixels",0x8e8e8101,"lime.graphics.utils.ImageDataUtil.setPixels","lime/graphics/utils/ImageDataUtil.hx",1267,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1327_threshold,"lime.graphics.utils.ImageDataUtil","threshold",0xd6e0e03d,"lime.graphics.utils.ImageDataUtil.threshold","lime/graphics/utils/ImageDataUtil.hx",1327,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1446_unmultiplyAlpha,"lime.graphics.utils.ImageDataUtil","unmultiplyAlpha",0xa6ce9eb3,"lime.graphics.utils.ImageDataUtil.unmultiplyAlpha","lime/graphics/utils/ImageDataUtil.hx",1446,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1476___pixelCompare,"lime.graphics.utils.ImageDataUtil","__pixelCompare",0x0cbb8c0d,"lime.graphics.utils.ImageDataUtil.__pixelCompare","lime/graphics/utils/ImageDataUtil.hx",1476,0x494d921f)
namespace lime{
namespace graphics{
namespace utils{

void ImageDataUtil_obj::__construct() { }

Dynamic ImageDataUtil_obj::__CreateEmpty() { return new ImageDataUtil_obj; }

void *ImageDataUtil_obj::_hx_vtable = 0;

Dynamic ImageDataUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDataUtil_obj > _hx_result = new ImageDataUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageDataUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20ce0976;
}

void ImageDataUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_35_colorTransform)
HXLINE(  37)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(  38)		if (hx::IsNull( data )) {
HXLINE(  38)			return;
            		}
HXLINE(  41)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(  41)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_color_transform(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(colorMatrix));
            		}
            		else {
HXLINE(  45)			int format = image->buffer->format;
HXLINE(  46)			bool premultiplied = image->buffer->premultiplied;
HXLINE(  48)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView dataView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(  50)			 ::lime::utils::ArrayBufferView alphaTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getAlphaTable(colorMatrix);
HXLINE(  51)			 ::lime::utils::ArrayBufferView redTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getRedTable(colorMatrix);
HXLINE(  52)			 ::lime::utils::ArrayBufferView greenTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getGreenTable(colorMatrix);
HXLINE(  53)			 ::lime::utils::ArrayBufferView blueTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getBlueTable(colorMatrix);
HXLINE(  55)			int row;
HXDLIN(  55)			int offset;
HXDLIN(  55)			int pixel;
HXLINE(  57)			{
HXLINE(  57)				int _g1 = (int)0;
HXDLIN(  57)				int _g = dataView->height;
HXDLIN(  57)				while((_g1 < _g)){
HXLINE(  57)					_g1 = (_g1 + (int)1);
HXDLIN(  57)					int y = (_g1 - (int)1);
HXLINE(  59)					int dataView1 = dataView->byteOffset;
HXDLIN(  59)					row = (dataView1 + (dataView->stride * y));
HXLINE(  61)					{
HXLINE(  61)						int _g3 = (int)0;
HXDLIN(  61)						int _g2 = dataView->width;
HXDLIN(  61)						while((_g3 < _g2)){
HXLINE(  61)							_g3 = (_g3 + (int)1);
HXDLIN(  61)							int x = (_g3 - (int)1);
HXLINE(  63)							offset = (row + (x * (int)4));
HXLINE(  65)							{
HXLINE(  65)								switch((int)(format)){
            									case (int)0: {
HXLINE(  65)										int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(  65)										int data1 = data->byteOffset;
HXDLIN(  65)										int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN(  65)										int data2 = data->byteOffset;
HXDLIN(  65)										int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN(  65)										int data3 = data->byteOffset;
HXDLIN(  65)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  65)										int data4 = data->byteOffset;
HXDLIN(  65)										int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN(  65)										int data5 = data->byteOffset;
HXDLIN(  65)										int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN(  65)										int data6 = data->byteOffset;
HXDLIN(  65)										int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN(  65)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  65)										int data7 = data->byteOffset;
HXDLIN(  65)										int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN(  65)										int data8 = data->byteOffset;
HXDLIN(  65)										int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN(  65)										int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(  65)										int data9 = data->byteOffset;
HXDLIN(  65)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  65)								if (premultiplied) {
HXLINE(  65)									bool _hx_tmp;
HXDLIN(  65)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE(  65)										_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  65)										_hx_tmp = false;
            									}
HXDLIN(  65)									if (_hx_tmp) {
HXLINE(  65)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN(  65)										{
HXLINE(  65)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  65)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  65)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  65)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  65)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  65)											pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  66)							{
HXLINE(  66)								int r4 = ((int)::__hxcpp_memory_get_byte(redTable->buffer->b,(redTable->byteOffset + ((int)hx::UShr(pixel,(int)24) & (int)(int)255))) & (int)(int)255);
HXDLIN(  66)								int g4 = ((int)::__hxcpp_memory_get_byte(greenTable->buffer->b,(greenTable->byteOffset + ((int)hx::UShr(pixel,(int)16) & (int)(int)255))) & (int)(int)255);
HXDLIN(  66)								int b3 = ((int)::__hxcpp_memory_get_byte(blueTable->buffer->b,(blueTable->byteOffset + ((int)hx::UShr(pixel,(int)8) & (int)(int)255))) & (int)(int)255);
HXDLIN(  66)								pixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaTable->buffer->b,(alphaTable->byteOffset + ((int)pixel & (int)(int)255))) & (int)(int)255) & (int)(int)255));
            							}
HXLINE(  67)							{
HXLINE(  67)								if (premultiplied) {
HXLINE(  67)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(  67)										if ((pixel != (int)0)) {
HXLINE(  67)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE(  67)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(  67)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(  67)											int this5 = this4->byteOffset;
HXDLIN(  67)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this5 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(  67)											pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN(  67)								switch((int)(format)){
            									case (int)0: {
HXLINE(  67)										{
HXLINE(  67)											int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(  67)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(  67)										{
HXLINE(  67)											int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(  67)											{
HXLINE(  67)												int data10 = data->byteOffset;
HXDLIN(  67)												::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN(  67)										{
HXLINE(  67)											int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(  67)											{
HXLINE(  67)												int data11 = data->byteOffset;
HXDLIN(  67)												::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN(  67)										{
HXLINE(  67)											int val3 = ((int)pixel & (int)(int)255);
HXDLIN(  67)											{
HXLINE(  67)												int data12 = data->byteOffset;
HXDLIN(  67)												::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(  67)										{
HXLINE(  67)											int val4 = ((int)pixel & (int)(int)255);
HXDLIN(  67)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN(  67)										{
HXLINE(  67)											int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(  67)											{
HXLINE(  67)												int data13 = data->byteOffset;
HXDLIN(  67)												::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN(  67)										{
HXLINE(  67)											int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(  67)											{
HXLINE(  67)												int data14 = data->byteOffset;
HXDLIN(  67)												::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN(  67)										{
HXLINE(  67)											int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(  67)											{
HXLINE(  67)												int data15 = data->byteOffset;
HXDLIN(  67)												::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(  67)										{
HXLINE(  67)											int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(  67)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN(  67)										{
HXLINE(  67)											int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(  67)											{
HXLINE(  67)												int data16 = data->byteOffset;
HXDLIN(  67)												::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN(  67)										{
HXLINE(  67)											int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(  67)											{
HXLINE(  67)												int data17 = data->byteOffset;
HXDLIN(  67)												::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN(  67)										{
HXLINE(  67)											int val11 = ((int)pixel & (int)(int)255);
HXDLIN(  67)											{
HXLINE(  67)												int data18 = data->byteOffset;
HXDLIN(  67)												::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  75)		image->dirty = true;
HXLINE(  76)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,colorTransform,(void))

void ImageDataUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_81_copyChannel)
HXLINE(  83)		int destIdx;
HXDLIN(  83)		switch((int)(_hx_getEnumValueIndex(destChannel))){
            			case (int)0: {
HXLINE(  83)				destIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE(  83)				destIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  83)				destIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE(  83)				destIdx = (int)3;
            			}
            			break;
            		}
HXLINE(  92)		int srcIdx;
HXDLIN(  92)		switch((int)(_hx_getEnumValueIndex(sourceChannel))){
            			case (int)0: {
HXLINE(  92)				srcIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE(  92)				srcIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  92)				srcIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE(  92)				srcIdx = (int)3;
            			}
            			break;
            		}
HXLINE( 101)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE( 102)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 104)		bool _hx_tmp;
HXDLIN( 104)		if (hx::IsNotNull( srcData )) {
HXLINE( 104)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE( 104)			_hx_tmp = true;
            		}
HXDLIN( 104)		if (_hx_tmp) {
HXLINE( 104)			return;
            		}
HXLINE( 107)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 107)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_copy_channel(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),srcIdx,destIdx);
            		}
            		else {
HXLINE( 111)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView srcView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 112)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView destView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE( 114)			int srcFormat = sourceImage->buffer->format;
HXLINE( 115)			int destFormat = image->buffer->format;
HXLINE( 116)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 117)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 119)			int srcPosition;
HXDLIN( 119)			int destPosition;
HXDLIN( 119)			int srcPixel;
HXDLIN( 119)			int destPixel;
HXDLIN( 119)			int value = (int)0;
HXLINE( 121)			{
HXLINE( 121)				int _g1 = (int)0;
HXDLIN( 121)				int _g = destView->height;
HXDLIN( 121)				while((_g1 < _g)){
HXLINE( 121)					_g1 = (_g1 + (int)1);
HXDLIN( 121)					int y = (_g1 - (int)1);
HXLINE( 123)					int srcView1 = srcView->byteOffset;
HXDLIN( 123)					srcPosition = (srcView1 + (srcView->stride * y));
HXLINE( 124)					int destView1 = destView->byteOffset;
HXDLIN( 124)					destPosition = (destView1 + (destView->stride * y));
HXLINE( 126)					{
HXLINE( 126)						int _g3 = (int)0;
HXDLIN( 126)						int _g2 = destView->width;
HXDLIN( 126)						while((_g3 < _g2)){
HXLINE( 126)							_g3 = (_g3 + (int)1);
HXDLIN( 126)							int x = (_g3 - (int)1);
HXLINE( 128)							{
HXLINE( 128)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE( 128)										int r = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN( 128)										int srcData1 = srcData->byteOffset;
HXDLIN( 128)										int g = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData1 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 128)										int srcData2 = srcData->byteOffset;
HXDLIN( 128)										int b = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData2 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 128)										int srcData3 = srcData->byteOffset;
HXDLIN( 128)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData3 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 128)										int srcData4 = srcData->byteOffset;
HXDLIN( 128)										int r1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData4 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 128)										int srcData5 = srcData->byteOffset;
HXDLIN( 128)										int g1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData5 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 128)										int srcData6 = srcData->byteOffset;
HXDLIN( 128)										int b1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData6 + (srcPosition + (int)3))) & (int)(int)255);
HXDLIN( 128)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 128)										int srcData7 = srcData->byteOffset;
HXDLIN( 128)										int r2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData7 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 128)										int srcData8 = srcData->byteOffset;
HXDLIN( 128)										int g2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData8 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 128)										int b2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN( 128)										int srcData9 = srcData->byteOffset;
HXDLIN( 128)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData9 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 128)								if (srcPremultiplied) {
HXLINE( 128)									bool _hx_tmp1;
HXDLIN( 128)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE( 128)										_hx_tmp1 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 128)										_hx_tmp1 = false;
            									}
HXDLIN( 128)									if (_hx_tmp1) {
HXLINE( 128)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN( 128)										{
HXLINE( 128)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 128)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 128)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 128)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 128)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 128)											srcPixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 129)							{
HXLINE( 129)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 129)										int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 129)										int destData1 = destData->byteOffset;
HXDLIN( 129)										int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 129)										int destData2 = destData->byteOffset;
HXDLIN( 129)										int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 129)										int destData3 = destData->byteOffset;
HXDLIN( 129)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 129)										int destData4 = destData->byteOffset;
HXDLIN( 129)										int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 129)										int destData5 = destData->byteOffset;
HXDLIN( 129)										int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 129)										int destData6 = destData->byteOffset;
HXDLIN( 129)										int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 129)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 129)										int destData7 = destData->byteOffset;
HXDLIN( 129)										int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 129)										int destData8 = destData->byteOffset;
HXDLIN( 129)										int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 129)										int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 129)										int destData9 = destData->byteOffset;
HXDLIN( 129)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 129)								if (destPremultiplied) {
HXLINE( 129)									bool _hx_tmp2;
HXDLIN( 129)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 129)										_hx_tmp2 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 129)										_hx_tmp2 = false;
            									}
HXDLIN( 129)									if (_hx_tmp2) {
HXLINE( 129)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 129)										{
HXLINE( 129)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 129)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 129)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 129)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 129)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 129)											destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 131)							switch((int)(srcIdx)){
            								case (int)0: {
HXLINE( 133)									value = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
            								}
            								break;
            								case (int)1: {
HXLINE( 134)									value = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
            								}
            								break;
            								case (int)2: {
HXLINE( 135)									value = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
            								}
            								break;
            								case (int)3: {
HXLINE( 136)									value = ((int)srcPixel & (int)(int)255);
            								}
            								break;
            							}
HXLINE( 140)							switch((int)(destIdx)){
            								case (int)0: {
HXLINE( 142)									destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 143)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 144)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)3: {
HXLINE( 145)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value & (int)(int)255));
            								}
            								break;
            							}
HXLINE( 149)							{
HXLINE( 149)								if (destPremultiplied) {
HXLINE( 149)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 149)										if ((destPixel != (int)0)) {
HXLINE( 149)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 149)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 149)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 149)											int this8 = this7->byteOffset;
HXDLIN( 149)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 149)											destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 149)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 149)										{
HXLINE( 149)											int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 149)										{
HXLINE( 149)											int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 149)											{
HXLINE( 149)												int destData10 = destData->byteOffset;
HXDLIN( 149)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            											}
            										}
HXDLIN( 149)										{
HXLINE( 149)											int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 149)											{
HXLINE( 149)												int destData11 = destData->byteOffset;
HXDLIN( 149)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            											}
            										}
HXDLIN( 149)										{
HXLINE( 149)											int val3 = ((int)destPixel & (int)(int)255);
HXDLIN( 149)											{
HXLINE( 149)												int destData12 = destData->byteOffset;
HXDLIN( 149)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 149)										{
HXLINE( 149)											int val4 = ((int)destPixel & (int)(int)255);
HXDLIN( 149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 149)										{
HXLINE( 149)											int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 149)											{
HXLINE( 149)												int destData13 = destData->byteOffset;
HXDLIN( 149)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            											}
            										}
HXDLIN( 149)										{
HXLINE( 149)											int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 149)											{
HXLINE( 149)												int destData14 = destData->byteOffset;
HXDLIN( 149)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            											}
            										}
HXDLIN( 149)										{
HXLINE( 149)											int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 149)											{
HXLINE( 149)												int destData15 = destData->byteOffset;
HXDLIN( 149)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 149)										{
HXLINE( 149)											int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 149)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 149)										{
HXLINE( 149)											int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 149)											{
HXLINE( 149)												int destData16 = destData->byteOffset;
HXDLIN( 149)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            											}
            										}
HXDLIN( 149)										{
HXLINE( 149)											int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 149)											{
HXLINE( 149)												int destData17 = destData->byteOffset;
HXDLIN( 149)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            											}
            										}
HXDLIN( 149)										{
HXLINE( 149)											int val11 = ((int)destPixel & (int)(int)255);
HXDLIN( 149)											{
HXLINE( 149)												int destData18 = destData->byteOffset;
HXDLIN( 149)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 151)							srcPosition = (srcPosition + (int)4);
HXLINE( 152)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 160)		image->dirty = true;
HXLINE( 161)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,copyChannel,(void))

void ImageDataUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_166_copyPixels)
HXLINE( 168)		bool _hx_tmp;
HXDLIN( 168)		bool _hx_tmp1;
HXDLIN( 168)		bool _hx_tmp2;
HXDLIN( 168)		bool _hx_tmp3;
HXDLIN( 168)		bool _hx_tmp4;
HXDLIN( 168)		bool _hx_tmp5;
HXDLIN( 168)		bool _hx_tmp6;
HXDLIN( 168)		bool _hx_tmp7;
HXDLIN( 168)		bool _hx_tmp8;
HXDLIN( 168)		bool _hx_tmp9;
HXDLIN( 168)		bool _hx_tmp10;
HXDLIN( 168)		if ((image->width == sourceImage->width)) {
HXLINE( 168)			_hx_tmp10 = (image->height == sourceImage->height);
            		}
            		else {
HXLINE( 168)			_hx_tmp10 = false;
            		}
HXDLIN( 168)		if (_hx_tmp10) {
HXLINE( 168)			_hx_tmp9 = (sourceRect->width == sourceImage->width);
            		}
            		else {
HXLINE( 168)			_hx_tmp9 = false;
            		}
HXDLIN( 168)		if (_hx_tmp9) {
HXLINE( 168)			_hx_tmp8 = (sourceRect->height == sourceImage->height);
            		}
            		else {
HXLINE( 168)			_hx_tmp8 = false;
            		}
HXDLIN( 168)		if (_hx_tmp8) {
HXLINE( 168)			_hx_tmp7 = (sourceRect->x == (int)0);
            		}
            		else {
HXLINE( 168)			_hx_tmp7 = false;
            		}
HXDLIN( 168)		if (_hx_tmp7) {
HXLINE( 168)			_hx_tmp6 = (sourceRect->y == (int)0);
            		}
            		else {
HXLINE( 168)			_hx_tmp6 = false;
            		}
HXDLIN( 168)		if (_hx_tmp6) {
HXLINE( 168)			_hx_tmp5 = (destPoint->x == (int)0);
            		}
            		else {
HXLINE( 168)			_hx_tmp5 = false;
            		}
HXDLIN( 168)		if (_hx_tmp5) {
HXLINE( 168)			_hx_tmp4 = (destPoint->y == (int)0);
            		}
            		else {
HXLINE( 168)			_hx_tmp4 = false;
            		}
HXDLIN( 168)		if (_hx_tmp4) {
HXLINE( 168)			_hx_tmp3 = hx::IsNull( alphaImage );
            		}
            		else {
HXLINE( 168)			_hx_tmp3 = false;
            		}
HXDLIN( 168)		if (_hx_tmp3) {
HXLINE( 168)			_hx_tmp2 = hx::IsNull( alphaPoint );
            		}
            		else {
HXLINE( 168)			_hx_tmp2 = false;
            		}
HXDLIN( 168)		if (_hx_tmp2) {
HXLINE( 168)			_hx_tmp1 = (mergeAlpha == false);
            		}
            		else {
HXLINE( 168)			_hx_tmp1 = false;
            		}
HXDLIN( 168)		if (_hx_tmp1) {
HXLINE( 168)			int _hx_tmp11 = image->get_format();
HXDLIN( 168)			_hx_tmp = (_hx_tmp11 == sourceImage->get_format());
            		}
            		else {
HXLINE( 168)			_hx_tmp = false;
            		}
HXDLIN( 168)		if (_hx_tmp) {
HXLINE( 170)			 ::lime::utils::ArrayBufferView _this = image->buffer->data;
HXDLIN( 170)			 ::lime::utils::ArrayBufferView view = sourceImage->buffer->data;
HXDLIN( 170)			int offset = (int)0;
HXDLIN( 170)			if (hx::IsNotNull( view )) {
HXLINE( 170)				 ::haxe::io::Bytes _this1 = _this->buffer;
HXDLIN( 170)				_this1->blit((offset * _this->bytesPerElement),view->buffer,view->byteOffset,view->byteLength);
            			}
            			else {
HXLINE( 170)				HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            			}
            		}
            		else {
HXLINE( 175)			if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 175)				::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_copy_pixels(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),hx::DynamicPtr(alphaImage),hx::DynamicPtr(alphaPoint),mergeAlpha);
            			}
            			else {
HXLINE( 179)				 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 180)				 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 182)				bool _hx_tmp12;
HXDLIN( 182)				if (hx::IsNotNull( sourceData )) {
HXLINE( 182)					_hx_tmp12 = hx::IsNull( destData );
            				}
            				else {
HXLINE( 182)					_hx_tmp12 = true;
            				}
HXDLIN( 182)				if (_hx_tmp12) {
HXLINE( 182)					return;
            				}
HXLINE( 184)				 ::lime::graphics::utils::_ImageDataUtil::ImageDataView sourceView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 185)				 ::lime::math::Rectangle destRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height);
HXLINE( 186)				 ::lime::graphics::utils::_ImageDataUtil::ImageDataView destView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,destRect);
HXLINE( 188)				int sourceFormat = sourceImage->buffer->format;
HXLINE( 189)				int destFormat = image->buffer->format;
HXLINE( 191)				int sourcePosition;
HXDLIN( 191)				int destPosition;
HXLINE( 192)				Float sourceAlpha;
HXDLIN( 192)				Float destAlpha;
HXDLIN( 192)				Float oneMinusSourceAlpha;
HXDLIN( 192)				Float blendAlpha;
HXLINE( 193)				int sourcePixel;
HXDLIN( 193)				int destPixel;
HXLINE( 195)				bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 196)				bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 197)				int sourceBytesPerPixel = ::Std_obj::_hx_int(((Float)sourceImage->buffer->bitsPerPixel / (Float)(int)8));
HXLINE( 198)				int destBytesPerPixel = ::Std_obj::_hx_int(((Float)image->buffer->bitsPerPixel / (Float)(int)8));
HXLINE( 200)				bool useAlphaImage;
HXDLIN( 200)				if (hx::IsNotNull( alphaImage )) {
HXLINE( 200)					useAlphaImage = alphaImage->get_transparent();
            				}
            				else {
HXLINE( 200)					useAlphaImage = false;
            				}
HXLINE( 201)				bool blend;
HXDLIN( 201)				if (!(mergeAlpha)) {
HXLINE( 201)					if (useAlphaImage) {
HXLINE( 201)						blend = !(image->get_transparent());
            					}
            					else {
HXLINE( 201)						blend = false;
            					}
            				}
            				else {
HXLINE( 201)					blend = true;
            				}
HXLINE( 203)				if (!(useAlphaImage)) {
HXLINE( 205)					if (blend) {
HXLINE( 207)						int _g1 = (int)0;
HXDLIN( 207)						int _g = destView->height;
HXDLIN( 207)						while((_g1 < _g)){
HXLINE( 207)							_g1 = (_g1 + (int)1);
HXDLIN( 207)							int y = (_g1 - (int)1);
HXLINE( 209)							int sourceView1 = sourceView->byteOffset;
HXDLIN( 209)							sourcePosition = (sourceView1 + (sourceView->stride * y));
HXLINE( 210)							int destView1 = destView->byteOffset;
HXDLIN( 210)							destPosition = (destView1 + (destView->stride * y));
HXLINE( 212)							{
HXLINE( 212)								int _g3 = (int)0;
HXDLIN( 212)								int _g2 = destView->width;
HXDLIN( 212)								while((_g3 < _g2)){
HXLINE( 212)									_g3 = (_g3 + (int)1);
HXDLIN( 212)									int x = (_g3 - (int)1);
HXLINE( 214)									{
HXLINE( 214)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 214)												int r = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 214)												int sourceData1 = sourceData->byteOffset;
HXDLIN( 214)												int g = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData1 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 214)												int sourceData2 = sourceData->byteOffset;
HXDLIN( 214)												int b = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData2 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 214)												int sourceData3 = sourceData->byteOffset;
HXDLIN( 214)												sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData3 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 214)												int sourceData4 = sourceData->byteOffset;
HXDLIN( 214)												int r1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData4 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 214)												int sourceData5 = sourceData->byteOffset;
HXDLIN( 214)												int g1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData5 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 214)												int sourceData6 = sourceData->byteOffset;
HXDLIN( 214)												int b1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData6 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 214)												sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 214)												int sourceData7 = sourceData->byteOffset;
HXDLIN( 214)												int r2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData7 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 214)												int sourceData8 = sourceData->byteOffset;
HXDLIN( 214)												int g2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData8 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 214)												int b2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 214)												int sourceData9 = sourceData->byteOffset;
HXDLIN( 214)												sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData9 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 214)										if (sourcePremultiplied) {
HXLINE( 214)											bool _hx_tmp13;
HXDLIN( 214)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 214)												_hx_tmp13 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 214)												_hx_tmp13 = false;
            											}
HXDLIN( 214)											if (_hx_tmp13) {
HXLINE( 214)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 214)												{
HXLINE( 214)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 214)													int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 214)													 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 214)													int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 214)													 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 214)													sourcePixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 215)									{
HXLINE( 215)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 215)												int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 215)												int destData1 = destData->byteOffset;
HXDLIN( 215)												int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 215)												int destData2 = destData->byteOffset;
HXDLIN( 215)												int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 215)												int destData3 = destData->byteOffset;
HXDLIN( 215)												destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 215)												int destData4 = destData->byteOffset;
HXDLIN( 215)												int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 215)												int destData5 = destData->byteOffset;
HXDLIN( 215)												int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 215)												int destData6 = destData->byteOffset;
HXDLIN( 215)												int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 215)												destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 215)												int destData7 = destData->byteOffset;
HXDLIN( 215)												int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 215)												int destData8 = destData->byteOffset;
HXDLIN( 215)												int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 215)												int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 215)												int destData9 = destData->byteOffset;
HXDLIN( 215)												destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 215)										if (destPremultiplied) {
HXLINE( 215)											bool _hx_tmp14;
HXDLIN( 215)											if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 215)												_hx_tmp14 = (((int)destPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 215)												_hx_tmp14 = false;
            											}
HXDLIN( 215)											if (_hx_tmp14) {
HXLINE( 215)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 215)												{
HXLINE( 215)													 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 215)													int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 215)													 ::lime::utils::ArrayBufferView this5 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 215)													int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 215)													 ::lime::utils::ArrayBufferView this6 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 215)													destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 217)									sourceAlpha = ((Float)((int)sourcePixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 218)									destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 219)									oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 220)									blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 222)									if ((blendAlpha == (int)0)) {
HXLINE( 224)										destPixel = (int)0;
            									}
            									else {
HXLINE( 228)										{
HXLINE( 228)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 228)											int value = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 228)											destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 229)										{
HXLINE( 229)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 229)											int value1 = ((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 229)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 230)										{
HXLINE( 230)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 230)											int value2 = ((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 230)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 231)										{
HXLINE( 231)											 ::lime::utils::ArrayBufferView this10 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 231)											int value3 = ((int)::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & (int)(int)255);
HXDLIN( 231)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value3 & (int)(int)255));
            										}
            									}
HXLINE( 235)									{
HXLINE( 235)										if (destPremultiplied) {
HXLINE( 235)											if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 235)												if ((destPixel != (int)0)) {
HXLINE( 235)													destPixel = (int)0;
            												}
            											}
            											else {
HXLINE( 235)												if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 235)													 ::lime::utils::ArrayBufferView this11 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 235)													int this12 = this11->byteOffset;
HXDLIN( 235)													::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this11->buffer->b,(this12 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 235)													destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
HXDLIN( 235)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 235)												{
HXLINE( 235)													int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 235)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 235)												{
HXLINE( 235)													int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 235)													{
HXLINE( 235)														int destData10 = destData->byteOffset;
HXDLIN( 235)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            													}
            												}
HXDLIN( 235)												{
HXLINE( 235)													int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 235)													{
HXLINE( 235)														int destData11 = destData->byteOffset;
HXDLIN( 235)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            													}
            												}
HXDLIN( 235)												{
HXLINE( 235)													int val3 = ((int)destPixel & (int)(int)255);
HXDLIN( 235)													{
HXLINE( 235)														int destData12 = destData->byteOffset;
HXDLIN( 235)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            													}
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 235)												{
HXLINE( 235)													int val4 = ((int)destPixel & (int)(int)255);
HXDLIN( 235)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            												}
HXDLIN( 235)												{
HXLINE( 235)													int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 235)													{
HXLINE( 235)														int destData13 = destData->byteOffset;
HXDLIN( 235)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            													}
            												}
HXDLIN( 235)												{
HXLINE( 235)													int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 235)													{
HXLINE( 235)														int destData14 = destData->byteOffset;
HXDLIN( 235)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            													}
            												}
HXDLIN( 235)												{
HXLINE( 235)													int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 235)													{
HXLINE( 235)														int destData15 = destData->byteOffset;
HXDLIN( 235)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            													}
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 235)												{
HXLINE( 235)													int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 235)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            												}
HXDLIN( 235)												{
HXLINE( 235)													int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 235)													{
HXLINE( 235)														int destData16 = destData->byteOffset;
HXDLIN( 235)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            													}
            												}
HXDLIN( 235)												{
HXLINE( 235)													int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 235)													{
HXLINE( 235)														int destData17 = destData->byteOffset;
HXDLIN( 235)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            													}
            												}
HXDLIN( 235)												{
HXLINE( 235)													int val11 = ((int)destPixel & (int)(int)255);
HXDLIN( 235)													{
HXLINE( 235)														int destData18 = destData->byteOffset;
HXDLIN( 235)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            													}
            												}
            											}
            											break;
            										}
            									}
HXLINE( 237)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 238)									destPosition = (destPosition + (int)4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 244)						bool _hx_tmp15;
HXDLIN( 244)						bool _hx_tmp16;
HXDLIN( 244)						if ((sourceFormat == destFormat)) {
HXLINE( 244)							_hx_tmp16 = (sourcePremultiplied == destPremultiplied);
            						}
            						else {
HXLINE( 244)							_hx_tmp16 = false;
            						}
HXDLIN( 244)						if (_hx_tmp16) {
HXLINE( 244)							_hx_tmp15 = (sourceBytesPerPixel == destBytesPerPixel);
            						}
            						else {
HXLINE( 244)							_hx_tmp15 = false;
            						}
HXDLIN( 244)						if (_hx_tmp15) {
HXLINE( 246)							int _g11 = (int)0;
HXDLIN( 246)							int _g4 = destView->height;
HXDLIN( 246)							while((_g11 < _g4)){
HXLINE( 246)								_g11 = (_g11 + (int)1);
HXDLIN( 246)								int y1 = (_g11 - (int)1);
HXLINE( 248)								int sourceView2 = sourceView->byteOffset;
HXDLIN( 248)								sourcePosition = (sourceView2 + (sourceView->stride * y1));
HXLINE( 249)								int destView2 = destView->byteOffset;
HXDLIN( 249)								destPosition = (destView2 + (destView->stride * y1));
HXLINE( 255)								 ::haxe::io::Bytes destData19 = destData->buffer;
HXDLIN( 255)								 ::haxe::io::Bytes sourceData10 = sourceData->buffer;
HXDLIN( 255)								destData19->blit(destPosition,sourceData10,sourcePosition,(destView->width * destBytesPerPixel));
            							}
            						}
            						else {
HXLINE( 262)							int _g12 = (int)0;
HXDLIN( 262)							int _g5 = destView->height;
HXDLIN( 262)							while((_g12 < _g5)){
HXLINE( 262)								_g12 = (_g12 + (int)1);
HXDLIN( 262)								int y2 = (_g12 - (int)1);
HXLINE( 264)								int sourceView3 = sourceView->byteOffset;
HXDLIN( 264)								sourcePosition = (sourceView3 + (sourceView->stride * y2));
HXLINE( 265)								int destView3 = destView->byteOffset;
HXDLIN( 265)								destPosition = (destView3 + (destView->stride * y2));
HXLINE( 267)								{
HXLINE( 267)									int _g31 = (int)0;
HXDLIN( 267)									int _g21 = destView->width;
HXDLIN( 267)									while((_g31 < _g21)){
HXLINE( 267)										_g31 = (_g31 + (int)1);
HXDLIN( 267)										int x1 = (_g31 - (int)1);
HXLINE( 269)										{
HXLINE( 269)											switch((int)(sourceFormat)){
            												case (int)0: {
HXLINE( 269)													int r8 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 269)													int sourceData11 = sourceData->byteOffset;
HXDLIN( 269)													int g8 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData11 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 269)													int sourceData12 = sourceData->byteOffset;
HXDLIN( 269)													int b6 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData12 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 269)													int sourceData13 = sourceData->byteOffset;
HXDLIN( 269)													sourcePixel = ((int)((int)((int)((int)((int)r8 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g8 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData13 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            												}
            												break;
            												case (int)1: {
HXLINE( 269)													int sourceData14 = sourceData->byteOffset;
HXDLIN( 269)													int r9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData14 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 269)													int sourceData15 = sourceData->byteOffset;
HXDLIN( 269)													int g9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData15 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 269)													int sourceData16 = sourceData->byteOffset;
HXDLIN( 269)													int b7 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData16 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 269)													sourcePixel = ((int)((int)((int)((int)((int)r9 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g9 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b7 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            												}
            												break;
            												case (int)2: {
HXLINE( 269)													int sourceData17 = sourceData->byteOffset;
HXDLIN( 269)													int r10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData17 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 269)													int sourceData18 = sourceData->byteOffset;
HXDLIN( 269)													int g10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData18 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 269)													int b8 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 269)													int sourceData19 = sourceData->byteOffset;
HXDLIN( 269)													sourcePixel = ((int)((int)((int)((int)((int)r10 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g10 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b8 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData19 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            												}
            												break;
            											}
HXDLIN( 269)											if (sourcePremultiplied) {
HXLINE( 269)												bool _hx_tmp17;
HXDLIN( 269)												if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 269)													_hx_tmp17 = (((int)sourcePixel & (int)(int)255) != (int)255);
            												}
            												else {
HXLINE( 269)													_hx_tmp17 = false;
            												}
HXDLIN( 269)												if (_hx_tmp17) {
HXLINE( 269)													::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 269)													{
HXLINE( 269)														 ::lime::utils::ArrayBufferView this13 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 269)														int r11 = ((int)::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 269)														 ::lime::utils::ArrayBufferView this14 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 269)														int g11 = ((int)::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 269)														 ::lime::utils::ArrayBufferView this15 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 269)														sourcePixel = ((int)((int)((int)((int)((int)r11 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g11 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this15->buffer->b,(this15->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            													}
            												}
            											}
            										}
HXLINE( 270)										{
HXLINE( 270)											if (destPremultiplied) {
HXLINE( 270)												if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 270)													if ((sourcePixel != (int)0)) {
HXLINE( 270)														sourcePixel = (int)0;
            													}
            												}
            												else {
HXLINE( 270)													if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 270)														 ::lime::utils::ArrayBufferView this16 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 270)														int this17 = this16->byteOffset;
HXDLIN( 270)														::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this16->buffer->b,(this17 + (((int)sourcePixel & (int)(int)255) * (int)4)));
HXDLIN( 270)														sourcePixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            													}
            												}
            											}
HXDLIN( 270)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 270)													{
HXLINE( 270)														int val12 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 270)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            													}
HXDLIN( 270)													{
HXLINE( 270)														int val13 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 270)														{
HXLINE( 270)															int destData20 = destData->byteOffset;
HXDLIN( 270)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData20 + (destPosition + (int)1)),val13);
            														}
            													}
HXDLIN( 270)													{
HXLINE( 270)														int val14 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 270)														{
HXLINE( 270)															int destData21 = destData->byteOffset;
HXDLIN( 270)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData21 + (destPosition + (int)2)),val14);
            														}
            													}
HXDLIN( 270)													{
HXLINE( 270)														int val15 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 270)														{
HXLINE( 270)															int destData22 = destData->byteOffset;
HXDLIN( 270)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData22 + (destPosition + (int)3)),val15);
            														}
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 270)													{
HXLINE( 270)														int val16 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 270)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            													}
HXDLIN( 270)													{
HXLINE( 270)														int val17 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 270)														{
HXLINE( 270)															int destData23 = destData->byteOffset;
HXDLIN( 270)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData23 + (destPosition + (int)1)),val17);
            														}
            													}
HXDLIN( 270)													{
HXLINE( 270)														int val18 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 270)														{
HXLINE( 270)															int destData24 = destData->byteOffset;
HXDLIN( 270)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData24 + (destPosition + (int)2)),val18);
            														}
            													}
HXDLIN( 270)													{
HXLINE( 270)														int val19 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 270)														{
HXLINE( 270)															int destData25 = destData->byteOffset;
HXDLIN( 270)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData25 + (destPosition + (int)3)),val19);
            														}
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 270)													{
HXLINE( 270)														int val20 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 270)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            													}
HXDLIN( 270)													{
HXLINE( 270)														int val21 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 270)														{
HXLINE( 270)															int destData26 = destData->byteOffset;
HXDLIN( 270)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData26 + (destPosition + (int)1)),val21);
            														}
            													}
HXDLIN( 270)													{
HXLINE( 270)														int val22 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 270)														{
HXLINE( 270)															int destData27 = destData->byteOffset;
HXDLIN( 270)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData27 + (destPosition + (int)2)),val22);
            														}
            													}
HXDLIN( 270)													{
HXLINE( 270)														int val23 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 270)														{
HXLINE( 270)															int destData28 = destData->byteOffset;
HXDLIN( 270)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData28 + (destPosition + (int)3)),val23);
            														}
            													}
            												}
            												break;
            											}
            										}
HXLINE( 272)										sourcePosition = (sourcePosition + (int)4);
HXLINE( 273)										destPosition = (destPosition + (int)4);
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 283)					if (hx::IsNull( alphaPoint )) {
HXLINE( 283)						alphaPoint =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            					}
HXLINE( 285)					 ::lime::utils::ArrayBufferView alphaData = alphaImage->buffer->data;
HXLINE( 286)					int alphaFormat = alphaImage->buffer->format;
HXLINE( 287)					int alphaPosition;
HXDLIN( 287)					int alphaPixel;
HXLINE( 289)					 ::lime::graphics::utils::_ImageDataUtil::ImageDataView alphaView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,alphaImage, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,alphaPoint->x,alphaPoint->y,alphaImage->width,alphaImage->height));
HXLINE( 290)					alphaView->offset(sourceView->x,sourceView->y);
HXLINE( 292)					int _hx_tmp18 = ::Std_obj::_hx_int(destPoint->x);
HXDLIN( 292)					int _hx_tmp19 = ::Std_obj::_hx_int(destPoint->y);
HXDLIN( 292)					destView->clip(_hx_tmp18,_hx_tmp19,alphaView->width,alphaView->height);
HXLINE( 294)					if (blend) {
HXLINE( 296)						int _g13 = (int)0;
HXDLIN( 296)						int _g6 = destView->height;
HXDLIN( 296)						while((_g13 < _g6)){
HXLINE( 296)							_g13 = (_g13 + (int)1);
HXDLIN( 296)							int y3 = (_g13 - (int)1);
HXLINE( 298)							int sourceView4 = sourceView->byteOffset;
HXDLIN( 298)							sourcePosition = (sourceView4 + (sourceView->stride * y3));
HXLINE( 299)							int destView4 = destView->byteOffset;
HXDLIN( 299)							destPosition = (destView4 + (destView->stride * y3));
HXLINE( 300)							int alphaView1 = alphaView->byteOffset;
HXDLIN( 300)							alphaPosition = (alphaView1 + (alphaView->stride * y3));
HXLINE( 302)							{
HXLINE( 302)								int _g32 = (int)0;
HXDLIN( 302)								int _g22 = destView->width;
HXDLIN( 302)								while((_g32 < _g22)){
HXLINE( 302)									_g32 = (_g32 + (int)1);
HXDLIN( 302)									int x2 = (_g32 - (int)1);
HXLINE( 304)									{
HXLINE( 304)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 304)												int r12 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 304)												int sourceData20 = sourceData->byteOffset;
HXDLIN( 304)												int g12 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData20 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 304)												int sourceData21 = sourceData->byteOffset;
HXDLIN( 304)												int b9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData21 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 304)												int sourceData22 = sourceData->byteOffset;
HXDLIN( 304)												sourcePixel = ((int)((int)((int)((int)((int)r12 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g12 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b9 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData22 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 304)												int sourceData23 = sourceData->byteOffset;
HXDLIN( 304)												int r13 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData23 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 304)												int sourceData24 = sourceData->byteOffset;
HXDLIN( 304)												int g13 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData24 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 304)												int sourceData25 = sourceData->byteOffset;
HXDLIN( 304)												int b10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData25 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 304)												sourcePixel = ((int)((int)((int)((int)((int)r13 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g13 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b10 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 304)												int sourceData26 = sourceData->byteOffset;
HXDLIN( 304)												int r14 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData26 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 304)												int sourceData27 = sourceData->byteOffset;
HXDLIN( 304)												int g14 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData27 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 304)												int b11 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 304)												int sourceData28 = sourceData->byteOffset;
HXDLIN( 304)												sourcePixel = ((int)((int)((int)((int)((int)r14 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g14 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b11 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData28 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 304)										if (sourcePremultiplied) {
HXLINE( 304)											bool _hx_tmp20;
HXDLIN( 304)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 304)												_hx_tmp20 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 304)												_hx_tmp20 = false;
            											}
HXDLIN( 304)											if (_hx_tmp20) {
HXLINE( 304)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 304)												{
HXLINE( 304)													 ::lime::utils::ArrayBufferView this18 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 304)													int r15 = ((int)::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 304)													 ::lime::utils::ArrayBufferView this19 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 304)													int g15 = ((int)::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 304)													 ::lime::utils::ArrayBufferView this20 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 304)													sourcePixel = ((int)((int)((int)((int)((int)r15 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g15 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 305)									{
HXLINE( 305)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 305)												int r16 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 305)												int destData29 = destData->byteOffset;
HXDLIN( 305)												int g16 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData29 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 305)												int destData30 = destData->byteOffset;
HXDLIN( 305)												int b12 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData30 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 305)												int destData31 = destData->byteOffset;
HXDLIN( 305)												destPixel = ((int)((int)((int)((int)((int)r16 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g16 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b12 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData31 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 305)												int destData32 = destData->byteOffset;
HXDLIN( 305)												int r17 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData32 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 305)												int destData33 = destData->byteOffset;
HXDLIN( 305)												int g17 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData33 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 305)												int destData34 = destData->byteOffset;
HXDLIN( 305)												int b13 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData34 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 305)												destPixel = ((int)((int)((int)((int)((int)r17 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g17 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b13 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 305)												int destData35 = destData->byteOffset;
HXDLIN( 305)												int r18 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData35 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 305)												int destData36 = destData->byteOffset;
HXDLIN( 305)												int g18 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData36 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 305)												int b14 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 305)												int destData37 = destData->byteOffset;
HXDLIN( 305)												destPixel = ((int)((int)((int)((int)((int)r18 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g18 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b14 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData37 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 305)										if (destPremultiplied) {
HXLINE( 305)											bool _hx_tmp21;
HXDLIN( 305)											if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 305)												_hx_tmp21 = (((int)destPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 305)												_hx_tmp21 = false;
            											}
HXDLIN( 305)											if (_hx_tmp21) {
HXLINE( 305)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 305)												{
HXLINE( 305)													 ::lime::utils::ArrayBufferView this21 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 305)													int r19 = ((int)::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 305)													 ::lime::utils::ArrayBufferView this22 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 305)													int g19 = ((int)::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 305)													 ::lime::utils::ArrayBufferView this23 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 305)													destPixel = ((int)((int)((int)((int)((int)r19 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g19 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 306)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 306)											int r20 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 306)											int alphaData1 = alphaData->byteOffset;
HXDLIN( 306)											int g20 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData1 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 306)											int alphaData2 = alphaData->byteOffset;
HXDLIN( 306)											int b15 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData2 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 306)											int alphaData3 = alphaData->byteOffset;
HXDLIN( 306)											alphaPixel = ((int)((int)((int)((int)((int)r20 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g20 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b15 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData3 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 306)											int alphaData4 = alphaData->byteOffset;
HXDLIN( 306)											int r21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData4 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 306)											int alphaData5 = alphaData->byteOffset;
HXDLIN( 306)											int g21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData5 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 306)											int alphaData6 = alphaData->byteOffset;
HXDLIN( 306)											int b16 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData6 + (alphaPosition + (int)3))) & (int)(int)255);
HXDLIN( 306)											alphaPixel = ((int)((int)((int)((int)((int)r21 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g21 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b16 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 306)											int alphaData7 = alphaData->byteOffset;
HXDLIN( 306)											int r22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData7 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 306)											int alphaData8 = alphaData->byteOffset;
HXDLIN( 306)											int g22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData8 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 306)											int b17 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 306)											int alphaData9 = alphaData->byteOffset;
HXDLIN( 306)											alphaPixel = ((int)((int)((int)((int)((int)r22 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g22 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b17 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData9 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXLINE( 308)									sourceAlpha = (((Float)((int)alphaPixel & (int)(int)255) / (Float)((Float)255.0)) * ((Float)((int)sourcePixel & (int)(int)255) / (Float)((Float)255.0)));
HXLINE( 310)									if ((sourceAlpha > (int)0)) {
HXLINE( 312)										destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 313)										oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 314)										blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 316)										{
HXLINE( 316)											 ::lime::utils::ArrayBufferView this24 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 316)											int value4 = ((int)::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 316)											destPixel = ((int)((int)((int)((int)((int)value4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 317)										{
HXLINE( 317)											 ::lime::utils::ArrayBufferView this25 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 317)											int value5 = ((int)::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 317)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 318)										{
HXLINE( 318)											 ::lime::utils::ArrayBufferView this26 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 318)											int value6 = ((int)::__hxcpp_memory_get_byte(this26->buffer->b,(this26->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 318)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 319)										{
HXLINE( 319)											 ::lime::utils::ArrayBufferView this27 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 319)											int value7 = ((int)::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & (int)(int)255);
HXDLIN( 319)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value7 & (int)(int)255));
            										}
HXLINE( 321)										{
HXLINE( 321)											if (destPremultiplied) {
HXLINE( 321)												if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 321)													if ((destPixel != (int)0)) {
HXLINE( 321)														destPixel = (int)0;
            													}
            												}
            												else {
HXLINE( 321)													if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 321)														 ::lime::utils::ArrayBufferView this28 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 321)														int this29 = this28->byteOffset;
HXDLIN( 321)														::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this28->buffer->b,(this29 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 321)														destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            													}
            												}
            											}
HXDLIN( 321)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 321)													{
HXLINE( 321)														int val24 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 321)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val24);
            													}
HXDLIN( 321)													{
HXLINE( 321)														int val25 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 321)														{
HXLINE( 321)															int destData38 = destData->byteOffset;
HXDLIN( 321)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData38 + (destPosition + (int)1)),val25);
            														}
            													}
HXDLIN( 321)													{
HXLINE( 321)														int val26 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 321)														{
HXLINE( 321)															int destData39 = destData->byteOffset;
HXDLIN( 321)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData39 + (destPosition + (int)2)),val26);
            														}
            													}
HXDLIN( 321)													{
HXLINE( 321)														int val27 = ((int)destPixel & (int)(int)255);
HXDLIN( 321)														{
HXLINE( 321)															int destData40 = destData->byteOffset;
HXDLIN( 321)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData40 + (destPosition + (int)3)),val27);
            														}
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 321)													{
HXLINE( 321)														int val28 = ((int)destPixel & (int)(int)255);
HXDLIN( 321)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val28);
            													}
HXDLIN( 321)													{
HXLINE( 321)														int val29 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 321)														{
HXLINE( 321)															int destData41 = destData->byteOffset;
HXDLIN( 321)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData41 + (destPosition + (int)1)),val29);
            														}
            													}
HXDLIN( 321)													{
HXLINE( 321)														int val30 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 321)														{
HXLINE( 321)															int destData42 = destData->byteOffset;
HXDLIN( 321)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData42 + (destPosition + (int)2)),val30);
            														}
            													}
HXDLIN( 321)													{
HXLINE( 321)														int val31 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 321)														{
HXLINE( 321)															int destData43 = destData->byteOffset;
HXDLIN( 321)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData43 + (destPosition + (int)3)),val31);
            														}
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 321)													{
HXLINE( 321)														int val32 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 321)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val32);
            													}
HXDLIN( 321)													{
HXLINE( 321)														int val33 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 321)														{
HXLINE( 321)															int destData44 = destData->byteOffset;
HXDLIN( 321)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData44 + (destPosition + (int)1)),val33);
            														}
            													}
HXDLIN( 321)													{
HXLINE( 321)														int val34 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 321)														{
HXLINE( 321)															int destData45 = destData->byteOffset;
HXDLIN( 321)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData45 + (destPosition + (int)2)),val34);
            														}
            													}
HXDLIN( 321)													{
HXLINE( 321)														int val35 = ((int)destPixel & (int)(int)255);
HXDLIN( 321)														{
HXLINE( 321)															int destData46 = destData->byteOffset;
HXDLIN( 321)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData46 + (destPosition + (int)3)),val35);
            														}
            													}
            												}
            												break;
            											}
            										}
            									}
HXLINE( 325)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 326)									destPosition = (destPosition + (int)4);
HXLINE( 327)									alphaPosition = (alphaPosition + (int)4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 335)						int _g14 = (int)0;
HXDLIN( 335)						int _g7 = destView->height;
HXDLIN( 335)						while((_g14 < _g7)){
HXLINE( 335)							_g14 = (_g14 + (int)1);
HXDLIN( 335)							int y4 = (_g14 - (int)1);
HXLINE( 337)							int sourceView5 = sourceView->byteOffset;
HXDLIN( 337)							sourcePosition = (sourceView5 + (sourceView->stride * y4));
HXLINE( 338)							int destView5 = destView->byteOffset;
HXDLIN( 338)							destPosition = (destView5 + (destView->stride * y4));
HXLINE( 339)							int alphaView2 = alphaView->byteOffset;
HXDLIN( 339)							alphaPosition = (alphaView2 + (alphaView->stride * y4));
HXLINE( 341)							{
HXLINE( 341)								int _g33 = (int)0;
HXDLIN( 341)								int _g23 = destView->width;
HXDLIN( 341)								while((_g33 < _g23)){
HXLINE( 341)									_g33 = (_g33 + (int)1);
HXDLIN( 341)									int x3 = (_g33 - (int)1);
HXLINE( 343)									{
HXLINE( 343)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 343)												int r23 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 343)												int sourceData29 = sourceData->byteOffset;
HXDLIN( 343)												int g23 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData29 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 343)												int sourceData30 = sourceData->byteOffset;
HXDLIN( 343)												int b18 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData30 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 343)												int sourceData31 = sourceData->byteOffset;
HXDLIN( 343)												sourcePixel = ((int)((int)((int)((int)((int)r23 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g23 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b18 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData31 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 343)												int sourceData32 = sourceData->byteOffset;
HXDLIN( 343)												int r24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData32 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 343)												int sourceData33 = sourceData->byteOffset;
HXDLIN( 343)												int g24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData33 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 343)												int sourceData34 = sourceData->byteOffset;
HXDLIN( 343)												int b19 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData34 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 343)												sourcePixel = ((int)((int)((int)((int)((int)r24 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g24 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b19 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 343)												int sourceData35 = sourceData->byteOffset;
HXDLIN( 343)												int r25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData35 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 343)												int sourceData36 = sourceData->byteOffset;
HXDLIN( 343)												int g25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData36 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 343)												int b20 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 343)												int sourceData37 = sourceData->byteOffset;
HXDLIN( 343)												sourcePixel = ((int)((int)((int)((int)((int)r25 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g25 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b20 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData37 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 343)										if (sourcePremultiplied) {
HXLINE( 343)											bool _hx_tmp22;
HXDLIN( 343)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 343)												_hx_tmp22 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 343)												_hx_tmp22 = false;
            											}
HXDLIN( 343)											if (_hx_tmp22) {
HXLINE( 343)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 343)												{
HXLINE( 343)													 ::lime::utils::ArrayBufferView this30 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 343)													int r26 = ((int)::__hxcpp_memory_get_byte(this30->buffer->b,(this30->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 343)													 ::lime::utils::ArrayBufferView this31 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 343)													int g26 = ((int)::__hxcpp_memory_get_byte(this31->buffer->b,(this31->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 343)													 ::lime::utils::ArrayBufferView this32 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 343)													sourcePixel = ((int)((int)((int)((int)((int)r26 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g26 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this32->buffer->b,(this32->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 344)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 344)											int r27 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 344)											int alphaData10 = alphaData->byteOffset;
HXDLIN( 344)											int g27 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData10 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 344)											int alphaData11 = alphaData->byteOffset;
HXDLIN( 344)											int b21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData11 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 344)											int alphaData12 = alphaData->byteOffset;
HXDLIN( 344)											alphaPixel = ((int)((int)((int)((int)((int)r27 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g27 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b21 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData12 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 344)											int alphaData13 = alphaData->byteOffset;
HXDLIN( 344)											int r28 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData13 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 344)											int alphaData14 = alphaData->byteOffset;
HXDLIN( 344)											int g28 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData14 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 344)											int alphaData15 = alphaData->byteOffset;
HXDLIN( 344)											int b22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData15 + (alphaPosition + (int)3))) & (int)(int)255);
HXDLIN( 344)											alphaPixel = ((int)((int)((int)((int)((int)r28 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g28 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b22 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 344)											int alphaData16 = alphaData->byteOffset;
HXDLIN( 344)											int r29 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData16 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 344)											int alphaData17 = alphaData->byteOffset;
HXDLIN( 344)											int g29 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData17 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 344)											int b23 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 344)											int alphaData18 = alphaData->byteOffset;
HXDLIN( 344)											alphaPixel = ((int)((int)((int)((int)((int)r29 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g29 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b23 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData18 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXLINE( 346)									{
HXLINE( 346)										int value8 = ::Math_obj::round((((int)sourcePixel & (int)(int)255) * ((Float)((int)alphaPixel & (int)(int)255) / (Float)(int)255)));
HXDLIN( 346)										sourcePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value8 & (int)(int)255));
            									}
HXLINE( 347)									{
HXLINE( 347)										if (destPremultiplied) {
HXLINE( 347)											if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 347)												if ((sourcePixel != (int)0)) {
HXLINE( 347)													sourcePixel = (int)0;
            												}
            											}
            											else {
HXLINE( 347)												if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 347)													 ::lime::utils::ArrayBufferView this33 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 347)													int this34 = this33->byteOffset;
HXDLIN( 347)													::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this33->buffer->b,(this34 + (((int)sourcePixel & (int)(int)255) * (int)4)));
HXDLIN( 347)													sourcePixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
HXDLIN( 347)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 347)												{
HXLINE( 347)													int val36 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 347)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val36);
            												}
HXDLIN( 347)												{
HXLINE( 347)													int val37 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 347)													{
HXLINE( 347)														int destData47 = destData->byteOffset;
HXDLIN( 347)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData47 + (destPosition + (int)1)),val37);
            													}
            												}
HXDLIN( 347)												{
HXLINE( 347)													int val38 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 347)													{
HXLINE( 347)														int destData48 = destData->byteOffset;
HXDLIN( 347)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData48 + (destPosition + (int)2)),val38);
            													}
            												}
HXDLIN( 347)												{
HXLINE( 347)													int val39 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 347)													{
HXLINE( 347)														int destData49 = destData->byteOffset;
HXDLIN( 347)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData49 + (destPosition + (int)3)),val39);
            													}
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 347)												{
HXLINE( 347)													int val40 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 347)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val40);
            												}
HXDLIN( 347)												{
HXLINE( 347)													int val41 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 347)													{
HXLINE( 347)														int destData50 = destData->byteOffset;
HXDLIN( 347)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData50 + (destPosition + (int)1)),val41);
            													}
            												}
HXDLIN( 347)												{
HXLINE( 347)													int val42 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 347)													{
HXLINE( 347)														int destData51 = destData->byteOffset;
HXDLIN( 347)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData51 + (destPosition + (int)2)),val42);
            													}
            												}
HXDLIN( 347)												{
HXLINE( 347)													int val43 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 347)													{
HXLINE( 347)														int destData52 = destData->byteOffset;
HXDLIN( 347)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData52 + (destPosition + (int)3)),val43);
            													}
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 347)												{
HXLINE( 347)													int val44 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 347)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val44);
            												}
HXDLIN( 347)												{
HXLINE( 347)													int val45 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 347)													{
HXLINE( 347)														int destData53 = destData->byteOffset;
HXDLIN( 347)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData53 + (destPosition + (int)1)),val45);
            													}
            												}
HXDLIN( 347)												{
HXLINE( 347)													int val46 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 347)													{
HXLINE( 347)														int destData54 = destData->byteOffset;
HXDLIN( 347)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData54 + (destPosition + (int)2)),val46);
            													}
            												}
HXDLIN( 347)												{
HXLINE( 347)													int val47 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 347)													{
HXLINE( 347)														int destData55 = destData->byteOffset;
HXDLIN( 347)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData55 + (destPosition + (int)3)),val47);
            													}
            												}
            											}
            											break;
            										}
            									}
HXLINE( 349)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 350)									destPosition = (destPosition + (int)4);
HXLINE( 351)									alphaPosition = (alphaPosition + (int)4);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 365)		image->dirty = true;
HXLINE( 366)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,copyPixels,(void))

void ImageDataUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int color,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_371_fillRect)
HXLINE( 373)		int fillColor;
HXLINE( 375)		switch((int)(format)){
            			case (int)1: {
HXLINE( 377)				int argb = color;
HXDLIN( 377)				int this1 = (int)0;
HXDLIN( 377)				int rgba = this1;
HXDLIN( 377)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 377)				fillColor = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 378)				int bgra = color;
HXDLIN( 378)				int this2 = (int)0;
HXDLIN( 378)				int rgba1 = this2;
HXDLIN( 378)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 378)				fillColor = rgba1;
            			}
            			break;
            			default:{
HXLINE( 379)				fillColor = color;
            			}
            		}
HXLINE( 383)		if (!(image->get_transparent())) {
HXLINE( 385)			fillColor = ((int)((int)((int)((int)((int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(fillColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(fillColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE( 389)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 390)		if (hx::IsNull( data )) {
HXLINE( 390)			return;
            		}
HXLINE( 393)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 393)			::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int) > _hx_tmp = ::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_fill_rect;
HXDLIN( 393)			_hx_tmp(hx::DynamicPtr(image),hx::DynamicPtr(rect),((int)((int)fillColor >> (int)(int)16) & (int)(int)65535),((int)fillColor & (int)(int)65535));
            		}
            		else {
HXLINE( 397)			int format1 = image->buffer->format;
HXLINE( 398)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 399)			if (premultiplied) {
HXLINE( 399)				if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 399)					if ((fillColor != (int)0)) {
HXLINE( 399)						fillColor = (int)0;
            					}
            				}
            				else {
HXLINE( 399)					if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 399)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 399)						int this4 = this3->byteOffset;
HXDLIN( 399)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)fillColor & (int)(int)255) * (int)4)));
HXDLIN( 399)						fillColor = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)fillColor & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXLINE( 401)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView dataView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 402)			int row;
HXLINE( 404)			{
HXLINE( 404)				int _g1 = (int)0;
HXDLIN( 404)				int _g = dataView->height;
HXDLIN( 404)				while((_g1 < _g)){
HXLINE( 404)					_g1 = (_g1 + (int)1);
HXDLIN( 404)					int y = (_g1 - (int)1);
HXLINE( 406)					int dataView1 = dataView->byteOffset;
HXDLIN( 406)					row = (dataView1 + (dataView->stride * y));
HXLINE( 408)					{
HXLINE( 408)						int _g3 = (int)0;
HXDLIN( 408)						int _g2 = dataView->width;
HXDLIN( 408)						while((_g3 < _g2)){
HXLINE( 408)							_g3 = (_g3 + (int)1);
HXDLIN( 408)							int x = (_g3 - (int)1);
HXLINE( 410)							{
HXLINE( 410)								int offset = (row + (x * (int)4));
HXDLIN( 410)								switch((int)(format1)){
            									case (int)0: {
HXLINE( 410)										{
HXLINE( 410)											int val = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 410)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 410)										{
HXLINE( 410)											int val1 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 410)											{
HXLINE( 410)												int data1 = data->byteOffset;
HXDLIN( 410)												::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN( 410)										{
HXLINE( 410)											int val2 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 410)											{
HXLINE( 410)												int data2 = data->byteOffset;
HXDLIN( 410)												::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN( 410)										{
HXLINE( 410)											int val3 = ((int)fillColor & (int)(int)255);
HXDLIN( 410)											{
HXLINE( 410)												int data3 = data->byteOffset;
HXDLIN( 410)												::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 410)										{
HXLINE( 410)											int val4 = ((int)fillColor & (int)(int)255);
HXDLIN( 410)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN( 410)										{
HXLINE( 410)											int val5 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 410)											{
HXLINE( 410)												int data4 = data->byteOffset;
HXDLIN( 410)												::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN( 410)										{
HXLINE( 410)											int val6 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 410)											{
HXLINE( 410)												int data5 = data->byteOffset;
HXDLIN( 410)												::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN( 410)										{
HXLINE( 410)											int val7 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 410)											{
HXLINE( 410)												int data6 = data->byteOffset;
HXDLIN( 410)												::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 410)										{
HXLINE( 410)											int val8 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 410)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN( 410)										{
HXLINE( 410)											int val9 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 410)											{
HXLINE( 410)												int data7 = data->byteOffset;
HXDLIN( 410)												::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN( 410)										{
HXLINE( 410)											int val10 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 410)											{
HXLINE( 410)												int data8 = data->byteOffset;
HXDLIN( 410)												::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN( 410)										{
HXLINE( 410)											int val11 = ((int)fillColor & (int)(int)255);
HXDLIN( 410)											{
HXLINE( 410)												int data9 = data->byteOffset;
HXDLIN( 410)												::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 418)		image->dirty = true;
HXLINE( 419)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,fillRect,(void))

void ImageDataUtil_obj::floodFill( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_424_floodFill)
HXLINE( 426)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 427)		if (hx::IsNull( data )) {
HXLINE( 427)			return;
            		}
HXLINE( 429)		if ((format == (int)1)) {
HXLINE( 429)			color = ((int)((int)((int)color & (int)(int)16777215) << (int)(int)8) | (int)((int)((int)color >> (int)(int)24) & (int)(int)255));
            		}
HXLINE( 432)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 432)			::cpp::Function< void  ( ::hx::Object *,int,int,int,int) > _hx_tmp = ::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_flood_fill;
HXDLIN( 432)			_hx_tmp(hx::DynamicPtr(image),x,y,((int)((int)color >> (int)(int)16) & (int)(int)65535),((int)color & (int)(int)65535));
            		}
            		else {
HXLINE( 436)			int format1 = image->buffer->format;
HXLINE( 437)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 439)			int fillColor = color;
HXLINE( 441)			int hitColor;
HXLINE( 442)			{
HXLINE( 442)				int offset = (y + image->offsetY);
HXDLIN( 442)				int offset1 = (offset * (image->buffer->width * (int)4));
HXDLIN( 442)				int offset2 = (offset1 + ((x + image->offsetX) * (int)4));
HXDLIN( 442)				switch((int)(format1)){
            					case (int)0: {
HXLINE( 442)						int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255);
HXDLIN( 442)						int data1 = data->byteOffset;
HXDLIN( 442)						int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 442)						int data2 = data->byteOffset;
HXDLIN( 442)						int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 442)						int data3 = data->byteOffset;
HXDLIN( 442)						hitColor = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset2 + (int)3))) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)1: {
HXLINE( 442)						int data4 = data->byteOffset;
HXDLIN( 442)						int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 442)						int data5 = data->byteOffset;
HXDLIN( 442)						int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 442)						int data6 = data->byteOffset;
HXDLIN( 442)						int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset2 + (int)3))) & (int)(int)255);
HXDLIN( 442)						hitColor = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)2: {
HXLINE( 442)						int data7 = data->byteOffset;
HXDLIN( 442)						int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 442)						int data8 = data->byteOffset;
HXDLIN( 442)						int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 442)						int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255);
HXDLIN( 442)						int data9 = data->byteOffset;
HXDLIN( 442)						hitColor = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset2 + (int)3))) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            				}
HXDLIN( 442)				if (premultiplied) {
HXLINE( 442)					bool _hx_tmp1;
HXDLIN( 442)					if ((((int)hitColor & (int)(int)255) != (int)0)) {
HXLINE( 442)						_hx_tmp1 = (((int)hitColor & (int)(int)255) != (int)255);
            					}
            					else {
HXLINE( 442)						_hx_tmp1 = false;
            					}
HXDLIN( 442)					if (_hx_tmp1) {
HXLINE( 442)						::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)hitColor & (int)(int)255));
HXDLIN( 442)						{
HXLINE( 442)							 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 442)							int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 442)							 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 442)							int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 442)							 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 442)							hitColor = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hitColor & (int)(int)255) & (int)(int)255));
            						}
            					}
            				}
            			}
HXLINE( 444)			if (!(image->get_transparent())) {
HXLINE( 446)				fillColor = ((int)((int)((int)((int)((int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(fillColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(fillColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 447)				hitColor = ((int)((int)((int)((int)((int)((int)hx::UShr(hitColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(hitColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(hitColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            			}
HXLINE( 451)			if ((fillColor == hitColor)) {
HXLINE( 451)				return;
            			}
HXLINE( 453)			if (premultiplied) {
HXLINE( 453)				if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 453)					if ((fillColor != (int)0)) {
HXLINE( 453)						fillColor = (int)0;
            					}
            				}
            				else {
HXLINE( 453)					if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 453)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 453)						int this5 = this4->byteOffset;
HXDLIN( 453)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this5 + (((int)fillColor & (int)(int)255) * (int)4)));
HXDLIN( 453)						fillColor = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)fillColor & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXLINE( 455)			::Array< int > dx = ::Array_obj< int >::fromData( _hx_array_data_f0237280_22,4);
HXLINE( 456)			::Array< int > dy = ::Array_obj< int >::fromData( _hx_array_data_f0237280_23,4);
HXLINE( 458)			int minX = -(image->offsetX);
HXLINE( 459)			int minY = -(image->offsetY);
HXLINE( 460)			int maxX = (minX + image->width);
HXLINE( 461)			int maxY = (minY + image->height);
HXLINE( 463)			::Array< int > queue = ::Array_obj< int >::__new();
HXLINE( 464)			queue->push(x);
HXLINE( 465)			queue->push(y);
HXLINE( 467)			 ::Dynamic curPointX;
HXDLIN( 467)			 ::Dynamic curPointY;
HXDLIN( 467)			int nextPointX;
HXDLIN( 467)			int nextPointY;
HXDLIN( 467)			int nextPointOffset;
HXDLIN( 467)			int readColor;
HXLINE( 469)			while((queue->length > (int)0)){
HXLINE( 471)				curPointY = queue->pop();
HXLINE( 472)				curPointX = queue->pop();
HXLINE( 474)				{
HXLINE( 474)					int _g = (int)0;
HXDLIN( 474)					while((_g < (int)4)){
HXLINE( 474)						_g = (_g + (int)1);
HXDLIN( 474)						int i = (_g - (int)1);
HXLINE( 476)						nextPointX = (curPointX + dx->__get(i));
HXLINE( 477)						nextPointY = (curPointY + dy->__get(i));
HXLINE( 479)						bool _hx_tmp2;
HXDLIN( 479)						bool _hx_tmp3;
HXDLIN( 479)						bool _hx_tmp4;
HXDLIN( 479)						if ((nextPointX >= minX)) {
HXLINE( 479)							_hx_tmp4 = (nextPointY < minY);
            						}
            						else {
HXLINE( 479)							_hx_tmp4 = true;
            						}
HXDLIN( 479)						if (!(_hx_tmp4)) {
HXLINE( 479)							_hx_tmp3 = (nextPointX >= maxX);
            						}
            						else {
HXLINE( 479)							_hx_tmp3 = true;
            						}
HXDLIN( 479)						if (!(_hx_tmp3)) {
HXLINE( 479)							_hx_tmp2 = (nextPointY >= maxY);
            						}
            						else {
HXLINE( 479)							_hx_tmp2 = true;
            						}
HXDLIN( 479)						if (_hx_tmp2) {
HXLINE( 481)							continue;
            						}
HXLINE( 485)						nextPointOffset = (((nextPointY * image->width) + nextPointX) * (int)4);
HXLINE( 486)						{
HXLINE( 486)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 486)									int r4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255);
HXDLIN( 486)									int data10 = data->byteOffset;
HXDLIN( 486)									int g4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data10 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 486)									int data11 = data->byteOffset;
HXDLIN( 486)									int b3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data11 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 486)									int data12 = data->byteOffset;
HXDLIN( 486)									readColor = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data12 + (nextPointOffset + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 486)									int data13 = data->byteOffset;
HXDLIN( 486)									int r5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data13 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 486)									int data14 = data->byteOffset;
HXDLIN( 486)									int g5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data14 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 486)									int data15 = data->byteOffset;
HXDLIN( 486)									int b4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data15 + (nextPointOffset + (int)3))) & (int)(int)255);
HXDLIN( 486)									readColor = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 486)									int data16 = data->byteOffset;
HXDLIN( 486)									int r6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data16 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 486)									int data17 = data->byteOffset;
HXDLIN( 486)									int g6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data17 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 486)									int b5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255);
HXDLIN( 486)									int data18 = data->byteOffset;
HXDLIN( 486)									readColor = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data18 + (nextPointOffset + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            							}
HXDLIN( 486)							if (premultiplied) {
HXLINE( 486)								bool _hx_tmp5;
HXDLIN( 486)								if ((((int)readColor & (int)(int)255) != (int)0)) {
HXLINE( 486)									_hx_tmp5 = (((int)readColor & (int)(int)255) != (int)255);
            								}
            								else {
HXLINE( 486)									_hx_tmp5 = false;
            								}
HXDLIN( 486)								if (_hx_tmp5) {
HXLINE( 486)									::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)readColor & (int)(int)255));
HXDLIN( 486)									{
HXLINE( 486)										 ::lime::utils::ArrayBufferView this6 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 486)										int r7 = ((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 486)										 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 486)										int g7 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 486)										 ::lime::utils::ArrayBufferView this8 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 486)										readColor = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)readColor & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
            						}
HXLINE( 488)						if ((readColor == hitColor)) {
HXLINE( 490)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 490)									{
HXLINE( 490)										int val = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 490)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val);
            									}
HXDLIN( 490)									{
HXLINE( 490)										int val1 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 490)										{
HXLINE( 490)											int data19 = data->byteOffset;
HXDLIN( 490)											::__hxcpp_memory_set_byte(data->buffer->b,(data19 + (nextPointOffset + (int)1)),val1);
            										}
            									}
HXDLIN( 490)									{
HXLINE( 490)										int val2 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 490)										{
HXLINE( 490)											int data20 = data->byteOffset;
HXDLIN( 490)											::__hxcpp_memory_set_byte(data->buffer->b,(data20 + (nextPointOffset + (int)2)),val2);
            										}
            									}
HXDLIN( 490)									{
HXLINE( 490)										int val3 = ((int)fillColor & (int)(int)255);
HXDLIN( 490)										{
HXLINE( 490)											int data21 = data->byteOffset;
HXDLIN( 490)											::__hxcpp_memory_set_byte(data->buffer->b,(data21 + (nextPointOffset + (int)3)),val3);
            										}
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 490)									{
HXLINE( 490)										int val4 = ((int)fillColor & (int)(int)255);
HXDLIN( 490)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val4);
            									}
HXDLIN( 490)									{
HXLINE( 490)										int val5 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 490)										{
HXLINE( 490)											int data22 = data->byteOffset;
HXDLIN( 490)											::__hxcpp_memory_set_byte(data->buffer->b,(data22 + (nextPointOffset + (int)1)),val5);
            										}
            									}
HXDLIN( 490)									{
HXLINE( 490)										int val6 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 490)										{
HXLINE( 490)											int data23 = data->byteOffset;
HXDLIN( 490)											::__hxcpp_memory_set_byte(data->buffer->b,(data23 + (nextPointOffset + (int)2)),val6);
            										}
            									}
HXDLIN( 490)									{
HXLINE( 490)										int val7 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 490)										{
HXLINE( 490)											int data24 = data->byteOffset;
HXDLIN( 490)											::__hxcpp_memory_set_byte(data->buffer->b,(data24 + (nextPointOffset + (int)3)),val7);
            										}
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 490)									{
HXLINE( 490)										int val8 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 490)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val8);
            									}
HXDLIN( 490)									{
HXLINE( 490)										int val9 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 490)										{
HXLINE( 490)											int data25 = data->byteOffset;
HXDLIN( 490)											::__hxcpp_memory_set_byte(data->buffer->b,(data25 + (nextPointOffset + (int)1)),val9);
            										}
            									}
HXDLIN( 490)									{
HXLINE( 490)										int val10 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 490)										{
HXLINE( 490)											int data26 = data->byteOffset;
HXDLIN( 490)											::__hxcpp_memory_set_byte(data->buffer->b,(data26 + (nextPointOffset + (int)2)),val10);
            										}
            									}
HXDLIN( 490)									{
HXLINE( 490)										int val11 = ((int)fillColor & (int)(int)255);
HXDLIN( 490)										{
HXLINE( 490)											int data27 = data->byteOffset;
HXDLIN( 490)											::__hxcpp_memory_set_byte(data->buffer->b,(data27 + (nextPointOffset + (int)3)),val11);
            										}
            									}
            								}
            								break;
            							}
HXLINE( 492)							queue->push(nextPointX);
HXLINE( 493)							queue->push(nextPointY);
            						}
            					}
            				}
            			}
            		}
HXLINE( 503)		image->dirty = true;
HXLINE( 504)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,floodFill,(void))

 ::lime::graphics::Image ImageDataUtil_obj::gaussianBlur( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality,hx::Null< Float >  __o_strength){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(Float col,Float alpha){
            			HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_513_gaussianBlur)
HXLINE( 514)			int col1 = ::Std_obj::_hx_int((((Float)col / (Float)alpha) * (int)255));
HXLINE( 515)			if ((col1 < (int)0)) {
HXLINE( 515)				return (int)0;
            			}
            			else {
HXLINE( 515)				if ((col1 > (int)255)) {
HXLINE( 515)					return (int)255;
            				}
            				else {
HXLINE( 515)					return col1;
            				}
            			}
HXDLIN( 515)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		::Array< Float > _hx_run(Float sigma,int n){
            			HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_518_gaussianBlur)
HXLINE( 519)			Float wIdeal = ::Math_obj::sqrt((((Float)(((int)12 * sigma) * sigma) / (Float)n) + (int)1));
HXLINE( 520)			int wl = ::Math_obj::floor(wIdeal);
HXLINE( 521)			if ((hx::Mod(wl,(int)2) == (int)0)) {
HXLINE( 521)				wl = (wl - (int)1);
            			}
HXLINE( 522)			int wu = (wl + (int)2);
HXLINE( 524)			Float mIdeal = ((Float)((((((int)12 * sigma) * sigma) - ((n * wl) * wl)) - (((int)4 * n) * wl)) - ((int)3 * n)) / (Float)(((int)-4 * wl) - (int)4));
HXLINE( 525)			int m = ::Math_obj::round(mIdeal);
HXLINE( 526)			::Array< Float > sizes = ::Array_obj< Float >::__new(0);
HXLINE( 527)			{
HXLINE( 527)				int _g1 = (int)0;
HXDLIN( 527)				int _g = n;
HXDLIN( 527)				while((_g1 < _g)){
HXLINE( 527)					_g1 = (_g1 + (int)1);
HXDLIN( 527)					int i = (_g1 - (int)1);
HXLINE( 528)					Float boxesForGauss1;
HXDLIN( 528)					if ((i < m)) {
HXLINE( 528)						boxesForGauss1 = wl;
            					}
            					else {
HXLINE( 528)						boxesForGauss1 = wu;
            					}
HXDLIN( 528)					sizes->push(boxesForGauss1);
            				}
            			}
HXLINE( 530)			return sizes;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(6)
            		void _hx_run( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,int r,int off){
            			HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_533_gaussianBlur)
HXLINE( 534)			Float iarr = ((Float)(int)1 / (Float)((r + r) + (int)1));
HXLINE( 535)			{
HXLINE( 535)				int _g11 = (int)0;
HXDLIN( 535)				int _g2 = h;
HXDLIN( 535)				while((_g11 < _g2)){
HXLINE( 535)					_g11 = (_g11 + (int)1);
HXDLIN( 535)					int i1 = (_g11 - (int)1);
HXLINE( 536)					int ti = (i1 * w);
HXDLIN( 536)					int li = ti;
HXDLIN( 536)					int ri = (ti + r);
HXLINE( 537)					int imgA1 = imgA->byteOffset;
HXDLIN( 537)					 ::Dynamic fv = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA1 + ((ti * (int)4) + off))) & (int)(int)255);
HXDLIN( 537)					int imgA2 = imgA->byteOffset;
HXDLIN( 537)					 ::Dynamic lv = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA2 + ((((ti + w) - (int)1) * (int)4) + off))) & (int)(int)255);
HXDLIN( 537)					int val = ((r + (int)1) * fv);
HXLINE( 539)					{
HXLINE( 539)						int _g3 = (int)0;
HXDLIN( 539)						int _g21 = r;
HXDLIN( 539)						while((_g3 < _g21)){
HXLINE( 539)							_g3 = (_g3 + (int)1);
HXDLIN( 539)							int j = (_g3 - (int)1);
HXLINE( 540)							int imgA3 = imgA->byteOffset;
HXDLIN( 540)							val = (val + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA3 + (((ti + j) * (int)4) + off))) & (int)(int)255));
            						}
            					}
HXLINE( 542)					{
HXLINE( 542)						int _g31 = (int)0;
HXDLIN( 542)						int _g22 = (r + (int)1);
HXDLIN( 542)						while((_g31 < _g22)){
HXLINE( 542)							_g31 = (_g31 + (int)1);
HXDLIN( 542)							int j1 = (_g31 - (int)1);
HXLINE( 543)							int imgA4 = imgA->byteOffset;
HXDLIN( 543)							val = (val + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA4 + ((ri * (int)4) + off))) & (int)(int)255) - fv));
HXLINE( 544)							{
HXLINE( 544)								int _hx_int = val;
HXDLIN( 544)								Float val1;
HXDLIN( 544)								if ((_hx_int < (int)0)) {
HXLINE( 544)									val1 = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE( 544)									val1 = (_hx_int + ((Float)0.0));
            								}
HXDLIN( 544)								int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN( 544)								{
HXLINE( 544)									int imgB1 = imgB->byteOffset;
HXDLIN( 544)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB1 + ((ti * (int)4) + off)),val2);
            								}
            							}
HXLINE( 545)							ri = (ri + (int)1);
HXLINE( 546)							ti = (ti + (int)1);
            						}
            					}
HXLINE( 549)					{
HXLINE( 549)						int _g32 = (r + (int)1);
HXDLIN( 549)						int _g23 = (w - r);
HXDLIN( 549)						while((_g32 < _g23)){
HXLINE( 549)							_g32 = (_g32 + (int)1);
HXDLIN( 549)							int j2 = (_g32 - (int)1);
HXLINE( 550)							int imgA5 = imgA->byteOffset;
HXDLIN( 550)							int a = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA5 + ((ri * (int)4) + off))) & (int)(int)255);
HXDLIN( 550)							int imgA6 = imgA->byteOffset;
HXDLIN( 550)							val = (val + (a - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA6 + ((li * (int)4) + off))) & (int)(int)255)));
HXLINE( 551)							{
HXLINE( 551)								int int1 = val;
HXDLIN( 551)								Float val3;
HXDLIN( 551)								if ((int1 < (int)0)) {
HXLINE( 551)									val3 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE( 551)									val3 = (int1 + ((Float)0.0));
            								}
HXDLIN( 551)								int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN( 551)								{
HXLINE( 551)									int imgB2 = imgB->byteOffset;
HXDLIN( 551)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB2 + ((ti * (int)4) + off)),val4);
            								}
            							}
HXLINE( 552)							ri = (ri + (int)1);
HXLINE( 553)							li = (li + (int)1);
HXLINE( 554)							ti = (ti + (int)1);
            						}
            					}
HXLINE( 557)					{
HXLINE( 557)						int _g33 = (w - r);
HXDLIN( 557)						int _g24 = w;
HXDLIN( 557)						while((_g33 < _g24)){
HXLINE( 557)							_g33 = (_g33 + (int)1);
HXDLIN( 557)							int j3 = (_g33 - (int)1);
HXLINE( 558)							int imgA7 = imgA->byteOffset;
HXDLIN( 558)							val = (val + (lv - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA7 + ((li * (int)4) + off))) & (int)(int)255)));
HXLINE( 559)							{
HXLINE( 559)								int int2 = val;
HXDLIN( 559)								Float val5;
HXDLIN( 559)								if ((int2 < (int)0)) {
HXLINE( 559)									val5 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE( 559)									val5 = (int2 + ((Float)0.0));
            								}
HXDLIN( 559)								int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN( 559)								{
HXLINE( 559)									int imgB3 = imgB->byteOffset;
HXDLIN( 559)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB3 + ((ti * (int)4) + off)),val6);
            								}
            							}
HXLINE( 560)							li = (li + (int)1);
HXLINE( 561)							ti = (ti + (int)1);
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC6((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(6)
            		void _hx_run( ::lime::utils::ArrayBufferView imgA8, ::lime::utils::ArrayBufferView imgB4,int w1,int h1,int r1,int off1){
            			HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_566_gaussianBlur)
HXLINE( 567)			Float iarr1 = ((Float)(int)1 / (Float)((r1 + r1) + (int)1));
HXLINE( 568)			int ws = (w1 * (int)4);
HXLINE( 569)			{
HXLINE( 569)				int _g12 = (int)0;
HXDLIN( 569)				int _g4 = w1;
HXDLIN( 569)				while((_g12 < _g4)){
HXLINE( 569)					_g12 = (_g12 + (int)1);
HXDLIN( 569)					int i2 = (_g12 - (int)1);
HXLINE( 570)					int ti1 = ((i2 * (int)4) + off1);
HXDLIN( 570)					int li1 = ti1;
HXDLIN( 570)					int ri1 = (ti1 + (r1 * ws));
HXLINE( 571)					 ::Dynamic fv1 = ((int)::__hxcpp_memory_get_byte(imgA8->buffer->b,(imgA8->byteOffset + ti1)) & (int)(int)255);
HXDLIN( 571)					int imgA9 = imgA8->byteOffset;
HXDLIN( 571)					 ::Dynamic lv1 = ((int)::__hxcpp_memory_get_byte(imgA8->buffer->b,(imgA9 + (ti1 + (ws * (h1 - (int)1))))) & (int)(int)255);
HXDLIN( 571)					int val7 = ((r1 + (int)1) * fv1);
HXLINE( 572)					{
HXLINE( 572)						int _g34 = (int)0;
HXDLIN( 572)						int _g25 = r1;
HXDLIN( 572)						while((_g34 < _g25)){
HXLINE( 572)							_g34 = (_g34 + (int)1);
HXDLIN( 572)							int j4 = (_g34 - (int)1);
HXLINE( 573)							int imgA10 = imgA8->byteOffset;
HXDLIN( 573)							val7 = (val7 + ((int)::__hxcpp_memory_get_byte(imgA8->buffer->b,(imgA10 + (ti1 + (j4 * ws)))) & (int)(int)255));
            						}
            					}
HXLINE( 575)					{
HXLINE( 575)						int _g35 = (int)0;
HXDLIN( 575)						int _g26 = (r1 + (int)1);
HXDLIN( 575)						while((_g35 < _g26)){
HXLINE( 575)							_g35 = (_g35 + (int)1);
HXDLIN( 575)							int j5 = (_g35 - (int)1);
HXLINE( 576)							val7 = (val7 + (((int)::__hxcpp_memory_get_byte(imgA8->buffer->b,(imgA8->byteOffset + ri1)) & (int)(int)255) - fv1));
HXLINE( 577)							{
HXLINE( 577)								int int3 = val7;
HXDLIN( 577)								Float val8;
HXDLIN( 577)								if ((int3 < (int)0)) {
HXLINE( 577)									val8 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE( 577)									val8 = (int3 + ((Float)0.0));
            								}
HXDLIN( 577)								int val9 = ::Math_obj::round((val8 * iarr1));
HXDLIN( 577)								::__hxcpp_memory_set_byte(imgB4->buffer->b,(imgB4->byteOffset + ti1),val9);
            							}
HXLINE( 578)							ri1 = (ri1 + ws);
HXDLIN( 578)							ti1 = (ti1 + ws);
            						}
            					}
HXLINE( 581)					{
HXLINE( 581)						int _g36 = (r1 + (int)1);
HXDLIN( 581)						int _g27 = (h1 - r1);
HXDLIN( 581)						while((_g36 < _g27)){
HXLINE( 581)							_g36 = (_g36 + (int)1);
HXDLIN( 581)							int j6 = (_g36 - (int)1);
HXLINE( 582)							int a1 = ((int)::__hxcpp_memory_get_byte(imgA8->buffer->b,(imgA8->byteOffset + ri1)) & (int)(int)255);
HXDLIN( 582)							val7 = (val7 + (a1 - ((int)::__hxcpp_memory_get_byte(imgA8->buffer->b,(imgA8->byteOffset + li1)) & (int)(int)255)));
HXLINE( 583)							{
HXLINE( 583)								int int4 = val7;
HXDLIN( 583)								Float val10;
HXDLIN( 583)								if ((int4 < (int)0)) {
HXLINE( 583)									val10 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE( 583)									val10 = (int4 + ((Float)0.0));
            								}
HXDLIN( 583)								int val11 = ::Math_obj::round((val10 * iarr1));
HXDLIN( 583)								::__hxcpp_memory_set_byte(imgB4->buffer->b,(imgB4->byteOffset + ti1),val11);
            							}
HXLINE( 584)							li1 = (li1 + ws);
HXLINE( 585)							ri1 = (ri1 + ws);
HXLINE( 586)							ti1 = (ti1 + ws);
            						}
            					}
HXLINE( 589)					{
HXLINE( 589)						int _g37 = (h1 - r1);
HXDLIN( 589)						int _g28 = h1;
HXDLIN( 589)						while((_g37 < _g28)){
HXLINE( 589)							_g37 = (_g37 + (int)1);
HXDLIN( 589)							int j7 = (_g37 - (int)1);
HXLINE( 590)							val7 = (val7 + (lv1 - ((int)::__hxcpp_memory_get_byte(imgA8->buffer->b,(imgA8->byteOffset + li1)) & (int)(int)255)));
HXLINE( 591)							{
HXLINE( 591)								int int5 = val7;
HXDLIN( 591)								Float val12;
HXDLIN( 591)								if ((int5 < (int)0)) {
HXLINE( 591)									val12 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE( 591)									val12 = (int5 + ((Float)0.0));
            								}
HXDLIN( 591)								int val13 = ::Math_obj::round((val12 * iarr1));
HXDLIN( 591)								::__hxcpp_memory_set_byte(imgB4->buffer->b,(imgB4->byteOffset + ti1),val13);
            							}
HXLINE( 592)							li1 = (li1 + ws);
HXLINE( 593)							ti1 = (ti1 + ws);
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC6((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_4, ::Dynamic,boxBlurH, ::Dynamic,boxBlurT) HXARGC(6)
            		void _hx_run( ::lime::utils::ArrayBufferView imgA11, ::lime::utils::ArrayBufferView imgB5,int w2,int h2,Float bx,Float by){
            			HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_598_gaussianBlur)
HXLINE( 599)			{
HXLINE( 599)				int _g13 = (int)0;
HXDLIN( 599)				int _g5 = imgA11->length;
HXDLIN( 599)				while((_g13 < _g5)){
HXLINE( 599)					_g13 = (_g13 + (int)1);
HXDLIN( 599)					int i3 = (_g13 - (int)1);
HXLINE( 600)					{
HXLINE( 600)						int val14 = ((int)::__hxcpp_memory_get_byte(imgA11->buffer->b,(imgA11->byteOffset + i3)) & (int)(int)255);
HXDLIN( 600)						::__hxcpp_memory_set_byte(imgB5->buffer->b,(imgB5->byteOffset + i3),val14);
            					}
            				}
            			}
HXLINE( 602)			int boxBlur1 = ::Std_obj::_hx_int(bx);
HXDLIN( 602)			boxBlurH(imgB5,imgA11,w2,h2,boxBlur1,(int)0);
HXLINE( 603)			int boxBlur2 = ::Std_obj::_hx_int(bx);
HXDLIN( 603)			boxBlurH(imgB5,imgA11,w2,h2,boxBlur2,(int)1);
HXLINE( 604)			int boxBlur3 = ::Std_obj::_hx_int(bx);
HXDLIN( 604)			boxBlurH(imgB5,imgA11,w2,h2,boxBlur3,(int)2);
HXLINE( 605)			int boxBlur4 = ::Std_obj::_hx_int(bx);
HXDLIN( 605)			boxBlurH(imgB5,imgA11,w2,h2,boxBlur4,(int)3);
HXLINE( 607)			int boxBlur5 = ::Std_obj::_hx_int(by);
HXDLIN( 607)			boxBlurT(imgA11,imgB5,w2,h2,boxBlur5,(int)0);
HXLINE( 608)			int boxBlur6 = ::Std_obj::_hx_int(by);
HXDLIN( 608)			boxBlurT(imgA11,imgB5,w2,h2,boxBlur6,(int)1);
HXLINE( 609)			int boxBlur7 = ::Std_obj::_hx_int(by);
HXDLIN( 609)			boxBlurT(imgA11,imgB5,w2,h2,boxBlur7,(int)2);
HXLINE( 610)			int boxBlur8 = ::Std_obj::_hx_int(by);
HXDLIN( 610)			boxBlurT(imgA11,imgB5,w2,h2,boxBlur8,(int)3);
            		}
            		HX_END_LOCAL_FUNC6((void))

Float blurX = __o_blurX.Default(4);
Float blurY = __o_blurY.Default(4);
int quality = __o_quality.Default(1);
Float strength = __o_strength.Default(1);
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_509_gaussianBlur)
HXLINE( 513)		 ::Dynamic fromPreMult =  ::Dynamic(new _hx_Closure_0());
HXLINE( 518)		 ::Dynamic boxesForGauss =  ::Dynamic(new _hx_Closure_1());
HXLINE( 533)		 ::Dynamic boxBlurH =  ::Dynamic(new _hx_Closure_2());
HXLINE( 566)		 ::Dynamic boxBlurT =  ::Dynamic(new _hx_Closure_3());
HXLINE( 598)		 ::Dynamic boxBlur =  ::Dynamic(new _hx_Closure_4(boxBlurH,boxBlurT));
HXLINE( 613)		 ::lime::utils::ArrayBufferView imgB6 = image->get_data();
HXLINE( 614)		 ::lime::utils::ArrayBufferView imgA12 = sourceImage->get_data();
HXLINE( 615)		int w3 = ::Std_obj::_hx_int(sourceRect->width);
HXLINE( 616)		int h3 = ::Std_obj::_hx_int(sourceRect->height);
HXLINE( 617)		int bx1 = ::Std_obj::_hx_int(blurX);
HXLINE( 618)		int by1 = ::Std_obj::_hx_int(blurY);
HXLINE( 619)		int oX = ::Std_obj::_hx_int(destPoint->x);
HXLINE( 620)		int oY = ::Std_obj::_hx_int(destPoint->y);
HXLINE( 622)		int n1 = ((quality * (int)2) - (int)1);
HXLINE( 623)		Float rng = (::Math_obj::pow((int)2,quality) * ((Float)0.125));
HXLINE( 625)		::Array< Float > bxs = ( (::Array< Float >)(boxesForGauss((bx1 * rng),n1)) );
HXLINE( 626)		::Array< Float > bys = ( (::Array< Float >)(boxesForGauss((by1 * rng),n1)) );
HXLINE( 627)		int offset = ::Std_obj::_hx_int((((w3 * oY) + oX) * (int)4));
HXLINE( 629)		boxBlur(imgA12,imgB6,w3,h3,((Float)(bxs->__get((int)0) - (int)1) / (Float)(int)2),((Float)(bys->__get((int)0) - (int)1) / (Float)(int)2));
HXLINE( 630)		int bIndex = (int)1;
HXLINE( 631)		{
HXLINE( 631)			int _g14 = (int)0;
HXDLIN( 631)			int _g6 = ::Std_obj::_hx_int(((Float)n1 / (Float)(int)2));
HXDLIN( 631)			while((_g14 < _g6)){
HXLINE( 631)				_g14 = (_g14 + (int)1);
HXDLIN( 631)				int i4 = (_g14 - (int)1);
HXLINE( 632)				boxBlur(imgB6,imgA12,w3,h3,((Float)(bxs->__get(bIndex) - (int)1) / (Float)(int)2),((Float)(bys->__get(bIndex) - (int)1) / (Float)(int)2));
HXLINE( 633)				boxBlur(imgA12,imgB6,w3,h3,((Float)(bxs->__get((bIndex + (int)1)) - (int)1) / (Float)(int)2),((Float)(bys->__get((bIndex + (int)1)) - (int)1) / (Float)(int)2));
HXLINE( 635)				bIndex = (bIndex + (int)2);
            			}
            		}
HXLINE( 638)		int i5 = (int)0;
HXLINE( 639)		int a2;
HXLINE( 640)		if ((offset < (int)0)) {
HXLINE( 641)			while((i5 < imgA12->length)){
HXLINE( 642)				int imgB7 = imgB6->byteOffset;
HXDLIN( 642)				int int6 = ((int)::__hxcpp_memory_get_byte(imgB6->buffer->b,(imgB7 + (i5 + (int)3))) & (int)(int)255);
HXDLIN( 642)				Float a3;
HXDLIN( 642)				if ((int6 < (int)0)) {
HXLINE( 642)					a3 = (((Float)4294967296.0) + int6);
            				}
            				else {
HXLINE( 642)					a3 = (int6 + ((Float)0.0));
            				}
HXDLIN( 642)				a2 = ::Std_obj::_hx_int((a3 * strength));
HXLINE( 643)				if ((a2 < (int)0)) {
HXLINE( 643)					a2 = (int)0;
            				}
            				else {
HXLINE( 643)					if ((a2 > (int)255)) {
HXLINE( 643)						a2 = (int)255;
            					}
            					else {
HXLINE( 643)						a2 = a2;
            					}
            				}
HXLINE( 644)				{
HXLINE( 644)					int int7 = ((int)::__hxcpp_memory_get_byte(imgB6->buffer->b,(imgB6->byteOffset + i5)) & (int)(int)255);
HXDLIN( 644)					Float val15;
HXDLIN( 644)					if ((int7 < (int)0)) {
HXLINE( 644)						val15 = (((Float)4294967296.0) + int7);
            					}
            					else {
HXLINE( 644)						val15 = (int7 + ((Float)0.0));
            					}
HXDLIN( 644)					int val16 = ( (int)(fromPreMult(val15,a2)) );
HXDLIN( 644)					::__hxcpp_memory_set_byte(imgB6->buffer->b,(imgB6->byteOffset + i5),val16);
            				}
HXLINE( 645)				{
HXLINE( 645)					int imgB8 = imgB6->byteOffset;
HXDLIN( 645)					int int8 = ((int)::__hxcpp_memory_get_byte(imgB6->buffer->b,(imgB8 + (i5 + (int)1))) & (int)(int)255);
HXDLIN( 645)					Float val17;
HXDLIN( 645)					if ((int8 < (int)0)) {
HXLINE( 645)						val17 = (((Float)4294967296.0) + int8);
            					}
            					else {
HXLINE( 645)						val17 = (int8 + ((Float)0.0));
            					}
HXDLIN( 645)					int val18 = ( (int)(fromPreMult(val17,a2)) );
HXDLIN( 645)					{
HXLINE( 645)						int imgB9 = imgB6->byteOffset;
HXDLIN( 645)						::__hxcpp_memory_set_byte(imgB6->buffer->b,(imgB9 + (i5 + (int)1)),val18);
            					}
            				}
HXLINE( 646)				{
HXLINE( 646)					int imgB10 = imgB6->byteOffset;
HXDLIN( 646)					int int9 = ((int)::__hxcpp_memory_get_byte(imgB6->buffer->b,(imgB10 + (i5 + (int)2))) & (int)(int)255);
HXDLIN( 646)					Float val19;
HXDLIN( 646)					if ((int9 < (int)0)) {
HXLINE( 646)						val19 = (((Float)4294967296.0) + int9);
            					}
            					else {
HXLINE( 646)						val19 = (int9 + ((Float)0.0));
            					}
HXDLIN( 646)					int val20 = ( (int)(fromPreMult(val19,a2)) );
HXDLIN( 646)					{
HXLINE( 646)						int imgB11 = imgB6->byteOffset;
HXDLIN( 646)						::__hxcpp_memory_set_byte(imgB6->buffer->b,(imgB11 + (i5 + (int)2)),val20);
            					}
            				}
HXLINE( 647)				{
HXLINE( 647)					int imgB12 = imgB6->byteOffset;
HXDLIN( 647)					::__hxcpp_memory_set_byte(imgB6->buffer->b,(imgB12 + (i5 + (int)3)),a2);
            				}
HXLINE( 648)				i5 = (i5 + (int)4);
            			}
HXLINE( 650)			{
HXLINE( 650)				int _g15 = (imgA12->length - offset);
HXDLIN( 650)				int _g7 = imgA12->length;
HXDLIN( 650)				while((_g15 < _g7)){
HXLINE( 650)					_g15 = (_g15 + (int)1);
HXDLIN( 650)					int i6 = (_g15 - (int)1);
HXLINE( 651)					::__hxcpp_memory_set_byte(imgB6->buffer->b,(imgB6->byteOffset + i6),(int)0);
            				}
            			}
            		}
            		else {
HXLINE( 653)			i5 = (imgA12->length - (int)4);
HXLINE( 654)			while((i5 >= (int)0)){
HXLINE( 655)				int imgB13 = imgB6->byteOffset;
HXDLIN( 655)				int int10 = ((int)::__hxcpp_memory_get_byte(imgB6->buffer->b,(imgB13 + (i5 + (int)3))) & (int)(int)255);
HXDLIN( 655)				Float a4;
HXDLIN( 655)				if ((int10 < (int)0)) {
HXLINE( 655)					a4 = (((Float)4294967296.0) + int10);
            				}
            				else {
HXLINE( 655)					a4 = (int10 + ((Float)0.0));
            				}
HXDLIN( 655)				a2 = ::Std_obj::_hx_int((a4 * strength));
HXLINE( 656)				if ((a2 < (int)0)) {
HXLINE( 656)					a2 = (int)0;
            				}
            				else {
HXLINE( 656)					if ((a2 > (int)255)) {
HXLINE( 656)						a2 = (int)255;
            					}
            					else {
HXLINE( 656)						a2 = a2;
            					}
            				}
HXLINE( 657)				{
HXLINE( 657)					int int11 = ((int)::__hxcpp_memory_get_byte(imgB6->buffer->b,(imgB6->byteOffset + i5)) & (int)(int)255);
HXDLIN( 657)					Float val21;
HXDLIN( 657)					if ((int11 < (int)0)) {
HXLINE( 657)						val21 = (((Float)4294967296.0) + int11);
            					}
            					else {
HXLINE( 657)						val21 = (int11 + ((Float)0.0));
            					}
HXDLIN( 657)					int val22 = ( (int)(fromPreMult(val21,a2)) );
HXDLIN( 657)					{
HXLINE( 657)						int imgB14 = imgB6->byteOffset;
HXDLIN( 657)						::__hxcpp_memory_set_byte(imgB6->buffer->b,(imgB14 + (i5 + offset)),val22);
            					}
            				}
HXLINE( 658)				{
HXLINE( 658)					int imgB15 = imgB6->byteOffset;
HXDLIN( 658)					int int12 = ((int)::__hxcpp_memory_get_byte(imgB6->buffer->b,(imgB15 + (i5 + (int)1))) & (int)(int)255);
HXDLIN( 658)					Float val23;
HXDLIN( 658)					if ((int12 < (int)0)) {
HXLINE( 658)						val23 = (((Float)4294967296.0) + int12);
            					}
            					else {
HXLINE( 658)						val23 = (int12 + ((Float)0.0));
            					}
HXDLIN( 658)					int val24 = ( (int)(fromPreMult(val23,a2)) );
HXDLIN( 658)					{
HXLINE( 658)						int imgB16 = imgB6->byteOffset;
HXDLIN( 658)						::__hxcpp_memory_set_byte(imgB6->buffer->b,(imgB16 + ((i5 + (int)1) + offset)),val24);
            					}
            				}
HXLINE( 659)				{
HXLINE( 659)					int imgB17 = imgB6->byteOffset;
HXDLIN( 659)					int int13 = ((int)::__hxcpp_memory_get_byte(imgB6->buffer->b,(imgB17 + (i5 + (int)2))) & (int)(int)255);
HXDLIN( 659)					Float val25;
HXDLIN( 659)					if ((int13 < (int)0)) {
HXLINE( 659)						val25 = (((Float)4294967296.0) + int13);
            					}
            					else {
HXLINE( 659)						val25 = (int13 + ((Float)0.0));
            					}
HXDLIN( 659)					int val26 = ( (int)(fromPreMult(val25,a2)) );
HXDLIN( 659)					{
HXLINE( 659)						int imgB18 = imgB6->byteOffset;
HXDLIN( 659)						::__hxcpp_memory_set_byte(imgB6->buffer->b,(imgB18 + ((i5 + (int)2) + offset)),val26);
            					}
            				}
HXLINE( 660)				{
HXLINE( 660)					int imgB19 = imgB6->byteOffset;
HXDLIN( 660)					::__hxcpp_memory_set_byte(imgB6->buffer->b,(imgB19 + ((i5 + (int)3) + offset)),a2);
            				}
HXLINE( 661)				i5 = (i5 - (int)4);
            			}
HXLINE( 663)			{
HXLINE( 663)				int _g16 = (int)0;
HXDLIN( 663)				int _g8 = offset;
HXDLIN( 663)				while((_g16 < _g8)){
HXLINE( 663)					_g16 = (_g16 + (int)1);
HXDLIN( 663)					int i7 = (_g16 - (int)1);
HXLINE( 664)					::__hxcpp_memory_set_byte(imgB6->buffer->b,(imgB6->byteOffset + i7),(int)0);
            				}
            			}
            		}
HXLINE( 667)		image->dirty = true;
HXLINE( 668)		image->version++;
HXLINE( 669)		sourceImage->dirty = true;
HXLINE( 670)		sourceImage->version++;
HXLINE( 672)		if (hx::IsEq( imgB6,image->get_data() )) {
HXLINE( 672)			return image;
            		}
HXLINE( 673)		return sourceImage;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,gaussianBlur,return )

 ::lime::math::Rectangle ImageDataUtil_obj::getColorBoundsRect( ::lime::graphics::Image image,int mask,int color,hx::Null< bool >  __o_findColor,int format){
bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_678_getColorBoundsRect)
HXLINE( 680)		int left = (image->width + (int)1);
HXLINE( 681)		int right = (int)0;
HXLINE( 682)		int top = (image->height + (int)1);
HXLINE( 683)		int bottom = (int)0;
HXLINE( 685)		int _color;
HXDLIN( 685)		int _mask;
HXLINE( 687)		switch((int)(format)){
            			case (int)1: {
HXLINE( 691)				int argb = color;
HXDLIN( 691)				int this1 = (int)0;
HXDLIN( 691)				int rgba = this1;
HXDLIN( 691)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 691)				_color = rgba;
HXLINE( 692)				int argb1 = mask;
HXDLIN( 692)				int this2 = (int)0;
HXDLIN( 692)				int rgba1 = this2;
HXDLIN( 692)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb1,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 692)				_mask = rgba1;
            			}
            			break;
            			case (int)2: {
HXLINE( 696)				int bgra = color;
HXDLIN( 696)				int this3 = (int)0;
HXDLIN( 696)				int rgba2 = this3;
HXDLIN( 696)				rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 696)				_color = rgba2;
HXLINE( 697)				int bgra1 = mask;
HXDLIN( 697)				int this4 = (int)0;
HXDLIN( 697)				int rgba3 = this4;
HXDLIN( 697)				rgba3 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN( 697)				_mask = rgba3;
            			}
            			break;
            			default:{
HXLINE( 701)				_color = color;
HXLINE( 702)				_mask = mask;
            			}
            		}
HXLINE( 706)		if (!(image->get_transparent())) {
HXLINE( 708)			_color = ((int)((int)((int)((int)((int)((int)hx::UShr(_color,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(_color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(_color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 709)			_mask = ((int)((int)((int)((int)((int)((int)hx::UShr(_mask,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(_mask,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(_mask,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE( 713)		int pixel;
HXDLIN( 713)		bool hit;
HXLINE( 715)		{
HXLINE( 715)			int _g1 = (int)0;
HXDLIN( 715)			int _g = image->width;
HXDLIN( 715)			while((_g1 < _g)){
HXLINE( 715)				_g1 = (_g1 + (int)1);
HXDLIN( 715)				int x = (_g1 - (int)1);
HXLINE( 717)				hit = false;
HXLINE( 719)				{
HXLINE( 719)					int _g3 = (int)0;
HXDLIN( 719)					int _g2 = image->height;
HXDLIN( 719)					while((_g3 < _g2)){
HXLINE( 719)						_g3 = (_g3 + (int)1);
HXDLIN( 719)						int y = (_g3 - (int)1);
HXLINE( 721)						pixel = image->getPixel32(x,y,(int)0);
HXLINE( 722)						if (findColor) {
HXLINE( 722)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 722)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 724)						if (hit) {
HXLINE( 726)							if ((x < left)) {
HXLINE( 726)								left = x;
            							}
HXLINE( 727)							goto _hx_goto_48;
            						}
            					}
            					_hx_goto_48:;
            				}
HXLINE( 733)				if (hit) {
HXLINE( 735)					goto _hx_goto_47;
            				}
            			}
            			_hx_goto_47:;
            		}
HXLINE( 741)		int ix;
HXLINE( 743)		{
HXLINE( 743)			int _g11 = (int)0;
HXDLIN( 743)			int _g4 = image->width;
HXDLIN( 743)			while((_g11 < _g4)){
HXLINE( 743)				_g11 = (_g11 + (int)1);
HXDLIN( 743)				int x1 = (_g11 - (int)1);
HXLINE( 745)				ix = ((image->width - (int)1) - x1);
HXLINE( 746)				hit = false;
HXLINE( 748)				{
HXLINE( 748)					int _g31 = (int)0;
HXDLIN( 748)					int _g21 = image->height;
HXDLIN( 748)					while((_g31 < _g21)){
HXLINE( 748)						_g31 = (_g31 + (int)1);
HXDLIN( 748)						int y1 = (_g31 - (int)1);
HXLINE( 750)						pixel = image->getPixel32(ix,y1,(int)0);
HXLINE( 751)						if (findColor) {
HXLINE( 751)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 751)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 753)						if (hit) {
HXLINE( 755)							if ((ix > right)) {
HXLINE( 755)								right = ix;
            							}
HXLINE( 756)							goto _hx_goto_50;
            						}
            					}
            					_hx_goto_50:;
            				}
HXLINE( 762)				if (hit) {
HXLINE( 764)					goto _hx_goto_49;
            				}
            			}
            			_hx_goto_49:;
            		}
HXLINE( 770)		{
HXLINE( 770)			int _g12 = (int)0;
HXDLIN( 770)			int _g5 = image->height;
HXDLIN( 770)			while((_g12 < _g5)){
HXLINE( 770)				_g12 = (_g12 + (int)1);
HXDLIN( 770)				int y2 = (_g12 - (int)1);
HXLINE( 772)				hit = false;
HXLINE( 774)				{
HXLINE( 774)					int _g32 = (int)0;
HXDLIN( 774)					int _g22 = image->width;
HXDLIN( 774)					while((_g32 < _g22)){
HXLINE( 774)						_g32 = (_g32 + (int)1);
HXDLIN( 774)						int x2 = (_g32 - (int)1);
HXLINE( 776)						pixel = image->getPixel32(x2,y2,(int)0);
HXLINE( 777)						if (findColor) {
HXLINE( 777)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 777)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 779)						if (hit) {
HXLINE( 781)							if ((y2 < top)) {
HXLINE( 781)								top = y2;
            							}
HXLINE( 782)							goto _hx_goto_52;
            						}
            					}
            					_hx_goto_52:;
            				}
HXLINE( 788)				if (hit) {
HXLINE( 790)					goto _hx_goto_51;
            				}
            			}
            			_hx_goto_51:;
            		}
HXLINE( 796)		int iy;
HXLINE( 798)		{
HXLINE( 798)			int _g13 = (int)0;
HXDLIN( 798)			int _g6 = image->height;
HXDLIN( 798)			while((_g13 < _g6)){
HXLINE( 798)				_g13 = (_g13 + (int)1);
HXDLIN( 798)				int y3 = (_g13 - (int)1);
HXLINE( 800)				iy = ((image->height - (int)1) - y3);
HXLINE( 801)				hit = false;
HXLINE( 803)				{
HXLINE( 803)					int _g33 = (int)0;
HXDLIN( 803)					int _g23 = image->width;
HXDLIN( 803)					while((_g33 < _g23)){
HXLINE( 803)						_g33 = (_g33 + (int)1);
HXDLIN( 803)						int x3 = (_g33 - (int)1);
HXLINE( 805)						pixel = image->getPixel32(x3,iy,(int)0);
HXLINE( 806)						if (findColor) {
HXLINE( 806)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 806)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 808)						if (hit) {
HXLINE( 810)							if ((iy > bottom)) {
HXLINE( 810)								bottom = iy;
            							}
HXLINE( 811)							goto _hx_goto_54;
            						}
            					}
            					_hx_goto_54:;
            				}
HXLINE( 817)				if (hit) {
HXLINE( 819)					goto _hx_goto_53;
            				}
            			}
            			_hx_goto_53:;
            		}
HXLINE( 825)		int w = (right - left);
HXLINE( 826)		int h = (bottom - top);
HXLINE( 828)		if ((w > (int)0)) {
HXLINE( 828)			w = (w + (int)1);
            		}
HXLINE( 829)		if ((h > (int)0)) {
HXLINE( 829)			h = (h + (int)1);
            		}
HXLINE( 831)		if ((w < (int)0)) {
HXLINE( 831)			w = (int)0;
            		}
HXLINE( 832)		if ((h < (int)0)) {
HXLINE( 832)			h = (int)0;
            		}
HXLINE( 834)		if ((left == right)) {
HXLINE( 834)			w = (int)1;
            		}
HXLINE( 835)		if ((top == bottom)) {
HXLINE( 835)			h = (int)1;
            		}
HXLINE( 837)		if ((left > image->width)) {
HXLINE( 837)			left = (int)0;
            		}
HXLINE( 838)		if ((top > image->height)) {
HXLINE( 838)			top = (int)0;
            		}
HXLINE( 840)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,left,top,w,h);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,getColorBoundsRect,return )

int ImageDataUtil_obj::getPixel( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_845_getPixel)
HXLINE( 847)		int pixel;
HXLINE( 849)		{
HXLINE( 849)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 849)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN( 849)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN( 849)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 849)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 849)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 849)					int data1 = data->byteOffset;
HXDLIN( 849)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 849)					int data2 = data->byteOffset;
HXDLIN( 849)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 849)					int data3 = data->byteOffset;
HXDLIN( 849)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 849)					int data4 = data->byteOffset;
HXDLIN( 849)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 849)					int data5 = data->byteOffset;
HXDLIN( 849)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 849)					int data6 = data->byteOffset;
HXDLIN( 849)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN( 849)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 849)					int data7 = data->byteOffset;
HXDLIN( 849)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 849)					int data8 = data->byteOffset;
HXDLIN( 849)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 849)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 849)					int data9 = data->byteOffset;
HXDLIN( 849)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 849)			if (premultiplied) {
HXLINE( 849)				bool _hx_tmp;
HXDLIN( 849)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 849)					_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 849)					_hx_tmp = false;
            				}
HXDLIN( 849)				if (_hx_tmp) {
HXLINE( 849)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 849)					{
HXLINE( 849)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 849)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 849)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 849)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 849)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 849)						pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 850)		pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)0);
HXLINE( 852)		switch((int)(format)){
            			case (int)1: {
HXLINE( 854)				int this4 = (int)0;
HXDLIN( 854)				int argb = this4;
HXDLIN( 854)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 854)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 855)				int this5 = (int)0;
HXDLIN( 855)				int bgra = this5;
HXDLIN( 855)				bgra = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 855)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 856)				return pixel;
            			}
            		}
HXLINE( 852)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel,return )

int ImageDataUtil_obj::getPixel32( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_863_getPixel32)
HXLINE( 865)		int pixel;
HXLINE( 867)		{
HXLINE( 867)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 867)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN( 867)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN( 867)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 867)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 867)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 867)					int data1 = data->byteOffset;
HXDLIN( 867)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 867)					int data2 = data->byteOffset;
HXDLIN( 867)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 867)					int data3 = data->byteOffset;
HXDLIN( 867)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 867)					int data4 = data->byteOffset;
HXDLIN( 867)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 867)					int data5 = data->byteOffset;
HXDLIN( 867)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 867)					int data6 = data->byteOffset;
HXDLIN( 867)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN( 867)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 867)					int data7 = data->byteOffset;
HXDLIN( 867)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 867)					int data8 = data->byteOffset;
HXDLIN( 867)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 867)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 867)					int data9 = data->byteOffset;
HXDLIN( 867)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 867)			if (premultiplied) {
HXLINE( 867)				bool _hx_tmp;
HXDLIN( 867)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 867)					_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 867)					_hx_tmp = false;
            				}
HXDLIN( 867)				if (_hx_tmp) {
HXLINE( 867)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 867)					{
HXLINE( 867)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 867)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 867)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 867)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 867)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 867)						pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 869)		switch((int)(format)){
            			case (int)1: {
HXLINE( 871)				int this4 = (int)0;
HXDLIN( 871)				int argb = this4;
HXDLIN( 871)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 871)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 872)				int this5 = (int)0;
HXDLIN( 872)				int bgra = this5;
HXDLIN( 872)				bgra = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 872)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 873)				return pixel;
            			}
            		}
HXLINE( 869)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel32,return )

 ::haxe::io::Bytes ImageDataUtil_obj::getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_880_getPixels)
HXLINE( 882)		if (hx::IsNull( image->buffer->data )) {
HXLINE( 882)			return null();
            		}
HXLINE( 884)		int length = ::Std_obj::_hx_int((rect->width * rect->height));
HXLINE( 885)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((length * (int)4));
HXLINE( 888)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 888)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_get_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),format,hx::DynamicPtr(bytes));
            		}
            		else {
HXLINE( 892)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 893)			int sourceFormat = image->buffer->format;
HXLINE( 894)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 896)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView dataView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 897)			int position;
HXDLIN( 897)			int argb;
HXDLIN( 897)			int bgra;
HXDLIN( 897)			int pixel;
HXLINE( 898)			int destPosition = (int)0;
HXLINE( 900)			{
HXLINE( 900)				int _g1 = (int)0;
HXDLIN( 900)				int _g = dataView->height;
HXDLIN( 900)				while((_g1 < _g)){
HXLINE( 900)					_g1 = (_g1 + (int)1);
HXDLIN( 900)					int y = (_g1 - (int)1);
HXLINE( 902)					int dataView1 = dataView->byteOffset;
HXDLIN( 902)					position = (dataView1 + (dataView->stride * y));
HXLINE( 904)					{
HXLINE( 904)						int _g3 = (int)0;
HXDLIN( 904)						int _g2 = dataView->width;
HXDLIN( 904)						while((_g3 < _g2)){
HXLINE( 904)							_g3 = (_g3 + (int)1);
HXDLIN( 904)							int x = (_g3 - (int)1);
HXLINE( 906)							{
HXLINE( 906)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 906)										int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255);
HXDLIN( 906)										int data1 = data->byteOffset;
HXDLIN( 906)										int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (position + (int)1))) & (int)(int)255);
HXDLIN( 906)										int data2 = data->byteOffset;
HXDLIN( 906)										int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (position + (int)2))) & (int)(int)255);
HXDLIN( 906)										int data3 = data->byteOffset;
HXDLIN( 906)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (position + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 906)										int data4 = data->byteOffset;
HXDLIN( 906)										int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (position + (int)1))) & (int)(int)255);
HXDLIN( 906)										int data5 = data->byteOffset;
HXDLIN( 906)										int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (position + (int)2))) & (int)(int)255);
HXDLIN( 906)										int data6 = data->byteOffset;
HXDLIN( 906)										int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (position + (int)3))) & (int)(int)255);
HXDLIN( 906)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 906)										int data7 = data->byteOffset;
HXDLIN( 906)										int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (position + (int)2))) & (int)(int)255);
HXDLIN( 906)										int data8 = data->byteOffset;
HXDLIN( 906)										int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (position + (int)1))) & (int)(int)255);
HXDLIN( 906)										int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255);
HXDLIN( 906)										int data9 = data->byteOffset;
HXDLIN( 906)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (position + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 906)								if (premultiplied) {
HXLINE( 906)									bool _hx_tmp;
HXDLIN( 906)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 906)										_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 906)										_hx_tmp = false;
            									}
HXDLIN( 906)									if (_hx_tmp) {
HXLINE( 906)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 906)										{
HXLINE( 906)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 906)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 906)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 906)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 906)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 906)											pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 908)							switch((int)(format)){
            								case (int)1: {
HXLINE( 910)									int this4 = (int)0;
HXDLIN( 910)									int argb1 = this4;
HXDLIN( 910)									argb1 = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 910)									argb = argb1;
HXDLIN( 910)									pixel = argb;
            								}
            								break;
            								case (int)2: {
HXLINE( 911)									int this5 = (int)0;
HXDLIN( 911)									int bgra1 = this5;
HXDLIN( 911)									bgra1 = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 911)									bgra = bgra1;
HXDLIN( 911)									pixel = bgra;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 916)							{
HXLINE( 916)								destPosition = (destPosition + (int)1);
HXDLIN( 916)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
            							}
HXLINE( 917)							{
HXLINE( 917)								destPosition = (destPosition + (int)1);
HXDLIN( 917)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
            							}
HXLINE( 918)							{
HXLINE( 918)								destPosition = (destPosition + (int)1);
HXDLIN( 918)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
            							}
HXLINE( 919)							{
HXLINE( 919)								destPosition = (destPosition + (int)1);
HXDLIN( 919)								bytes->b[(destPosition - (int)1)] = ((int)pixel & (int)(int)255);
            							}
HXLINE( 921)							position = (position + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 929)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,getPixels,return )

void ImageDataUtil_obj::merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_934_merge)
HXLINE( 936)		bool _hx_tmp;
HXDLIN( 936)		if (hx::IsNotNull( image->buffer->data )) {
HXLINE( 936)			_hx_tmp = hx::IsNull( sourceImage->buffer->data );
            		}
            		else {
HXLINE( 936)			_hx_tmp = true;
            		}
HXDLIN( 936)		if (_hx_tmp) {
HXLINE( 936)			return;
            		}
HXLINE( 939)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 939)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_merge(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            		}
            		else {
HXLINE( 943)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView sourceView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 944)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView destView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE( 946)			 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 947)			 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 948)			int sourceFormat = sourceImage->buffer->format;
HXLINE( 949)			int destFormat = image->buffer->format;
HXLINE( 950)			bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 951)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 953)			int sourcePosition;
HXDLIN( 953)			int destPosition;
HXDLIN( 953)			int sourcePixel;
HXDLIN( 953)			int destPixel;
HXLINE( 955)			{
HXLINE( 955)				int _g1 = (int)0;
HXDLIN( 955)				int _g = destView->height;
HXDLIN( 955)				while((_g1 < _g)){
HXLINE( 955)					_g1 = (_g1 + (int)1);
HXDLIN( 955)					int y = (_g1 - (int)1);
HXLINE( 957)					int sourceView1 = sourceView->byteOffset;
HXDLIN( 957)					sourcePosition = (sourceView1 + (sourceView->stride * y));
HXLINE( 958)					int destView1 = destView->byteOffset;
HXDLIN( 958)					destPosition = (destView1 + (destView->stride * y));
HXLINE( 960)					{
HXLINE( 960)						int _g3 = (int)0;
HXDLIN( 960)						int _g2 = destView->width;
HXDLIN( 960)						while((_g3 < _g2)){
HXLINE( 960)							_g3 = (_g3 + (int)1);
HXDLIN( 960)							int x = (_g3 - (int)1);
HXLINE( 962)							{
HXLINE( 962)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 962)										int r = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 962)										int sourceData1 = sourceData->byteOffset;
HXDLIN( 962)										int g = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData1 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 962)										int sourceData2 = sourceData->byteOffset;
HXDLIN( 962)										int b = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData2 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 962)										int sourceData3 = sourceData->byteOffset;
HXDLIN( 962)										sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData3 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 962)										int sourceData4 = sourceData->byteOffset;
HXDLIN( 962)										int r1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData4 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 962)										int sourceData5 = sourceData->byteOffset;
HXDLIN( 962)										int g1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData5 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 962)										int sourceData6 = sourceData->byteOffset;
HXDLIN( 962)										int b1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData6 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 962)										sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 962)										int sourceData7 = sourceData->byteOffset;
HXDLIN( 962)										int r2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData7 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 962)										int sourceData8 = sourceData->byteOffset;
HXDLIN( 962)										int g2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData8 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 962)										int b2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 962)										int sourceData9 = sourceData->byteOffset;
HXDLIN( 962)										sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData9 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 962)								if (sourcePremultiplied) {
HXLINE( 962)									bool _hx_tmp1;
HXDLIN( 962)									if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 962)										_hx_tmp1 = (((int)sourcePixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 962)										_hx_tmp1 = false;
            									}
HXDLIN( 962)									if (_hx_tmp1) {
HXLINE( 962)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 962)										{
HXLINE( 962)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 962)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 962)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 962)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 962)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 962)											sourcePixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 963)							{
HXLINE( 963)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 963)										int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 963)										int destData1 = destData->byteOffset;
HXDLIN( 963)										int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 963)										int destData2 = destData->byteOffset;
HXDLIN( 963)										int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 963)										int destData3 = destData->byteOffset;
HXDLIN( 963)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 963)										int destData4 = destData->byteOffset;
HXDLIN( 963)										int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 963)										int destData5 = destData->byteOffset;
HXDLIN( 963)										int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 963)										int destData6 = destData->byteOffset;
HXDLIN( 963)										int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 963)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 963)										int destData7 = destData->byteOffset;
HXDLIN( 963)										int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 963)										int destData8 = destData->byteOffset;
HXDLIN( 963)										int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 963)										int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 963)										int destData9 = destData->byteOffset;
HXDLIN( 963)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 963)								if (destPremultiplied) {
HXLINE( 963)									bool _hx_tmp2;
HXDLIN( 963)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 963)										_hx_tmp2 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 963)										_hx_tmp2 = false;
            									}
HXDLIN( 963)									if (_hx_tmp2) {
HXLINE( 963)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 963)										{
HXLINE( 963)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 963)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 963)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 963)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 963)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 963)											destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 965)							{
HXLINE( 965)								int value = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * redMultiplier) + (((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ((int)256 - redMultiplier))) / (Float)(int)256));
HXDLIN( 965)								destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 966)							{
HXLINE( 966)								int value1 = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * greenMultiplier) + (((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ((int)256 - greenMultiplier))) / (Float)(int)256));
HXDLIN( 966)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 967)							{
HXLINE( 967)								int value2 = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * blueMultiplier) + (((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ((int)256 - blueMultiplier))) / (Float)(int)256));
HXDLIN( 967)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 968)							{
HXLINE( 968)								int value3 = ::Std_obj::_hx_int(((Float)((((int)sourcePixel & (int)(int)255) * alphaMultiplier) + (((int)destPixel & (int)(int)255) * ((int)256 - alphaMultiplier))) / (Float)(int)256));
HXDLIN( 968)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value3 & (int)(int)255));
            							}
HXLINE( 970)							{
HXLINE( 970)								if (destPremultiplied) {
HXLINE( 970)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 970)										if ((destPixel != (int)0)) {
HXLINE( 970)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 970)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 970)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 970)											int this8 = this7->byteOffset;
HXDLIN( 970)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 970)											destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 970)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 970)										{
HXLINE( 970)											int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 970)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 970)										{
HXLINE( 970)											int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 970)											{
HXLINE( 970)												int destData10 = destData->byteOffset;
HXDLIN( 970)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            											}
            										}
HXDLIN( 970)										{
HXLINE( 970)											int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 970)											{
HXLINE( 970)												int destData11 = destData->byteOffset;
HXDLIN( 970)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            											}
            										}
HXDLIN( 970)										{
HXLINE( 970)											int val3 = ((int)destPixel & (int)(int)255);
HXDLIN( 970)											{
HXLINE( 970)												int destData12 = destData->byteOffset;
HXDLIN( 970)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 970)										{
HXLINE( 970)											int val4 = ((int)destPixel & (int)(int)255);
HXDLIN( 970)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 970)										{
HXLINE( 970)											int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 970)											{
HXLINE( 970)												int destData13 = destData->byteOffset;
HXDLIN( 970)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            											}
            										}
HXDLIN( 970)										{
HXLINE( 970)											int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 970)											{
HXLINE( 970)												int destData14 = destData->byteOffset;
HXDLIN( 970)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            											}
            										}
HXDLIN( 970)										{
HXLINE( 970)											int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 970)											{
HXLINE( 970)												int destData15 = destData->byteOffset;
HXDLIN( 970)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 970)										{
HXLINE( 970)											int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 970)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 970)										{
HXLINE( 970)											int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 970)											{
HXLINE( 970)												int destData16 = destData->byteOffset;
HXDLIN( 970)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            											}
            										}
HXDLIN( 970)										{
HXLINE( 970)											int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 970)											{
HXLINE( 970)												int destData17 = destData->byteOffset;
HXDLIN( 970)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            											}
            										}
HXDLIN( 970)										{
HXLINE( 970)											int val11 = ((int)destPixel & (int)(int)255);
HXDLIN( 970)											{
HXLINE( 970)												int destData18 = destData->byteOffset;
HXDLIN( 970)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 972)							sourcePosition = (sourcePosition + (int)4);
HXLINE( 973)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 981)		image->dirty = true;
HXLINE( 982)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,merge,(void))

void ImageDataUtil_obj::multiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_987_multiplyAlpha)
HXLINE( 989)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 990)		bool _hx_tmp;
HXDLIN( 990)		if (hx::IsNotNull( data )) {
HXLINE( 990)			_hx_tmp = !(image->buffer->transparent);
            		}
            		else {
HXLINE( 990)			_hx_tmp = true;
            		}
HXDLIN( 990)		if (_hx_tmp) {
HXLINE( 990)			return;
            		}
HXLINE( 993)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 993)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_multiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE( 997)			int format = image->buffer->format;
HXLINE( 998)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE( 999)			int pixel;
HXLINE(1001)			{
HXLINE(1001)				int _g1 = (int)0;
HXDLIN(1001)				int _g = length;
HXDLIN(1001)				while((_g1 < _g)){
HXLINE(1001)					_g1 = (_g1 + (int)1);
HXDLIN(1001)					int i = (_g1 - (int)1);
HXLINE(1003)					{
HXLINE(1003)						int offset = (i * (int)4);
HXDLIN(1003)						switch((int)(format)){
            							case (int)0: {
HXLINE(1003)								int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1003)								int data1 = data->byteOffset;
HXDLIN(1003)								int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1003)								int data2 = data->byteOffset;
HXDLIN(1003)								int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1003)								int data3 = data->byteOffset;
HXDLIN(1003)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE(1003)								int data4 = data->byteOffset;
HXDLIN(1003)								int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1003)								int data5 = data->byteOffset;
HXDLIN(1003)								int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1003)								int data6 = data->byteOffset;
HXDLIN(1003)								int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN(1003)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE(1003)								int data7 = data->byteOffset;
HXDLIN(1003)								int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1003)								int data8 = data->byteOffset;
HXDLIN(1003)								int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1003)								int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1003)								int data9 = data->byteOffset;
HXDLIN(1003)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
            					}
HXLINE(1004)					{
HXLINE(1004)						int offset1 = (i * (int)4);
HXDLIN(1004)						if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1004)							if ((pixel != (int)0)) {
HXLINE(1004)								pixel = (int)0;
            							}
            						}
            						else {
HXLINE(1004)							if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1004)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1004)								int this2 = this1->byteOffset;
HXDLIN(1004)								::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this1->buffer->b,(this2 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1004)								pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            							}
            						}
HXDLIN(1004)						switch((int)(format)){
            							case (int)0: {
HXLINE(1004)								{
HXLINE(1004)									int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1004)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1004)								{
HXLINE(1004)									int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1004)									{
HXLINE(1004)										int data10 = data->byteOffset;
HXDLIN(1004)										::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset1 + (int)1)),val1);
            									}
            								}
HXDLIN(1004)								{
HXLINE(1004)									int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1004)									{
HXLINE(1004)										int data11 = data->byteOffset;
HXDLIN(1004)										::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset1 + (int)2)),val2);
            									}
            								}
HXDLIN(1004)								{
HXLINE(1004)									int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1004)									{
HXLINE(1004)										int data12 = data->byteOffset;
HXDLIN(1004)										::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset1 + (int)3)),val3);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1004)								{
HXLINE(1004)									int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1004)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN(1004)								{
HXLINE(1004)									int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1004)									{
HXLINE(1004)										int data13 = data->byteOffset;
HXDLIN(1004)										::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset1 + (int)1)),val5);
            									}
            								}
HXDLIN(1004)								{
HXLINE(1004)									int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1004)									{
HXLINE(1004)										int data14 = data->byteOffset;
HXDLIN(1004)										::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset1 + (int)2)),val6);
            									}
            								}
HXDLIN(1004)								{
HXLINE(1004)									int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1004)									{
HXLINE(1004)										int data15 = data->byteOffset;
HXDLIN(1004)										::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset1 + (int)3)),val7);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1004)								{
HXLINE(1004)									int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1004)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN(1004)								{
HXLINE(1004)									int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1004)									{
HXLINE(1004)										int data16 = data->byteOffset;
HXDLIN(1004)										::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset1 + (int)1)),val9);
            									}
            								}
HXDLIN(1004)								{
HXLINE(1004)									int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1004)									{
HXLINE(1004)										int data17 = data->byteOffset;
HXDLIN(1004)										::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset1 + (int)2)),val10);
            									}
            								}
HXDLIN(1004)								{
HXLINE(1004)									int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1004)									{
HXLINE(1004)										int data18 = data->byteOffset;
HXDLIN(1004)										::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset1 + (int)3)),val11);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1010)		image->buffer->premultiplied = true;
HXLINE(1011)		image->dirty = true;
HXLINE(1012)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,multiplyAlpha,(void))

void ImageDataUtil_obj::resize( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1017_resize)
HXLINE(1019)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE(1020)		bool _hx_tmp;
HXDLIN(1020)		if ((buffer->width == newWidth)) {
HXLINE(1020)			_hx_tmp = (buffer->height == newHeight);
            		}
            		else {
HXLINE(1020)			_hx_tmp = false;
            		}
HXDLIN(1020)		if (_hx_tmp) {
HXLINE(1020)			return;
            		}
HXLINE(1021)		 ::Dynamic elements = ((newWidth * newHeight) * (int)4);
HXDLIN(1021)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(1021)		if (hx::IsNotNull( elements )) {
HXLINE(1021)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            		}
            		else {
HXLINE(1021)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(1021)		 ::lime::graphics::ImageBuffer newBuffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,newWidth,newHeight,null(),null());
HXLINE(1024)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1024)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_resize(hx::DynamicPtr(image),hx::DynamicPtr(newBuffer),newWidth,newHeight);
            		}
            		else {
HXLINE(1028)			int imageWidth = image->width;
HXLINE(1029)			int imageHeight = image->height;
HXLINE(1031)			 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE(1032)			 ::lime::utils::ArrayBufferView newData = newBuffer->data;
HXLINE(1033)			int sourceIndex;
HXDLIN(1033)			int sourceIndexX;
HXDLIN(1033)			int sourceIndexY;
HXDLIN(1033)			int sourceIndexXY;
HXDLIN(1033)			int index;
HXLINE(1034)			int sourceX;
HXDLIN(1034)			int sourceY;
HXLINE(1035)			Float u;
HXDLIN(1035)			Float v;
HXDLIN(1035)			Float uRatio;
HXDLIN(1035)			Float vRatio;
HXDLIN(1035)			Float uOpposite;
HXDLIN(1035)			Float vOpposite;
HXLINE(1037)			{
HXLINE(1037)				int _g1 = (int)0;
HXDLIN(1037)				int _g = newHeight;
HXDLIN(1037)				while((_g1 < _g)){
HXLINE(1037)					_g1 = (_g1 + (int)1);
HXDLIN(1037)					int y = (_g1 - (int)1);
HXLINE(1039)					{
HXLINE(1039)						int _g3 = (int)0;
HXDLIN(1039)						int _g2 = newWidth;
HXDLIN(1039)						while((_g3 < _g2)){
HXLINE(1039)							_g3 = (_g3 + (int)1);
HXDLIN(1039)							int x = (_g3 - (int)1);
HXLINE(1043)							u = ((((Float)(x + ((Float)0.5)) / (Float)newWidth) * imageWidth) - ((Float)0.5));
HXLINE(1044)							v = ((((Float)(y + ((Float)0.5)) / (Float)newHeight) * imageHeight) - ((Float)0.5));
HXLINE(1046)							sourceX = ::Std_obj::_hx_int(u);
HXLINE(1047)							sourceY = ::Std_obj::_hx_int(v);
HXLINE(1049)							sourceIndex = (((sourceY * imageWidth) + sourceX) * (int)4);
HXLINE(1050)							if ((sourceX < (imageWidth - (int)1))) {
HXLINE(1050)								sourceIndexX = (sourceIndex + (int)4);
            							}
            							else {
HXLINE(1050)								sourceIndexX = sourceIndex;
            							}
HXLINE(1051)							if ((sourceY < (imageHeight - (int)1))) {
HXLINE(1051)								sourceIndexY = (sourceIndex + (imageWidth * (int)4));
            							}
            							else {
HXLINE(1051)								sourceIndexY = sourceIndex;
            							}
HXLINE(1052)							if ((sourceIndexX != sourceIndex)) {
HXLINE(1052)								sourceIndexXY = (sourceIndexY + (int)4);
            							}
            							else {
HXLINE(1052)								sourceIndexXY = sourceIndexY;
            							}
HXLINE(1054)							index = (((y * newWidth) + x) * (int)4);
HXLINE(1056)							uRatio = (u - sourceX);
HXLINE(1057)							vRatio = (v - sourceY);
HXLINE(1058)							uOpposite = ((int)1 - uRatio);
HXLINE(1059)							vOpposite = ((int)1 - vRatio);
HXLINE(1061)							{
HXLINE(1061)								int _hx_int = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & (int)(int)255);
HXDLIN(1061)								Float val;
HXDLIN(1061)								if ((_hx_int < (int)0)) {
HXLINE(1061)									val = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE(1061)									val = (_hx_int + ((Float)0.0));
            								}
HXDLIN(1061)								Float val1 = (val * uOpposite);
HXDLIN(1061)								int int1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexX)) & (int)(int)255);
HXDLIN(1061)								Float val2;
HXDLIN(1061)								if ((int1 < (int)0)) {
HXLINE(1061)									val2 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE(1061)									val2 = (int1 + ((Float)0.0));
            								}
HXDLIN(1061)								Float val3 = ((val1 + (val2 * uRatio)) * vOpposite);
HXDLIN(1061)								int int2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexY)) & (int)(int)255);
HXDLIN(1061)								Float val4;
HXDLIN(1061)								if ((int2 < (int)0)) {
HXLINE(1061)									val4 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE(1061)									val4 = (int2 + ((Float)0.0));
            								}
HXDLIN(1061)								Float val5 = (val4 * uOpposite);
HXDLIN(1061)								int int3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexXY)) & (int)(int)255);
HXDLIN(1061)								Float val6;
HXDLIN(1061)								if ((int3 < (int)0)) {
HXLINE(1061)									val6 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE(1061)									val6 = (int3 + ((Float)0.0));
            								}
HXDLIN(1061)								int val7 = ::Std_obj::_hx_int((val3 + ((val5 + (val6 * uRatio)) * vRatio)));
HXDLIN(1061)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val7);
            							}
HXLINE(1062)							{
HXLINE(1062)								int data1 = data->byteOffset;
HXDLIN(1062)								int int4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (sourceIndex + (int)1))) & (int)(int)255);
HXDLIN(1062)								Float val8;
HXDLIN(1062)								if ((int4 < (int)0)) {
HXLINE(1062)									val8 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE(1062)									val8 = (int4 + ((Float)0.0));
            								}
HXDLIN(1062)								Float val9 = (val8 * uOpposite);
HXDLIN(1062)								int data2 = data->byteOffset;
HXDLIN(1062)								int int5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (sourceIndexX + (int)1))) & (int)(int)255);
HXDLIN(1062)								Float val10;
HXDLIN(1062)								if ((int5 < (int)0)) {
HXLINE(1062)									val10 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE(1062)									val10 = (int5 + ((Float)0.0));
            								}
HXDLIN(1062)								Float val11 = ((val9 + (val10 * uRatio)) * vOpposite);
HXDLIN(1062)								int data3 = data->byteOffset;
HXDLIN(1062)								int int6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (sourceIndexY + (int)1))) & (int)(int)255);
HXDLIN(1062)								Float val12;
HXDLIN(1062)								if ((int6 < (int)0)) {
HXLINE(1062)									val12 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE(1062)									val12 = (int6 + ((Float)0.0));
            								}
HXDLIN(1062)								Float val13 = (val12 * uOpposite);
HXDLIN(1062)								int data4 = data->byteOffset;
HXDLIN(1062)								int int7 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (sourceIndexXY + (int)1))) & (int)(int)255);
HXDLIN(1062)								Float val14;
HXDLIN(1062)								if ((int7 < (int)0)) {
HXLINE(1062)									val14 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE(1062)									val14 = (int7 + ((Float)0.0));
            								}
HXDLIN(1062)								int val15 = ::Std_obj::_hx_int((val11 + ((val13 + (val14 * uRatio)) * vRatio)));
HXDLIN(1062)								{
HXLINE(1062)									int newData1 = newData->byteOffset;
HXDLIN(1062)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData1 + (index + (int)1)),val15);
            								}
            							}
HXLINE(1063)							{
HXLINE(1063)								int data5 = data->byteOffset;
HXDLIN(1063)								int int8 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (sourceIndex + (int)2))) & (int)(int)255);
HXDLIN(1063)								Float val16;
HXDLIN(1063)								if ((int8 < (int)0)) {
HXLINE(1063)									val16 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE(1063)									val16 = (int8 + ((Float)0.0));
            								}
HXDLIN(1063)								Float val17 = (val16 * uOpposite);
HXDLIN(1063)								int data6 = data->byteOffset;
HXDLIN(1063)								int int9 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (sourceIndexX + (int)2))) & (int)(int)255);
HXDLIN(1063)								Float val18;
HXDLIN(1063)								if ((int9 < (int)0)) {
HXLINE(1063)									val18 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE(1063)									val18 = (int9 + ((Float)0.0));
            								}
HXDLIN(1063)								Float val19 = ((val17 + (val18 * uRatio)) * vOpposite);
HXDLIN(1063)								int data7 = data->byteOffset;
HXDLIN(1063)								int int10 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (sourceIndexY + (int)2))) & (int)(int)255);
HXDLIN(1063)								Float val20;
HXDLIN(1063)								if ((int10 < (int)0)) {
HXLINE(1063)									val20 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE(1063)									val20 = (int10 + ((Float)0.0));
            								}
HXDLIN(1063)								Float val21 = (val20 * uOpposite);
HXDLIN(1063)								int data8 = data->byteOffset;
HXDLIN(1063)								int int11 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (sourceIndexXY + (int)2))) & (int)(int)255);
HXDLIN(1063)								Float val22;
HXDLIN(1063)								if ((int11 < (int)0)) {
HXLINE(1063)									val22 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE(1063)									val22 = (int11 + ((Float)0.0));
            								}
HXDLIN(1063)								int val23 = ::Std_obj::_hx_int((val19 + ((val21 + (val22 * uRatio)) * vRatio)));
HXDLIN(1063)								{
HXLINE(1063)									int newData2 = newData->byteOffset;
HXDLIN(1063)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData2 + (index + (int)2)),val23);
            								}
            							}
HXLINE(1067)							bool _hx_tmp1;
HXDLIN(1067)							bool _hx_tmp2;
HXDLIN(1067)							int data9 = data->byteOffset;
HXDLIN(1067)							if (hx::IsNotEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (sourceIndexX + (int)3))) & (int)(int)255),(int)0 )) {
HXLINE(1067)								int data10 = data->byteOffset;
HXDLIN(1067)								_hx_tmp2 = hx::IsEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data10 + (sourceIndexY + (int)3))) & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE(1067)								_hx_tmp2 = true;
            							}
HXDLIN(1067)							if (!(_hx_tmp2)) {
HXLINE(1067)								int data11 = data->byteOffset;
HXDLIN(1067)								_hx_tmp1 = hx::IsEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data11 + (sourceIndexXY + (int)3))) & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE(1067)								_hx_tmp1 = true;
            							}
HXDLIN(1067)							if (_hx_tmp1) {
HXLINE(1069)								int newData3 = newData->byteOffset;
HXDLIN(1069)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData3 + (index + (int)3)),(int)0);
            							}
            							else {
HXLINE(1073)								int data12 = data->byteOffset;
HXDLIN(1073)								int val24 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data12 + (sourceIndex + (int)3))) & (int)(int)255);
HXDLIN(1073)								{
HXLINE(1073)									int newData4 = newData->byteOffset;
HXDLIN(1073)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData4 + (index + (int)3)),val24);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1083)		buffer->data = newBuffer->data;
HXLINE(1084)		buffer->width = newWidth;
HXLINE(1085)		buffer->height = newHeight;
HXLINE(1094)		image->dirty = true;
HXLINE(1095)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resize,(void))

void ImageDataUtil_obj::resizeBuffer( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1100_resizeBuffer)
HXLINE(1102)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE(1103)		 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE(1104)		 ::Dynamic elements = ((newWidth * newHeight) * (int)4);
HXDLIN(1104)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(1104)		if (hx::IsNotNull( elements )) {
HXLINE(1104)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            		}
            		else {
HXLINE(1104)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(1104)		 ::lime::utils::ArrayBufferView newData = this1;
HXLINE(1105)		int sourceIndex;
HXDLIN(1105)		int index;
HXLINE(1107)		{
HXLINE(1107)			int _g1 = (int)0;
HXDLIN(1107)			int _g = buffer->height;
HXDLIN(1107)			while((_g1 < _g)){
HXLINE(1107)				_g1 = (_g1 + (int)1);
HXDLIN(1107)				int y = (_g1 - (int)1);
HXLINE(1109)				{
HXLINE(1109)					int _g3 = (int)0;
HXDLIN(1109)					int _g2 = buffer->width;
HXDLIN(1109)					while((_g3 < _g2)){
HXLINE(1109)						_g3 = (_g3 + (int)1);
HXDLIN(1109)						int x = (_g3 - (int)1);
HXLINE(1111)						sourceIndex = (((y * buffer->width) + x) * (int)4);
HXLINE(1112)						index = (((y * newWidth) + x) * (int)4);
HXLINE(1114)						{
HXLINE(1114)							int val = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & (int)(int)255);
HXDLIN(1114)							::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val);
            						}
HXLINE(1115)						{
HXLINE(1115)							int data1 = data->byteOffset;
HXDLIN(1115)							int val1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (sourceIndex + (int)1))) & (int)(int)255);
HXDLIN(1115)							{
HXLINE(1115)								int newData1 = newData->byteOffset;
HXDLIN(1115)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData1 + (index + (int)1)),val1);
            							}
            						}
HXLINE(1116)						{
HXLINE(1116)							int data2 = data->byteOffset;
HXDLIN(1116)							int val2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (sourceIndex + (int)2))) & (int)(int)255);
HXDLIN(1116)							{
HXLINE(1116)								int newData2 = newData->byteOffset;
HXDLIN(1116)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData2 + (index + (int)2)),val2);
            							}
            						}
HXLINE(1117)						{
HXLINE(1117)							int data3 = data->byteOffset;
HXDLIN(1117)							int val3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (sourceIndex + (int)3))) & (int)(int)255);
HXDLIN(1117)							{
HXLINE(1117)								int newData3 = newData->byteOffset;
HXDLIN(1117)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData3 + (index + (int)3)),val3);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1123)		buffer->data = newData;
HXLINE(1124)		buffer->width = newWidth;
HXLINE(1125)		buffer->height = newHeight;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resizeBuffer,(void))

void ImageDataUtil_obj::setFormat( ::lime::graphics::Image image,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1130_setFormat)
HXLINE(1132)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1133)		if (hx::IsNull( data )) {
HXLINE(1133)			return;
            		}
HXLINE(1136)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1136)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_set_format(hx::DynamicPtr(image),format);
            		}
            		else {
HXLINE(1140)			int index;
HXDLIN(1140)			 ::Dynamic a16;
HXLINE(1141)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE(1142)			int r1;
HXDLIN(1142)			int g1;
HXDLIN(1142)			int b1;
HXDLIN(1142)			int a1;
HXDLIN(1142)			int r2;
HXDLIN(1142)			int g2;
HXDLIN(1142)			int b2;
HXDLIN(1142)			int a2;
HXLINE(1143)			 ::Dynamic r;
HXDLIN(1143)			 ::Dynamic g;
HXDLIN(1143)			 ::Dynamic b;
HXDLIN(1143)			 ::Dynamic a;
HXLINE(1145)			{
HXLINE(1145)				int _g = image->get_format();
HXDLIN(1145)				switch((int)(_g)){
            					case (int)0: {
HXLINE(1149)						r1 = (int)0;
HXLINE(1150)						g1 = (int)1;
HXLINE(1151)						b1 = (int)2;
HXLINE(1152)						a1 = (int)3;
            					}
            					break;
            					case (int)1: {
HXLINE(1156)						r1 = (int)1;
HXLINE(1157)						g1 = (int)2;
HXLINE(1158)						b1 = (int)3;
HXLINE(1159)						a1 = (int)0;
            					}
            					break;
            					case (int)2: {
HXLINE(1163)						r1 = (int)2;
HXLINE(1164)						g1 = (int)1;
HXLINE(1165)						b1 = (int)0;
HXLINE(1166)						a1 = (int)3;
            					}
            					break;
            				}
            			}
HXLINE(1170)			switch((int)(format)){
            				case (int)0: {
HXLINE(1174)					r2 = (int)0;
HXLINE(1175)					g2 = (int)1;
HXLINE(1176)					b2 = (int)2;
HXLINE(1177)					a2 = (int)3;
            				}
            				break;
            				case (int)1: {
HXLINE(1181)					r2 = (int)1;
HXLINE(1182)					g2 = (int)2;
HXLINE(1183)					b2 = (int)3;
HXLINE(1184)					a2 = (int)0;
            				}
            				break;
            				case (int)2: {
HXLINE(1188)					r2 = (int)2;
HXLINE(1189)					g2 = (int)1;
HXLINE(1190)					b2 = (int)0;
HXLINE(1191)					a2 = (int)3;
            				}
            				break;
            			}
HXLINE(1195)			{
HXLINE(1195)				int _g2 = (int)0;
HXDLIN(1195)				int _g1 = length;
HXDLIN(1195)				while((_g2 < _g1)){
HXLINE(1195)					_g2 = (_g2 + (int)1);
HXDLIN(1195)					int i = (_g2 - (int)1);
HXLINE(1197)					index = (i * (int)4);
HXLINE(1199)					int data1 = data->byteOffset;
HXDLIN(1199)					r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (index + r1))) & (int)(int)255);
HXLINE(1200)					int data2 = data->byteOffset;
HXDLIN(1200)					g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (index + g1))) & (int)(int)255);
HXLINE(1201)					int data3 = data->byteOffset;
HXDLIN(1201)					b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (index + b1))) & (int)(int)255);
HXLINE(1202)					int data4 = data->byteOffset;
HXDLIN(1202)					a = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (index + a1))) & (int)(int)255);
HXLINE(1204)					{
HXLINE(1204)						int val = r;
HXDLIN(1204)						{
HXLINE(1204)							int data5 = data->byteOffset;
HXDLIN(1204)							::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (index + r2)),val);
            						}
            					}
HXLINE(1205)					{
HXLINE(1205)						int val1 = g;
HXDLIN(1205)						{
HXLINE(1205)							int data6 = data->byteOffset;
HXDLIN(1205)							::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (index + g2)),val1);
            						}
            					}
HXLINE(1206)					{
HXLINE(1206)						int val2 = b;
HXDLIN(1206)						{
HXLINE(1206)							int data7 = data->byteOffset;
HXDLIN(1206)							::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (index + b2)),val2);
            						}
            					}
HXLINE(1207)					{
HXLINE(1207)						int val3 = a;
HXDLIN(1207)						{
HXLINE(1207)							int data8 = data->byteOffset;
HXDLIN(1207)							::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (index + a2)),val3);
            						}
            					}
            				}
            			}
            		}
HXLINE(1213)		image->buffer->format = format;
HXLINE(1214)		image->dirty = true;
HXLINE(1215)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,setFormat,(void))

void ImageDataUtil_obj::setPixel( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1220_setPixel)
HXLINE(1222)		int pixel;
HXLINE(1224)		switch((int)(format)){
            			case (int)1: {
HXLINE(1226)				int argb = color;
HXDLIN(1226)				int this1 = (int)0;
HXDLIN(1226)				int rgba = this1;
HXDLIN(1226)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1226)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1227)				int bgra = color;
HXDLIN(1227)				int this2 = (int)0;
HXDLIN(1227)				int rgba1 = this2;
HXDLIN(1227)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1227)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1228)				pixel = color;
            			}
            		}
HXLINE(1234)		int this3 = (int)0;
HXDLIN(1234)		int source = this3;
HXLINE(1235)		{
HXLINE(1235)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1235)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1235)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN(1235)			bool premultiplied = image->buffer->premultiplied;
HXDLIN(1235)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE(1235)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN(1235)					int data1 = data->byteOffset;
HXDLIN(1235)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1235)					int data2 = data->byteOffset;
HXDLIN(1235)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1235)					int data3 = data->byteOffset;
HXDLIN(1235)					source = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE(1235)					int data4 = data->byteOffset;
HXDLIN(1235)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1235)					int data5 = data->byteOffset;
HXDLIN(1235)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1235)					int data6 = data->byteOffset;
HXDLIN(1235)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN(1235)					source = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE(1235)					int data7 = data->byteOffset;
HXDLIN(1235)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1235)					int data8 = data->byteOffset;
HXDLIN(1235)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1235)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN(1235)					int data9 = data->byteOffset;
HXDLIN(1235)					source = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN(1235)			if (premultiplied) {
HXLINE(1235)				bool _hx_tmp;
HXDLIN(1235)				if ((((int)source & (int)(int)255) != (int)0)) {
HXLINE(1235)					_hx_tmp = (((int)source & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE(1235)					_hx_tmp = false;
            				}
HXDLIN(1235)				if (_hx_tmp) {
HXLINE(1235)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)source & (int)(int)255));
HXDLIN(1235)					{
HXLINE(1235)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1235)						int r3 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1235)						 ::lime::utils::ArrayBufferView this5 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1235)						int g3 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1235)						 ::lime::utils::ArrayBufferView this6 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1235)						source = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)source & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE(1237)		{
HXLINE(1237)			int value = ((int)source & (int)(int)255);
HXDLIN(1237)			pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value & (int)(int)255));
            		}
HXLINE(1238)		{
HXLINE(1238)			 ::lime::utils::ArrayBufferView data10 = image->buffer->data;
HXDLIN(1238)			int offset2 = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1238)			int offset3 = (offset2 + ((x + image->offsetX) * (int)4));
HXDLIN(1238)			int format1 = image->buffer->format;
HXDLIN(1238)			if (image->buffer->premultiplied) {
HXLINE(1238)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1238)					if ((pixel != (int)0)) {
HXLINE(1238)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1238)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1238)						 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1238)						int this8 = this7->byteOffset;
HXDLIN(1238)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1238)						pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXDLIN(1238)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1238)					{
HXLINE(1238)						int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1238)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val);
            					}
HXDLIN(1238)					{
HXLINE(1238)						int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1238)						{
HXLINE(1238)							int data11 = data10->byteOffset;
HXDLIN(1238)							::__hxcpp_memory_set_byte(data10->buffer->b,(data11 + (offset3 + (int)1)),val1);
            						}
            					}
HXDLIN(1238)					{
HXLINE(1238)						int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1238)						{
HXLINE(1238)							int data12 = data10->byteOffset;
HXDLIN(1238)							::__hxcpp_memory_set_byte(data10->buffer->b,(data12 + (offset3 + (int)2)),val2);
            						}
            					}
HXDLIN(1238)					{
HXLINE(1238)						int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1238)						{
HXLINE(1238)							int data13 = data10->byteOffset;
HXDLIN(1238)							::__hxcpp_memory_set_byte(data10->buffer->b,(data13 + (offset3 + (int)3)),val3);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1238)					{
HXLINE(1238)						int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1238)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val4);
            					}
HXDLIN(1238)					{
HXLINE(1238)						int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1238)						{
HXLINE(1238)							int data14 = data10->byteOffset;
HXDLIN(1238)							::__hxcpp_memory_set_byte(data10->buffer->b,(data14 + (offset3 + (int)1)),val5);
            						}
            					}
HXDLIN(1238)					{
HXLINE(1238)						int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1238)						{
HXLINE(1238)							int data15 = data10->byteOffset;
HXDLIN(1238)							::__hxcpp_memory_set_byte(data10->buffer->b,(data15 + (offset3 + (int)2)),val6);
            						}
            					}
HXDLIN(1238)					{
HXLINE(1238)						int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1238)						{
HXLINE(1238)							int data16 = data10->byteOffset;
HXDLIN(1238)							::__hxcpp_memory_set_byte(data10->buffer->b,(data16 + (offset3 + (int)3)),val7);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1238)					{
HXLINE(1238)						int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1238)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val8);
            					}
HXDLIN(1238)					{
HXLINE(1238)						int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1238)						{
HXLINE(1238)							int data17 = data10->byteOffset;
HXDLIN(1238)							::__hxcpp_memory_set_byte(data10->buffer->b,(data17 + (offset3 + (int)1)),val9);
            						}
            					}
HXDLIN(1238)					{
HXLINE(1238)						int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1238)						{
HXLINE(1238)							int data18 = data10->byteOffset;
HXDLIN(1238)							::__hxcpp_memory_set_byte(data10->buffer->b,(data18 + (offset3 + (int)2)),val10);
            						}
            					}
HXDLIN(1238)					{
HXLINE(1238)						int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1238)						{
HXLINE(1238)							int data19 = data10->byteOffset;
HXDLIN(1238)							::__hxcpp_memory_set_byte(data10->buffer->b,(data19 + (offset3 + (int)3)),val11);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1240)		image->dirty = true;
HXLINE(1241)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel,(void))

void ImageDataUtil_obj::setPixel32( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1246_setPixel32)
HXLINE(1248)		int pixel;
HXLINE(1250)		switch((int)(format)){
            			case (int)1: {
HXLINE(1252)				int argb = color;
HXDLIN(1252)				int this1 = (int)0;
HXDLIN(1252)				int rgba = this1;
HXDLIN(1252)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1252)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1253)				int bgra = color;
HXDLIN(1253)				int this2 = (int)0;
HXDLIN(1253)				int rgba1 = this2;
HXDLIN(1253)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1253)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1254)				pixel = color;
            			}
            		}
HXLINE(1258)		if (!(image->get_transparent())) {
HXLINE(1258)			pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE(1259)		{
HXLINE(1259)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1259)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1259)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN(1259)			int format1 = image->buffer->format;
HXDLIN(1259)			if (image->buffer->premultiplied) {
HXLINE(1259)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1259)					if ((pixel != (int)0)) {
HXLINE(1259)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1259)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1259)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1259)						int this4 = this3->byteOffset;
HXDLIN(1259)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1259)						pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXDLIN(1259)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1259)					{
HXLINE(1259)						int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1259)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            					}
HXDLIN(1259)					{
HXLINE(1259)						int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1259)						{
HXLINE(1259)							int data1 = data->byteOffset;
HXDLIN(1259)							::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset1 + (int)1)),val1);
            						}
            					}
HXDLIN(1259)					{
HXLINE(1259)						int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1259)						{
HXLINE(1259)							int data2 = data->byteOffset;
HXDLIN(1259)							::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset1 + (int)2)),val2);
            						}
            					}
HXDLIN(1259)					{
HXLINE(1259)						int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1259)						{
HXLINE(1259)							int data3 = data->byteOffset;
HXDLIN(1259)							::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset1 + (int)3)),val3);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1259)					{
HXLINE(1259)						int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1259)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            					}
HXDLIN(1259)					{
HXLINE(1259)						int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1259)						{
HXLINE(1259)							int data4 = data->byteOffset;
HXDLIN(1259)							::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset1 + (int)1)),val5);
            						}
            					}
HXDLIN(1259)					{
HXLINE(1259)						int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1259)						{
HXLINE(1259)							int data5 = data->byteOffset;
HXDLIN(1259)							::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset1 + (int)2)),val6);
            						}
            					}
HXDLIN(1259)					{
HXLINE(1259)						int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1259)						{
HXLINE(1259)							int data6 = data->byteOffset;
HXDLIN(1259)							::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset1 + (int)3)),val7);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1259)					{
HXLINE(1259)						int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1259)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            					}
HXDLIN(1259)					{
HXLINE(1259)						int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1259)						{
HXLINE(1259)							int data7 = data->byteOffset;
HXDLIN(1259)							::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset1 + (int)1)),val9);
            						}
            					}
HXDLIN(1259)					{
HXLINE(1259)						int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1259)						{
HXLINE(1259)							int data8 = data->byteOffset;
HXDLIN(1259)							::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset1 + (int)2)),val10);
            						}
            					}
HXDLIN(1259)					{
HXLINE(1259)						int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1259)						{
HXLINE(1259)							int data9 = data->byteOffset;
HXDLIN(1259)							::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset1 + (int)3)),val11);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1261)		image->dirty = true;
HXLINE(1262)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel32,(void))

void ImageDataUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::BytePointerData bytePointer,int format, ::lime::_hx_system::Endian endian){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1267_setPixels)
HXLINE(1269)		if (hx::IsNull( image->buffer->data )) {
HXLINE(1269)			return;
            		}
HXLINE(1272)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1272)			int _hx_tmp;
HXDLIN(1272)			if (hx::IsEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() )) {
HXLINE(1272)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(1272)				_hx_tmp = (int)0;
            			}
HXDLIN(1272)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_set_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(bytePointer->bytes),bytePointer->offset,format,_hx_tmp);
            		}
            		else {
HXLINE(1276)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1277)			int sourceFormat = image->buffer->format;
HXLINE(1278)			bool premultiplied = image->buffer->premultiplied;
HXLINE(1279)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView dataView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(1280)			int row;
HXDLIN(1280)			int color;
HXDLIN(1280)			int pixel;
HXLINE(1281)			bool transparent = image->get_transparent();
HXLINE(1282)			 ::haxe::io::Bytes bytes = bytePointer->bytes;
HXLINE(1283)			int dataPosition = bytePointer->offset;
HXLINE(1284)			bool littleEndian = hx::IsNotEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() );
HXLINE(1286)			{
HXLINE(1286)				int _g1 = (int)0;
HXDLIN(1286)				int _g = dataView->height;
HXDLIN(1286)				while((_g1 < _g)){
HXLINE(1286)					_g1 = (_g1 + (int)1);
HXDLIN(1286)					int y = (_g1 - (int)1);
HXLINE(1288)					int dataView1 = dataView->byteOffset;
HXDLIN(1288)					row = (dataView1 + (dataView->stride * y));
HXLINE(1290)					{
HXLINE(1290)						int _g3 = (int)0;
HXDLIN(1290)						int _g2 = dataView->width;
HXDLIN(1290)						while((_g3 < _g2)){
HXLINE(1290)							_g3 = (_g3 + (int)1);
HXDLIN(1290)							int x = (_g3 - (int)1);
HXLINE(1292)							if (littleEndian) {
HXLINE(1294)								int bytes1 = bytes->b->__get(dataPosition);
HXDLIN(1294)								::Array< unsigned char > bytes2 = bytes->b;
HXDLIN(1294)								int color1 = ((int)bytes1 | (int)((int)bytes2->__get((dataPosition + (int)1)) << (int)(int)8));
HXDLIN(1294)								::Array< unsigned char > bytes3 = bytes->b;
HXDLIN(1294)								int color2 = ((int)color1 | (int)((int)bytes3->__get((dataPosition + (int)2)) << (int)(int)16));
HXDLIN(1294)								::Array< unsigned char > bytes4 = bytes->b;
HXDLIN(1294)								color = ((int)color2 | (int)((int)bytes4->__get((dataPosition + (int)3)) << (int)(int)24));
            							}
            							else {
HXLINE(1298)								::Array< unsigned char > bytes5 = bytes->b;
HXDLIN(1298)								int bytes6 = bytes5->__get((dataPosition + (int)3));
HXDLIN(1298)								::Array< unsigned char > bytes7 = bytes->b;
HXDLIN(1298)								int color3 = ((int)bytes6 | (int)((int)bytes7->__get((dataPosition + (int)2)) << (int)(int)8));
HXDLIN(1298)								::Array< unsigned char > bytes8 = bytes->b;
HXDLIN(1298)								int color4 = ((int)color3 | (int)((int)bytes8->__get((dataPosition + (int)1)) << (int)(int)16));
HXDLIN(1298)								color = ((int)color4 | (int)((int)bytes->b->__get(dataPosition) << (int)(int)24));
            							}
HXLINE(1302)							dataPosition = (dataPosition + (int)4);
HXLINE(1304)							switch((int)(format)){
            								case (int)1: {
HXLINE(1306)									int argb = color;
HXDLIN(1306)									int this1 = (int)0;
HXDLIN(1306)									int rgba = this1;
HXDLIN(1306)									rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1306)									pixel = rgba;
            								}
            								break;
            								case (int)2: {
HXLINE(1307)									int bgra = color;
HXDLIN(1307)									int this2 = (int)0;
HXDLIN(1307)									int rgba1 = this2;
HXDLIN(1307)									rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1307)									pixel = rgba1;
            								}
            								break;
            								default:{
HXLINE(1308)									pixel = color;
            								}
            							}
HXLINE(1312)							if (!(transparent)) {
HXLINE(1312)								pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            							}
HXLINE(1313)							{
HXLINE(1313)								int offset = (row + (x * (int)4));
HXDLIN(1313)								if (premultiplied) {
HXLINE(1313)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1313)										if ((pixel != (int)0)) {
HXLINE(1313)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE(1313)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1313)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1313)											int this4 = this3->byteOffset;
HXDLIN(1313)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1313)											pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN(1313)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE(1313)										{
HXLINE(1313)											int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1313)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(1313)										{
HXLINE(1313)											int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1313)											{
HXLINE(1313)												int data1 = data->byteOffset;
HXDLIN(1313)												::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN(1313)										{
HXLINE(1313)											int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1313)											{
HXLINE(1313)												int data2 = data->byteOffset;
HXDLIN(1313)												::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN(1313)										{
HXLINE(1313)											int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1313)											{
HXLINE(1313)												int data3 = data->byteOffset;
HXDLIN(1313)												::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(1313)										{
HXLINE(1313)											int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1313)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN(1313)										{
HXLINE(1313)											int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1313)											{
HXLINE(1313)												int data4 = data->byteOffset;
HXDLIN(1313)												::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN(1313)										{
HXLINE(1313)											int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1313)											{
HXLINE(1313)												int data5 = data->byteOffset;
HXDLIN(1313)												::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN(1313)										{
HXLINE(1313)											int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1313)											{
HXLINE(1313)												int data6 = data->byteOffset;
HXDLIN(1313)												::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(1313)										{
HXLINE(1313)											int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1313)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN(1313)										{
HXLINE(1313)											int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1313)											{
HXLINE(1313)												int data7 = data->byteOffset;
HXDLIN(1313)												::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN(1313)										{
HXLINE(1313)											int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1313)											{
HXLINE(1313)												int data8 = data->byteOffset;
HXDLIN(1313)												::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN(1313)										{
HXLINE(1313)											int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1313)											{
HXLINE(1313)												int data9 = data->byteOffset;
HXDLIN(1313)												::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1321)		image->dirty = true;
HXLINE(1322)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixels,(void))

int ImageDataUtil_obj::threshold( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,int threshold,int color,int mask,bool copySource,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1327_threshold)
HXLINE(1329)		int _color;
HXDLIN(1329)		int _mask;
HXDLIN(1329)		int _threshold;
HXLINE(1331)		switch((int)(format)){
            			case (int)1: {
HXLINE(1335)				int argb = color;
HXDLIN(1335)				int this1 = (int)0;
HXDLIN(1335)				int rgba = this1;
HXDLIN(1335)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1335)				_color = rgba;
HXLINE(1336)				int argb1 = mask;
HXDLIN(1336)				int this2 = (int)0;
HXDLIN(1336)				int rgba1 = this2;
HXDLIN(1336)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb1,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1336)				_mask = rgba1;
HXLINE(1337)				int argb2 = threshold;
HXDLIN(1337)				int this3 = (int)0;
HXDLIN(1337)				int rgba2 = this3;
HXDLIN(1337)				rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1337)				_threshold = rgba2;
            			}
            			break;
            			case (int)2: {
HXLINE(1341)				int bgra = color;
HXDLIN(1341)				int this4 = (int)0;
HXDLIN(1341)				int rgba3 = this4;
HXDLIN(1341)				rgba3 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1341)				_color = rgba3;
HXLINE(1342)				int bgra1 = mask;
HXDLIN(1342)				int this5 = (int)0;
HXDLIN(1342)				int rgba4 = this5;
HXDLIN(1342)				rgba4 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN(1342)				_mask = rgba4;
HXLINE(1343)				int bgra2 = threshold;
HXDLIN(1343)				int this6 = (int)0;
HXDLIN(1343)				int rgba5 = this6;
HXDLIN(1343)				rgba5 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra2,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra2 & (int)(int)255) & (int)(int)255));
HXDLIN(1343)				_threshold = rgba5;
            			}
            			break;
            			default:{
HXLINE(1347)				_color = color;
HXLINE(1348)				_mask = mask;
HXLINE(1349)				_threshold = threshold;
            			}
            		}
HXLINE(1353)		int _operation;
HXDLIN(1353)		::String _hx_switch_0 = operation;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE(1353)			_operation = (int)0;
HXDLIN(1353)			goto _hx_goto_79;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE(1353)			_operation = (int)2;
HXDLIN(1353)			goto _hx_goto_79;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE(1353)			_operation = (int)3;
HXDLIN(1353)			goto _hx_goto_79;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE(1353)			_operation = (int)1;
HXDLIN(1353)			goto _hx_goto_79;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE(1353)			_operation = (int)4;
HXDLIN(1353)			goto _hx_goto_79;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE(1353)			_operation = (int)5;
HXDLIN(1353)			goto _hx_goto_79;
            		}
            		/* default */{
HXLINE(1353)			_operation = (int)-1;
            		}
            		_hx_goto_79:;
HXLINE(1365)		if ((_operation == (int)-1)) {
HXLINE(1365)			return (int)0;
            		}
HXLINE(1367)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE(1368)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE(1370)		bool _hx_tmp;
HXDLIN(1370)		if (hx::IsNotNull( srcData )) {
HXLINE(1370)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE(1370)			_hx_tmp = true;
            		}
HXDLIN(1370)		if (_hx_tmp) {
HXLINE(1370)			return (int)0;
            		}
HXLINE(1372)		int hits = (int)0;
HXLINE(1375)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1375)			::cpp::Function< int  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int,int,int,int,int,int,int,bool) > hits1 = ::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_threshold;
HXDLIN(1375)			hits = hits1(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),_operation,((int)((int)_threshold >> (int)(int)16) & (int)(int)65535),((int)_threshold & (int)(int)65535),((int)((int)_color >> (int)(int)16) & (int)(int)65535),((int)_color & (int)(int)65535),((int)((int)_mask >> (int)(int)16) & (int)(int)65535),((int)_mask & (int)(int)65535),copySource);
            		}
            		else {
HXLINE(1379)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView srcView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE(1380)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView destView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE(1382)			int srcFormat = sourceImage->buffer->format;
HXLINE(1383)			int destFormat = image->buffer->format;
HXLINE(1384)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE(1385)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE(1387)			int srcPosition;
HXDLIN(1387)			int destPosition;
HXDLIN(1387)			int srcPixel;
HXDLIN(1387)			int destPixel;
HXDLIN(1387)			int pixelMask;
HXDLIN(1387)			bool test;
HXDLIN(1387)			int value;
HXLINE(1389)			{
HXLINE(1389)				int _g1 = (int)0;
HXDLIN(1389)				int _g = destView->height;
HXDLIN(1389)				while((_g1 < _g)){
HXLINE(1389)					_g1 = (_g1 + (int)1);
HXDLIN(1389)					int y = (_g1 - (int)1);
HXLINE(1391)					int srcView1 = srcView->byteOffset;
HXDLIN(1391)					srcPosition = (srcView1 + (srcView->stride * y));
HXLINE(1392)					int destView1 = destView->byteOffset;
HXDLIN(1392)					destPosition = (destView1 + (destView->stride * y));
HXLINE(1394)					{
HXLINE(1394)						int _g3 = (int)0;
HXDLIN(1394)						int _g2 = destView->width;
HXDLIN(1394)						while((_g3 < _g2)){
HXLINE(1394)							_g3 = (_g3 + (int)1);
HXDLIN(1394)							int x = (_g3 - (int)1);
HXLINE(1396)							{
HXLINE(1396)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE(1396)										int r = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN(1396)										int srcData1 = srcData->byteOffset;
HXDLIN(1396)										int g = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData1 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1396)										int srcData2 = srcData->byteOffset;
HXDLIN(1396)										int b = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData2 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1396)										int srcData3 = srcData->byteOffset;
HXDLIN(1396)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData3 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(1396)										int srcData4 = srcData->byteOffset;
HXDLIN(1396)										int r1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData4 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1396)										int srcData5 = srcData->byteOffset;
HXDLIN(1396)										int g1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData5 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1396)										int srcData6 = srcData->byteOffset;
HXDLIN(1396)										int b1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData6 + (srcPosition + (int)3))) & (int)(int)255);
HXDLIN(1396)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(1396)										int srcData7 = srcData->byteOffset;
HXDLIN(1396)										int r2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData7 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1396)										int srcData8 = srcData->byteOffset;
HXDLIN(1396)										int g2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData8 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1396)										int b2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN(1396)										int srcData9 = srcData->byteOffset;
HXDLIN(1396)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData9 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(1396)								if (srcPremultiplied) {
HXLINE(1396)									bool _hx_tmp1;
HXDLIN(1396)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE(1396)										_hx_tmp1 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(1396)										_hx_tmp1 = false;
            									}
HXDLIN(1396)									if (_hx_tmp1) {
HXLINE(1396)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN(1396)										{
HXLINE(1396)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1396)											int r3 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1396)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1396)											int g3 = ((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1396)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1396)											srcPixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(1398)							pixelMask = ((int)srcPixel & (int)_mask);
HXLINE(1400)							int tmp1;
HXDLIN(1400)							int tmp2;
HXDLIN(1400)							tmp1 = ((int)hx::UShr(pixelMask,(int)24) & (int)(int)255);
HXDLIN(1400)							tmp2 = ((int)hx::UShr(_threshold,(int)24) & (int)(int)255);
HXDLIN(1400)							if ((tmp1 != tmp2)) {
HXLINE(1400)								bool aNeg = (tmp1 < (int)0);
HXDLIN(1400)								bool bNeg = (tmp2 < (int)0);
HXDLIN(1400)								bool value1;
HXDLIN(1400)								if ((aNeg != bNeg)) {
HXLINE(1400)									value1 = aNeg;
            								}
            								else {
HXLINE(1400)									value1 = (tmp1 > tmp2);
            								}
HXDLIN(1400)								if (value1) {
HXLINE(1400)									value = (int)1;
            								}
            								else {
HXLINE(1400)									value = (int)-1;
            								}
            							}
            							else {
HXLINE(1400)								tmp1 = ((int)hx::UShr(pixelMask,(int)16) & (int)(int)255);
HXDLIN(1400)								tmp2 = ((int)hx::UShr(_threshold,(int)16) & (int)(int)255);
HXDLIN(1400)								if ((tmp1 != tmp2)) {
HXLINE(1400)									bool aNeg1 = (tmp1 < (int)0);
HXDLIN(1400)									bool bNeg1 = (tmp2 < (int)0);
HXDLIN(1400)									bool value2;
HXDLIN(1400)									if ((aNeg1 != bNeg1)) {
HXLINE(1400)										value2 = aNeg1;
            									}
            									else {
HXLINE(1400)										value2 = (tmp1 > tmp2);
            									}
HXDLIN(1400)									if (value2) {
HXLINE(1400)										value = (int)1;
            									}
            									else {
HXLINE(1400)										value = (int)-1;
            									}
            								}
            								else {
HXLINE(1400)									tmp1 = ((int)hx::UShr(pixelMask,(int)8) & (int)(int)255);
HXDLIN(1400)									tmp2 = ((int)hx::UShr(_threshold,(int)8) & (int)(int)255);
HXDLIN(1400)									if ((tmp1 != tmp2)) {
HXLINE(1400)										bool aNeg2 = (tmp1 < (int)0);
HXDLIN(1400)										bool bNeg2 = (tmp2 < (int)0);
HXDLIN(1400)										bool value3;
HXDLIN(1400)										if ((aNeg2 != bNeg2)) {
HXLINE(1400)											value3 = aNeg2;
            										}
            										else {
HXLINE(1400)											value3 = (tmp1 > tmp2);
            										}
HXDLIN(1400)										if (value3) {
HXLINE(1400)											value = (int)1;
            										}
            										else {
HXLINE(1400)											value = (int)-1;
            										}
            									}
            									else {
HXLINE(1400)										tmp1 = ((int)pixelMask & (int)(int)255);
HXDLIN(1400)										tmp2 = ((int)_threshold & (int)(int)255);
HXDLIN(1400)										if ((tmp1 != tmp2)) {
HXLINE(1400)											bool aNeg3 = (tmp1 < (int)0);
HXDLIN(1400)											bool bNeg3 = (tmp2 < (int)0);
HXDLIN(1400)											bool value4;
HXDLIN(1400)											if ((aNeg3 != bNeg3)) {
HXLINE(1400)												value4 = aNeg3;
            											}
            											else {
HXLINE(1400)												value4 = (tmp1 > tmp2);
            											}
HXDLIN(1400)											if (value4) {
HXLINE(1400)												value = (int)1;
            											}
            											else {
HXLINE(1400)												value = (int)-1;
            											}
            										}
            										else {
HXLINE(1400)											value = (int)0;
            										}
            									}
            								}
            							}
HXLINE(1402)							switch((int)(_operation)){
            								case (int)0: {
HXLINE(1404)									test = (value != (int)0);
            								}
            								break;
            								case (int)1: {
HXLINE(1405)									test = (value == (int)0);
            								}
            								break;
            								case (int)2: {
HXLINE(1406)									test = (value == (int)-1);
            								}
            								break;
            								case (int)3: {
HXLINE(1407)									if ((value != (int)0)) {
HXLINE(1407)										test = (value == (int)-1);
            									}
            									else {
HXLINE(1407)										test = true;
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1408)									test = (value == (int)1);
            								}
            								break;
            								case (int)5: {
HXLINE(1409)									if ((value != (int)0)) {
HXLINE(1409)										test = (value == (int)1);
            									}
            									else {
HXLINE(1409)										test = true;
            									}
            								}
            								break;
            								default:{
HXLINE(1410)									test = false;
            								}
            							}
HXLINE(1414)							if (test) {
HXLINE(1416)								{
HXLINE(1416)									if (destPremultiplied) {
HXLINE(1416)										if ((((int)_color & (int)(int)255) == (int)0)) {
HXLINE(1416)											if ((_color != (int)0)) {
HXLINE(1416)												_color = (int)0;
            											}
            										}
            										else {
HXLINE(1416)											if ((((int)_color & (int)(int)255) != (int)255)) {
HXLINE(1416)												 ::lime::utils::ArrayBufferView this10 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1416)												int this11 = this10->byteOffset;
HXDLIN(1416)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this10->buffer->b,(this11 + (((int)_color & (int)(int)255) * (int)4)));
HXDLIN(1416)												_color = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(_color,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(_color,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(_color,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_color & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN(1416)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1416)											{
HXLINE(1416)												int val = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1416)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val1 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1416)												{
HXLINE(1416)													int destData1 = destData->byteOffset;
HXDLIN(1416)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData1 + (destPosition + (int)1)),val1);
            												}
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val2 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1416)												{
HXLINE(1416)													int destData2 = destData->byteOffset;
HXDLIN(1416)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData2 + (destPosition + (int)2)),val2);
            												}
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val3 = ((int)_color & (int)(int)255);
HXDLIN(1416)												{
HXLINE(1416)													int destData3 = destData->byteOffset;
HXDLIN(1416)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData3 + (destPosition + (int)3)),val3);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1416)											{
HXLINE(1416)												int val4 = ((int)_color & (int)(int)255);
HXDLIN(1416)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val5 = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1416)												{
HXLINE(1416)													int destData4 = destData->byteOffset;
HXDLIN(1416)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData4 + (destPosition + (int)1)),val5);
            												}
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val6 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1416)												{
HXLINE(1416)													int destData5 = destData->byteOffset;
HXDLIN(1416)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData5 + (destPosition + (int)2)),val6);
            												}
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val7 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1416)												{
HXLINE(1416)													int destData6 = destData->byteOffset;
HXDLIN(1416)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData6 + (destPosition + (int)3)),val7);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1416)											{
HXLINE(1416)												int val8 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1416)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val9 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1416)												{
HXLINE(1416)													int destData7 = destData->byteOffset;
HXDLIN(1416)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData7 + (destPosition + (int)1)),val9);
            												}
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val10 = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1416)												{
HXLINE(1416)													int destData8 = destData->byteOffset;
HXDLIN(1416)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData8 + (destPosition + (int)2)),val10);
            												}
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val11 = ((int)_color & (int)(int)255);
HXDLIN(1416)												{
HXLINE(1416)													int destData9 = destData->byteOffset;
HXDLIN(1416)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData9 + (destPosition + (int)3)),val11);
            												}
            											}
            										}
            										break;
            									}
            								}
HXLINE(1417)								hits = (hits + (int)1);
            							}
            							else {
HXLINE(1419)								if (copySource) {
HXLINE(1421)									if (destPremultiplied) {
HXLINE(1421)										if ((((int)srcPixel & (int)(int)255) == (int)0)) {
HXLINE(1421)											if ((srcPixel != (int)0)) {
HXLINE(1421)												srcPixel = (int)0;
            											}
            										}
            										else {
HXLINE(1421)											if ((((int)srcPixel & (int)(int)255) != (int)255)) {
HXLINE(1421)												 ::lime::utils::ArrayBufferView this12 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1421)												int this13 = this12->byteOffset;
HXDLIN(1421)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this12->buffer->b,(this13 + (((int)srcPixel & (int)(int)255) * (int)4)));
HXDLIN(1421)												srcPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN(1421)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1421)											{
HXLINE(1421)												int val12 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1421)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val13 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1421)												{
HXLINE(1421)													int destData10 = destData->byteOffset;
HXDLIN(1421)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val13);
            												}
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val14 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1421)												{
HXLINE(1421)													int destData11 = destData->byteOffset;
HXDLIN(1421)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val14);
            												}
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val15 = ((int)srcPixel & (int)(int)255);
HXDLIN(1421)												{
HXLINE(1421)													int destData12 = destData->byteOffset;
HXDLIN(1421)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val15);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1421)											{
HXLINE(1421)												int val16 = ((int)srcPixel & (int)(int)255);
HXDLIN(1421)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val17 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1421)												{
HXLINE(1421)													int destData13 = destData->byteOffset;
HXDLIN(1421)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val17);
            												}
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val18 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1421)												{
HXLINE(1421)													int destData14 = destData->byteOffset;
HXDLIN(1421)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val18);
            												}
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val19 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1421)												{
HXLINE(1421)													int destData15 = destData->byteOffset;
HXDLIN(1421)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val19);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1421)											{
HXLINE(1421)												int val20 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1421)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val21 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1421)												{
HXLINE(1421)													int destData16 = destData->byteOffset;
HXDLIN(1421)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val21);
            												}
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val22 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1421)												{
HXLINE(1421)													int destData17 = destData->byteOffset;
HXDLIN(1421)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val22);
            												}
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val23 = ((int)srcPixel & (int)(int)255);
HXDLIN(1421)												{
HXLINE(1421)													int destData18 = destData->byteOffset;
HXDLIN(1421)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val23);
            												}
            											}
            										}
            										break;
            									}
            								}
            							}
HXLINE(1425)							srcPosition = (srcPosition + (int)4);
HXLINE(1426)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE(1434)		if ((hits > (int)0)) {
HXLINE(1436)			image->dirty = true;
HXLINE(1437)			image->version++;
            		}
HXLINE(1441)		return hits;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(ImageDataUtil_obj,threshold,return )

void ImageDataUtil_obj::unmultiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1446_unmultiplyAlpha)
HXLINE(1448)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1449)		if (hx::IsNull( data )) {
HXLINE(1449)			return;
            		}
HXLINE(1452)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1452)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_unmultiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE(1456)			int format = image->buffer->format;
HXLINE(1457)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE(1458)			int pixel;
HXLINE(1460)			{
HXLINE(1460)				int _g1 = (int)0;
HXDLIN(1460)				int _g = length;
HXDLIN(1460)				while((_g1 < _g)){
HXLINE(1460)					_g1 = (_g1 + (int)1);
HXDLIN(1460)					int i = (_g1 - (int)1);
HXLINE(1462)					{
HXLINE(1462)						int offset = (i * (int)4);
HXDLIN(1462)						switch((int)(format)){
            							case (int)0: {
HXLINE(1462)								int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1462)								int data1 = data->byteOffset;
HXDLIN(1462)								int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1462)								int data2 = data->byteOffset;
HXDLIN(1462)								int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1462)								int data3 = data->byteOffset;
HXDLIN(1462)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE(1462)								int data4 = data->byteOffset;
HXDLIN(1462)								int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1462)								int data5 = data->byteOffset;
HXDLIN(1462)								int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1462)								int data6 = data->byteOffset;
HXDLIN(1462)								int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN(1462)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE(1462)								int data7 = data->byteOffset;
HXDLIN(1462)								int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1462)								int data8 = data->byteOffset;
HXDLIN(1462)								int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1462)								int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1462)								int data9 = data->byteOffset;
HXDLIN(1462)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
HXDLIN(1462)						bool _hx_tmp;
HXDLIN(1462)						if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE(1462)							_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            						}
            						else {
HXLINE(1462)							_hx_tmp = false;
            						}
HXDLIN(1462)						if (_hx_tmp) {
HXLINE(1462)							::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN(1462)							{
HXLINE(1462)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1462)								int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1462)								 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1462)								int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1462)								 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1462)								pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            							}
            						}
            					}
HXLINE(1463)					{
HXLINE(1463)						int offset1 = (i * (int)4);
HXDLIN(1463)						switch((int)(format)){
            							case (int)0: {
HXLINE(1463)								{
HXLINE(1463)									int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1463)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1463)								{
HXLINE(1463)									int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1463)									{
HXLINE(1463)										int data10 = data->byteOffset;
HXDLIN(1463)										::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset1 + (int)1)),val1);
            									}
            								}
HXDLIN(1463)								{
HXLINE(1463)									int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1463)									{
HXLINE(1463)										int data11 = data->byteOffset;
HXDLIN(1463)										::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset1 + (int)2)),val2);
            									}
            								}
HXDLIN(1463)								{
HXLINE(1463)									int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1463)									{
HXLINE(1463)										int data12 = data->byteOffset;
HXDLIN(1463)										::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset1 + (int)3)),val3);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1463)								{
HXLINE(1463)									int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1463)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN(1463)								{
HXLINE(1463)									int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1463)									{
HXLINE(1463)										int data13 = data->byteOffset;
HXDLIN(1463)										::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset1 + (int)1)),val5);
            									}
            								}
HXDLIN(1463)								{
HXLINE(1463)									int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1463)									{
HXLINE(1463)										int data14 = data->byteOffset;
HXDLIN(1463)										::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset1 + (int)2)),val6);
            									}
            								}
HXDLIN(1463)								{
HXLINE(1463)									int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1463)									{
HXLINE(1463)										int data15 = data->byteOffset;
HXDLIN(1463)										::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset1 + (int)3)),val7);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1463)								{
HXLINE(1463)									int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1463)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN(1463)								{
HXLINE(1463)									int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1463)									{
HXLINE(1463)										int data16 = data->byteOffset;
HXDLIN(1463)										::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset1 + (int)1)),val9);
            									}
            								}
HXDLIN(1463)								{
HXLINE(1463)									int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1463)									{
HXLINE(1463)										int data17 = data->byteOffset;
HXDLIN(1463)										::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset1 + (int)2)),val10);
            									}
            								}
HXDLIN(1463)								{
HXLINE(1463)									int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1463)									{
HXLINE(1463)										int data18 = data->byteOffset;
HXDLIN(1463)										::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset1 + (int)3)),val11);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1469)		image->buffer->premultiplied = false;
HXLINE(1470)		image->dirty = true;
HXLINE(1471)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,unmultiplyAlpha,(void))

int ImageDataUtil_obj::_hx___pixelCompare(int n1,int n2){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1476___pixelCompare)
HXLINE(1478)		int tmp1;
HXLINE(1479)		int tmp2;
HXLINE(1481)		tmp1 = ((int)hx::UShr(n1,(int)24) & (int)(int)255);
HXLINE(1482)		tmp2 = ((int)hx::UShr(n2,(int)24) & (int)(int)255);
HXLINE(1484)		if ((tmp1 != tmp2)) {
HXLINE(1486)			bool aNeg = (tmp1 < (int)0);
HXDLIN(1486)			bool bNeg = (tmp2 < (int)0);
HXDLIN(1486)			bool _hx_tmp;
HXDLIN(1486)			if ((aNeg != bNeg)) {
HXLINE(1486)				_hx_tmp = aNeg;
            			}
            			else {
HXLINE(1486)				_hx_tmp = (tmp1 > tmp2);
            			}
HXDLIN(1486)			if (_hx_tmp) {
HXLINE(1486)				return (int)1;
            			}
            			else {
HXLINE(1486)				return (int)-1;
            			}
            		}
            		else {
HXLINE(1490)			tmp1 = ((int)hx::UShr(n1,(int)16) & (int)(int)255);
HXLINE(1491)			tmp2 = ((int)hx::UShr(n2,(int)16) & (int)(int)255);
HXLINE(1493)			if ((tmp1 != tmp2)) {
HXLINE(1495)				bool aNeg1 = (tmp1 < (int)0);
HXDLIN(1495)				bool bNeg1 = (tmp2 < (int)0);
HXDLIN(1495)				bool _hx_tmp1;
HXDLIN(1495)				if ((aNeg1 != bNeg1)) {
HXLINE(1495)					_hx_tmp1 = aNeg1;
            				}
            				else {
HXLINE(1495)					_hx_tmp1 = (tmp1 > tmp2);
            				}
HXDLIN(1495)				if (_hx_tmp1) {
HXLINE(1495)					return (int)1;
            				}
            				else {
HXLINE(1495)					return (int)-1;
            				}
            			}
            			else {
HXLINE(1499)				tmp1 = ((int)hx::UShr(n1,(int)8) & (int)(int)255);
HXLINE(1500)				tmp2 = ((int)hx::UShr(n2,(int)8) & (int)(int)255);
HXLINE(1502)				if ((tmp1 != tmp2)) {
HXLINE(1504)					bool aNeg2 = (tmp1 < (int)0);
HXDLIN(1504)					bool bNeg2 = (tmp2 < (int)0);
HXDLIN(1504)					bool _hx_tmp2;
HXDLIN(1504)					if ((aNeg2 != bNeg2)) {
HXLINE(1504)						_hx_tmp2 = aNeg2;
            					}
            					else {
HXLINE(1504)						_hx_tmp2 = (tmp1 > tmp2);
            					}
HXDLIN(1504)					if (_hx_tmp2) {
HXLINE(1504)						return (int)1;
            					}
            					else {
HXLINE(1504)						return (int)-1;
            					}
            				}
            				else {
HXLINE(1508)					tmp1 = ((int)n1 & (int)(int)255);
HXLINE(1509)					tmp2 = ((int)n2 & (int)(int)255);
HXLINE(1511)					if ((tmp1 != tmp2)) {
HXLINE(1513)						bool aNeg3 = (tmp1 < (int)0);
HXDLIN(1513)						bool bNeg3 = (tmp2 < (int)0);
HXDLIN(1513)						bool _hx_tmp3;
HXDLIN(1513)						if ((aNeg3 != bNeg3)) {
HXLINE(1513)							_hx_tmp3 = aNeg3;
            						}
            						else {
HXLINE(1513)							_hx_tmp3 = (tmp1 > tmp2);
            						}
HXDLIN(1513)						if (_hx_tmp3) {
HXLINE(1513)							return (int)1;
            						}
            						else {
HXLINE(1513)							return (int)-1;
            						}
            					}
            					else {
HXLINE(1517)						return (int)0;
            					}
            				}
            			}
            		}
HXLINE(1484)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___pixelCompare,return )


ImageDataUtil_obj::ImageDataUtil_obj()
{
}

bool ImageDataUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { outValue = floodFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixels") ) { outValue = getPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setFormat") ) { outValue = setFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"threshold") ) { outValue = threshold_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gaussianBlur") ) { outValue = gaussianBlur_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resizeBuffer") ) { outValue = resizeBuffer_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__pixelCompare") ) { outValue = _hx___pixelCompare_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { outValue = getColorBoundsRect_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageDataUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ImageDataUtil_obj_sStaticStorageInfo = 0;
#endif

static void ImageDataUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageDataUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class ImageDataUtil_obj::__mClass;

static ::String ImageDataUtil_obj_sStaticFields[] = {
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("gaussianBlur","\x42","\xea","\x61","\xf7"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("multiplyAlpha","\x9a","\xf2","\x1c","\x6b"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("resizeBuffer","\x14","\x7a","\xa2","\xb4"),
	HX_HCSTRING("setFormat","\x79","\x04","\x36","\x5d"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unmultiplyAlpha","\xa1","\xc8","\x96","\x28"),
	HX_HCSTRING("__pixelCompare","\xdf","\x79","\xe3","\x8d"),
	::String(null())
};

void ImageDataUtil_obj::__register()
{
	hx::Object *dummy = new ImageDataUtil_obj;
	ImageDataUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.utils.ImageDataUtil","\x80","\x72","\x23","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageDataUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageDataUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageDataUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageDataUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageDataUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace graphics
} // end namespace utils
